{"ast":null,"code":"import _toConsumableArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toChecksumAddress, leftPad, hexToNumber } from 'web3-utils';\nimport { isAddress } from 'web3-validator';\nimport { InvalidAddressError } from 'web3-errors';\n/**\n * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.\n */\nexport var Iban = /*#__PURE__*/function () {\n  /**\n   * Construct a direct or indirect IBAN that has conversion methods and validity checks.\n   * If the provided string was not of either the length of a direct IBAN (34 or 35),\n   * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').\n   *\n   * @param iban - a Direct or an Indirect IBAN\n   * @returns - Iban instance\n   *\n   * @example\n   * ```ts\n   * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n   * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }\n   * ```\n   */\n  function Iban(iban) {\n    var _this = this;\n    _classCallCheck(this, Iban);\n    /**\n     * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.\n     * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\n     * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\n     * Note: this is also available as a static method.\n     *\n     * @return the equivalent ethereum address\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n     * iban.toAddress();\n     * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\n     * ```\n     */\n    this.toAddress = function () {\n      if (_this.isDirect()) {\n        // check if Iban can be converted to an address\n        var base36 = _this._iban.slice(4);\n        var parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint\n        var paddedBigInt = leftPad(parsedBigInt, 40);\n        return toChecksumAddress(paddedBigInt);\n      }\n      throw new Error('Iban is indirect and cannot be converted. Must be length of 34 or 35');\n    };\n    if (Iban.isIndirect(iban) || Iban.isDirect(iban)) {\n      this._iban = iban;\n    } else {\n      throw new Error('Invalid IBAN was provided');\n    }\n  }\n  /**\n   * A static method that checks if an IBAN is Direct.\n   * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\n   * Note: this is also available as a method at an Iban instance.\n   * @param iban - an IBAN to be checked\n   * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\n   *\n   * @example\n   * ```ts\n   * web3.eth.Iban.isDirect(\"XE81ETHXREGGAVOFYORK\");\n   * > false\n   * ```\n   */\n  _createClass(Iban, [{\n    key: \"isDirect\",\n    value:\n    /**\n     * An instance method that checks if iban number is Direct.\n     * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\n     * Note: this is also available as a static method.\n     * @param iban - an IBAN to be checked\n     * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.isDirect();\n     * > false\n     * ```\n     */\n    function isDirect() {\n      return Iban.isDirect(this._iban);\n    }\n    /**\n     * A static method that checks if an IBAN is Indirect.\n     * It actually check the length of the provided variable and, only if it is 20, it returns true.\n     * Note: this is also available as a method at an Iban instance.\n     * @param iban - an IBAN to be checked\n     * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.isIndirect(\"XE81ETHXREGGAVOFYORK\");\n     * > true\n     * ```\n     */\n  }, {\n    key: \"isIndirect\",\n    value:\n    /**\n     * check if iban number if indirect\n     * It actually check the length of the provided variable and, only if it is 20, it returns true.\n     * Note: this is also available as a static method.\n     * @param iban - an IBAN to be checked\n     * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.isIndirect();\n     * > true\n     * ```\n     */\n    function isIndirect() {\n      return Iban.isIndirect(this._iban);\n    }\n    /**\n     * This method could be used to check if a given string is valid IBAN object.\n     * Note: this is also available as a method at an Iban instance.\n     *\n     * @param iban - a string to be checked if it is in IBAN\n     * @returns - true if it is valid IBAN\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.isValid(\"XE81ETHXREGGAVOFYORK\");\n     * > true\n     *\n     * web3.eth.Iban.isValid(\"XE82ETHXREGGAVOFYORK\");\n     * > false // because the checksum is incorrect\n     * ```\n     */\n  }, {\n    key: \"isValid\",\n    value:\n    /**\n     * Should be called to check if the early provided IBAN is correct.\n     * Note: this is also available as a static method.\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.isValid();\n     * > true\n     *\n     * const iban = new web3.eth.Iban(\"XE82ETHXREGGAVOFYORK\");\n     * iban.isValid();\n     * > false // because the checksum is incorrect\n     * ```\n     */\n    function isValid() {\n      return Iban.isValid(this._iban);\n    }\n    /**\n     * Convert the passed BBAN to an IBAN for this country specification.\n     * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n     * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n     *\n     * @param bban - the BBAN to convert to IBAN\n     * @returns an Iban class instance that holds the equivalent IBAN\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');\n     * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n     * ```\n     */\n  }, {\n    key: \"client\",\n    value:\n    /**\n     * Should be called to get client identifier within institution\n     *\n     * @return the client of the IBAN instance.\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.client();\n     * > 'GAVOFYORK'\n     * ```\n     */\n    function client() {\n      return this.isIndirect() ? this._iban.slice(11) : '';\n    }\n    /**\n     * Returns the IBAN checksum of the early provided IBAN\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.checksum();\n     * > \"81\"\n     * ```\n     *\n     */\n  }, {\n    key: \"checksum\",\n    value: function checksum() {\n      return this._iban.slice(2, 4);\n    }\n    /**\n     * Returns institution identifier from the early provided  IBAN\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n     * iban.institution();\n     * > 'XREG'\n     * ```\n     */\n  }, {\n    key: \"institution\",\n    value: function institution() {\n      return this.isIndirect() ? this._iban.slice(7, 11) : '';\n    }\n    /**\n     * Simply returns the early provided IBAN\n     *\n     * @example\n     * ```ts\n     * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');\n     * iban.toString();\n     * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'\n     * ```\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return this._iban;\n    }\n  }], [{\n    key: \"isDirect\",\n    value: function isDirect(iban) {\n      return iban.length === 34 || iban.length === 35;\n    }\n  }, {\n    key: \"isIndirect\",\n    value: function isIndirect(iban) {\n      return iban.length === 20;\n    }\n  }, {\n    key: \"isValid\",\n    value: function isValid(iban) {\n      return /^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) && Iban._mod9710(Iban._iso13616Prepare(iban)) === 1;\n    }\n  }, {\n    key: \"fromBban\",\n    value: function fromBban(bban) {\n      var countryCode = 'XE';\n      var remainder = this._mod9710(this._iso13616Prepare(\"\".concat(countryCode, \"00\").concat(bban)));\n      var checkDigit = \"0\".concat((98 - remainder).toString()).slice(-2);\n      return new Iban(\"\".concat(countryCode).concat(checkDigit).concat(bban));\n    }\n    /**\n     * Should be used to create IBAN object for given institution and identifier\n     *\n     * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.\n     * @returns an Iban class instance that holds the equivalent IBAN\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.createIndirect({\n     *     institution: \"XREG\",\n     *     identifier: \"GAVOFYORK\"\n     * });\n     * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n     * ```\n     */\n  }, {\n    key: \"createIndirect\",\n    value: function createIndirect(options) {\n      return Iban.fromBban(\"ETH\".concat(options.institution).concat(options.identifier));\n    }\n    /**\n     * This method should be used to create iban object from an Ethereum address.\n     *\n     * @param address - an Ethereum address\n     * @returns an Iban class instance that holds the equivalent IBAN\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.fromAddress(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\n     * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n     * ```\n     */\n  }, {\n    key: \"fromAddress\",\n    value: function fromAddress(address) {\n      if (!isAddress(address)) {\n        throw new InvalidAddressError(address);\n      }\n      var num = BigInt(hexToNumber(address));\n      var base36 = num.toString(36);\n      var padded = leftPad(base36, 15);\n      return Iban.fromBban(padded.toUpperCase());\n    }\n    /**\n     * This method should be used to create IBAN address from an Ethereum address\n     *\n     * @param address - an Ethereum address\n     * @return the equivalent IBAN address\n     *\n     * @example\n     * ```ts\n     * web3.eth.Iban.toIban(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\n     * > \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"\n     * ```\n     */\n  }, {\n    key: \"toIban\",\n    value: function toIban(address) {\n      return Iban.fromAddress(address).toString();\n    }\n  }]);\n  return Iban;\n}();\n/**\n * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n */\nIban._iso13616Prepare = function (iban) {\n  var A = 'A'.charCodeAt(0);\n  var Z = 'Z'.charCodeAt(0);\n  var upperIban = iban.toUpperCase();\n  var modifiedIban = \"\".concat(upperIban.slice(4)).concat(upperIban.slice(0, 4));\n  return modifiedIban.split('').map(function (n) {\n    var code = n.charCodeAt(0);\n    if (code >= A && code <= Z) {\n      // A = 10, B = 11, ... Z = 35\n      return code - A + 10;\n    }\n    return n;\n  }).join('');\n};\n/**\n * return the bigint of the given string with the specified base\n */\nIban._parseInt = function (str, base) {\n  return _toConsumableArray(str).reduce(function (acc, curr) {\n    return BigInt(parseInt(curr, base)) + BigInt(base) * acc;\n  }, BigInt(0));\n};\n/**\n * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n */\nIban._mod9710 = function (iban) {\n  var remainder = iban;\n  var block;\n  while (remainder.length > 2) {\n    block = remainder.slice(0, 9);\n    remainder = \"\".concat((parseInt(block, 10) % 97).toString()).concat(remainder.slice(block.length));\n  }\n  return parseInt(remainder, 10) % 97;\n};\n/**\n * This method should be used to create an ethereum address from a Direct IBAN address.\n * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\n * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\n * Note: this is also available as a method at an Iban instance.\n *\n * @param iban - a Direct IBAN address\n * @return the equivalent ethereum address\n *\n * @example\n * ```ts\n * web3.eth.Iban.toAddress(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\n * ```\n */\nIban.toAddress = function (iban) {\n  var ibanObject = new Iban(iban);\n  return ibanObject.toAddress();\n};","map":{"version":3,"names":["toChecksumAddress","leftPad","hexToNumber","isAddress","InvalidAddressError","Iban","iban","_this","_classCallCheck","toAddress","isDirect","base36","_iban","slice","parsedBigInt","_parseInt","paddedBigInt","Error","isIndirect","_createClass","key","value","isValid","client","checksum","institution","toString","length","test","_mod9710","_iso13616Prepare","fromBban","bban","countryCode","remainder","concat","checkDigit","createIndirect","options","identifier","fromAddress","address","num","BigInt","padded","toUpperCase","toIban","A","charCodeAt","Z","upperIban","modifiedIban","split","map","n","code","join","str","base","_toConsumableArray","reduce","acc","curr","parseInt","block","ibanObject"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-iban\\src\\iban.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { HexString } from 'web3-types';\nimport { toChecksumAddress, leftPad, hexToNumber } from 'web3-utils';\nimport { isAddress } from 'web3-validator';\nimport { InvalidAddressError } from 'web3-errors';\nimport { IbanOptions } from './types.js';\n\n/**\n * Converts Ethereum addresses to IBAN or BBAN addresses and vice versa.\n */\nexport class Iban {\n\tprivate readonly _iban: string;\n\n\t/**\n\t * Prepare an IBAN for mod 97 computation by moving the first 4 chars to the end and transforming the letters to\n\t * numbers (A = 10, B = 11, ..., Z = 35), as specified in ISO13616.\n\t */\n\tprivate static readonly _iso13616Prepare = (iban: string): string => {\n\t\tconst A = 'A'.charCodeAt(0);\n\t\tconst Z = 'Z'.charCodeAt(0);\n\n\t\tconst upperIban = iban.toUpperCase();\n\t\tconst modifiedIban = `${upperIban.slice(4)}${upperIban.slice(0, 4)}`;\n\n\t\treturn modifiedIban\n\t\t\t.split('')\n\t\t\t.map(n => {\n\t\t\t\tconst code = n.charCodeAt(0);\n\t\t\t\tif (code >= A && code <= Z) {\n\t\t\t\t\t// A = 10, B = 11, ... Z = 35\n\t\t\t\t\treturn code - A + 10;\n\t\t\t\t}\n\t\t\t\treturn n;\n\t\t\t})\n\t\t\t.join('');\n\t};\n\n\t/**\n\t * return the bigint of the given string with the specified base\n\t */\n\tprivate static readonly _parseInt = (str: string, base: number): bigint =>\n\t\t[...str].reduce(\n\t\t\t(acc, curr) => BigInt(parseInt(curr, base)) + BigInt(base) * acc,\n\t\t\tBigInt(0),\n\t\t);\n\n\t/**\n\t * Calculates the MOD 97 10 of the passed IBAN as specified in ISO7064.\n\t */\n\tprivate static readonly _mod9710 = (iban: string): number => {\n\t\tlet remainder = iban;\n\t\tlet block;\n\n\t\twhile (remainder.length > 2) {\n\t\t\tblock = remainder.slice(0, 9);\n\t\t\tremainder = `${(parseInt(block, 10) % 97).toString()}${remainder.slice(block.length)}`;\n\t\t}\n\n\t\treturn parseInt(remainder, 10) % 97;\n\t};\n\n\t/**\n\t * A static method that checks if an IBAN is Direct.\n\t * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\n\t * Note: this is also available as a method at an Iban instance.\n\t * @param iban - an IBAN to be checked\n\t * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.isDirect(\"XE81ETHXREGGAVOFYORK\");\n\t * > false\n\t * ```\n\t */\n\tpublic static isDirect(iban: string): boolean {\n\t\treturn iban.length === 34 || iban.length === 35;\n\t}\n\n\t/**\n\t * An instance method that checks if iban number is Direct.\n\t * It actually check the length of the provided variable and, only if it is 34 or 35, it returns true.\n\t * Note: this is also available as a static method.\n\t * @param iban - an IBAN to be checked\n\t * @returns - `true` if the provided `iban` is a Direct IBAN, and `false` otherwise.\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.isDirect();\n\t * > false\n\t * ```\n\t */\n\tpublic isDirect(): boolean {\n\t\treturn Iban.isDirect(this._iban);\n\t}\n\n\t/**\n\t * A static method that checks if an IBAN is Indirect.\n\t * It actually check the length of the provided variable and, only if it is 20, it returns true.\n\t * Note: this is also available as a method at an Iban instance.\n\t * @param iban - an IBAN to be checked\n\t * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.isIndirect(\"XE81ETHXREGGAVOFYORK\");\n\t * > true\n\t * ```\n\t */\n\tpublic static isIndirect(iban: string): boolean {\n\t\treturn iban.length === 20;\n\t}\n\n\t/**\n\t * check if iban number if indirect\n\t * It actually check the length of the provided variable and, only if it is 20, it returns true.\n\t * Note: this is also available as a static method.\n\t * @param iban - an IBAN to be checked\n\t * @returns - `true` if the provided `iban` is an Indirect IBAN, and `false` otherwise.\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.isIndirect();\n\t * > true\n\t * ```\n\t */\n\tpublic isIndirect(): boolean {\n\t\treturn Iban.isIndirect(this._iban);\n\t}\n\n\t/**\n\t * This method could be used to check if a given string is valid IBAN object.\n\t * Note: this is also available as a method at an Iban instance.\n\t *\n\t * @param iban - a string to be checked if it is in IBAN\n\t * @returns - true if it is valid IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.isValid(\"XE81ETHXREGGAVOFYORK\");\n\t * > true\n\t *\n\t * web3.eth.Iban.isValid(\"XE82ETHXREGGAVOFYORK\");\n\t * > false // because the checksum is incorrect\n\t * ```\n\t */\n\tpublic static isValid(iban: string) {\n\t\treturn (\n\t\t\t/^XE[0-9]{2}(ETH[0-9A-Z]{13}|[0-9A-Z]{30,31})$/.test(iban) &&\n\t\t\tIban._mod9710(Iban._iso13616Prepare(iban)) === 1\n\t\t);\n\t}\n\n\t/**\n\t * Should be called to check if the early provided IBAN is correct.\n\t * Note: this is also available as a static method.\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.isValid();\n\t * > true\n\t *\n\t * const iban = new web3.eth.Iban(\"XE82ETHXREGGAVOFYORK\");\n\t * iban.isValid();\n\t * > false // because the checksum is incorrect\n\t * ```\n\t */\n\tpublic isValid(): boolean {\n\t\treturn Iban.isValid(this._iban);\n\t}\n\n\t/**\n\t * Construct a direct or indirect IBAN that has conversion methods and validity checks.\n\t * If the provided string was not of either the length of a direct IBAN (34 or 35),\n\t * nor the length of an indirect IBAN (20), an Error will be thrown ('Invalid IBAN was provided').\n\t *\n\t * @param iban - a Direct or an Indirect IBAN\n\t * @returns - Iban instance\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n\t * > Iban { _iban: 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS' }\n\t * ```\n\t */\n\tpublic constructor(iban: string) {\n\t\tif (Iban.isIndirect(iban) || Iban.isDirect(iban)) {\n\t\t\tthis._iban = iban;\n\t\t} else {\n\t\t\tthrow new Error('Invalid IBAN was provided');\n\t\t}\n\t}\n\n\t/**\n\t * Convert the passed BBAN to an IBAN for this country specification.\n\t * Please note that <i>\"generation of the IBAN shall be the exclusive responsibility of the bank/branch servicing the account\"</i>.\n\t * This method implements the preferred algorithm described in http://en.wikipedia.org/wiki/International_Bank_Account_Number#Generating_IBAN_check_digits\n\t *\n\t * @param bban - the BBAN to convert to IBAN\n\t * @returns an Iban class instance that holds the equivalent IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.fromBban('ETHXREGGAVOFYORK');\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n\t * ```\n\t */\n\tpublic static fromBban(bban: string): Iban {\n\t\tconst countryCode = 'XE';\n\n\t\tconst remainder = this._mod9710(this._iso13616Prepare(`${countryCode}00${bban}`));\n\t\tconst checkDigit = `0${(98 - remainder).toString()}`.slice(-2);\n\n\t\treturn new Iban(`${countryCode}${checkDigit}${bban}`);\n\t}\n\n\t/**\n\t * Should be used to create IBAN object for given institution and identifier\n\t *\n\t * @param options - an object holds the `institution` and the `identifier` which will be composed to create an `Iban` object from.\n\t * @returns an Iban class instance that holds the equivalent IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.createIndirect({\n\t *     institution: \"XREG\",\n\t *     identifier: \"GAVOFYORK\"\n\t * });\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n\t * ```\n\t */\n\tpublic static createIndirect(options: IbanOptions): Iban {\n\t\treturn Iban.fromBban(`ETH${options.institution}${options.identifier}`);\n\t}\n\n\t/**\n\t * This method should be used to create iban object from an Ethereum address.\n\t *\n\t * @param address - an Ethereum address\n\t * @returns an Iban class instance that holds the equivalent IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.fromAddress(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\n\t * > Iban {_iban: \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"}\n\t * ```\n\t */\n\tpublic static fromAddress(address: HexString): Iban {\n\t\tif (!isAddress(address)) {\n\t\t\tthrow new InvalidAddressError(address);\n\t\t}\n\n\t\tconst num = BigInt(hexToNumber(address));\n\t\tconst base36 = num.toString(36);\n\t\tconst padded = leftPad(base36, 15);\n\t\treturn Iban.fromBban(padded.toUpperCase());\n\t}\n\n\t/**\n\t * This method should be used to create an ethereum address from a Direct IBAN address.\n\t * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\n\t * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\n\t * Note: this is also available as a method at an Iban instance.\n\t *\n\t * @param iban - a Direct IBAN address\n\t * @return the equivalent ethereum address\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.toAddress(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n\t * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\n\t * ```\n\t */\n\tpublic static toAddress = (iban: string): HexString => {\n\t\tconst ibanObject = new Iban(iban);\n\t\treturn ibanObject.toAddress();\n\t};\n\n\t/**\n\t * This method should be used to create the equivalent ethereum address for the early provided Direct IBAN address.\n\t * If the provided string was not a direct IBAN (has the length of 34 or 35), an Error will be thrown:\n\t * ('Iban is indirect and cannot be converted. Must be length of 34 or 35').\n\t * Note: this is also available as a static method.\n\t *\n\t * @return the equivalent ethereum address\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\");\n\t * iban.toAddress();\n\t * > \"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\"\n\t * ```\n\t */\n\tpublic toAddress = (): HexString => {\n\t\tif (this.isDirect()) {\n\t\t\t// check if Iban can be converted to an address\n\t\t\tconst base36 = this._iban.slice(4);\n\t\t\tconst parsedBigInt = Iban._parseInt(base36, 36); // convert the base36 string to a bigint\n\t\t\tconst paddedBigInt = leftPad(parsedBigInt, 40);\n\t\t\treturn toChecksumAddress(paddedBigInt);\n\t\t}\n\t\tthrow new Error('Iban is indirect and cannot be converted. Must be length of 34 or 35');\n\t};\n\n\t/**\n\t * This method should be used to create IBAN address from an Ethereum address\n\t *\n\t * @param address - an Ethereum address\n\t * @return the equivalent IBAN address\n\t *\n\t * @example\n\t * ```ts\n\t * web3.eth.Iban.toIban(\"0x00c5496aEe77C1bA1f0854206A26DdA82a81D6D8\");\n\t * > \"XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS\"\n\t * ```\n\t */\n\tpublic static toIban(address: HexString): string {\n\t\treturn Iban.fromAddress(address).toString();\n\t}\n\n\t/**\n\t * Should be called to get client identifier within institution\n\t *\n\t * @return the client of the IBAN instance.\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.client();\n\t * > 'GAVOFYORK'\n\t * ```\n\t */\n\tpublic client(): string {\n\t\treturn this.isIndirect() ? this._iban.slice(11) : '';\n\t}\n\n\t/**\n\t * Returns the IBAN checksum of the early provided IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.checksum();\n\t * > \"81\"\n\t * ```\n\t *\n\t */\n\tpublic checksum(): string {\n\t\treturn this._iban.slice(2, 4);\n\t}\n\n\t/**\n\t * Returns institution identifier from the early provided  IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban(\"XE81ETHXREGGAVOFYORK\");\n\t * iban.institution();\n\t * > 'XREG'\n\t * ```\n\t */\n\tpublic institution(): string {\n\t\treturn this.isIndirect() ? this._iban.slice(7, 11) : '';\n\t}\n\n\t/**\n\t * Simply returns the early provided IBAN\n\t *\n\t * @example\n\t * ```ts\n\t * const iban = new web3.eth.Iban('XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS');\n\t * iban.toString();\n\t * > 'XE7338O073KYGTWWZN0F2WZ0R8PX5ZPPZS'\n\t * ```\n\t */\n\tpublic toString(): string {\n\t\treturn this._iban;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}