{"ast":null,"code":"import _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\nimport { secp256k1 } from './constants.js';\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\nexport var Address = /*#__PURE__*/function () {\n  function Address(buf) {\n    _classCallCheck(this, Address);\n    if (buf.length !== 20) {\n      throw new Error('Invalid address length');\n    }\n    this.buf = buf;\n  }\n  /**\n   * Returns the zero address.\n   */\n  _createClass(Address, [{\n    key: \"equals\",\n    value:\n    /**\n     * Is address equal to another.\n     */\n    function equals(address) {\n      return uint8ArrayEquals(this.buf, address.buf);\n    }\n    /**\n     * Is address zero.\n     */\n  }, {\n    key: \"isZero\",\n    value: function isZero() {\n      return this.equals(Address.zero());\n    }\n    /**\n     * Returns hex encoding of address.\n     */\n  }, {\n    key: \"toString\",\n    value: function toString() {\n      return bytesToHex(this.buf);\n    }\n    /**\n     * Returns Uint8Array representation of address.\n     */\n  }, {\n    key: \"toArray\",\n    value: function toArray() {\n      return this.buf;\n    }\n    /**\n     * Returns the ethereum address of a given public key.\n     * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n     * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n     * @param sanitize Accept public keys in other formats\n     */\n  }], [{\n    key: \"zero\",\n    value: function zero() {\n      return new Address(zeros(20));\n    }\n  }, {\n    key: \"publicToAddress\",\n    value: function publicToAddress(_pubKey) {\n      var sanitize = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var pubKey = _pubKey;\n      assertIsUint8Array(pubKey);\n      if (sanitize && pubKey.length !== 64) {\n        pubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n      }\n      if (pubKey.length !== 64) {\n        throw new Error('Expected pubKey to be of length 64');\n      }\n      // Only take the lower 160bits of the hash\n      return keccak256(pubKey).slice(-20);\n    }\n  }]);\n  return Address;\n}();","map":{"version":3,"names":["keccak256","bytesToHex","uint8ArrayEquals","secp256k1","assertIsUint8Array","zeros","Address","buf","_classCallCheck","length","Error","_createClass","key","value","equals","address","isZero","zero","toString","toArray","publicToAddress","_pubKey","sanitize","arguments","undefined","pubKey","ProjectivePoint","fromHex","toRawBytes","slice"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\address.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex, uint8ArrayEquals } from 'web3-utils';\nimport { secp256k1 } from './constants.js';\nimport { assertIsUint8Array, zeros } from '../common/utils.js';\n\nexport class Address {\n\tpublic readonly buf: Uint8Array;\n\n\tpublic constructor(buf: Uint8Array) {\n\t\tif (buf.length !== 20) {\n\t\t\tthrow new Error('Invalid address length');\n\t\t}\n\t\tthis.buf = buf;\n\t}\n\n\t/**\n\t * Returns the zero address.\n\t */\n\tpublic static zero(): Address {\n\t\treturn new Address(zeros(20));\n\t}\n\n\t/**\n\t * Is address equal to another.\n\t */\n\tpublic equals(address: Address): boolean {\n\t\treturn uint8ArrayEquals(this.buf, address.buf);\n\t}\n\n\t/**\n\t * Is address zero.\n\t */\n\tpublic isZero(): boolean {\n\t\treturn this.equals(Address.zero());\n\t}\n\n\t/**\n\t * Returns hex encoding of address.\n\t */\n\tpublic toString(): string {\n\t\treturn bytesToHex(this.buf);\n\t}\n\n\t/**\n\t * Returns Uint8Array representation of address.\n\t */\n\tpublic toArray(): Uint8Array {\n\t\treturn this.buf;\n\t}\n\n\t/**\n\t * Returns the ethereum address of a given public key.\n\t * Accepts \"Ethereum public keys\" and SEC1 encoded keys.\n\t * @param pubKey The two points of an uncompressed key, unless sanitize is enabled\n\t * @param sanitize Accept public keys in other formats\n\t */\n\tpublic static publicToAddress(_pubKey: Uint8Array, sanitize = false): Uint8Array {\n\t\tlet pubKey = _pubKey;\n\t\tassertIsUint8Array(pubKey);\n\t\tif (sanitize && pubKey.length !== 64) {\n\t\t\tpubKey = secp256k1.ProjectivePoint.fromHex(pubKey).toRawBytes(false).slice(1);\n\t\t}\n\t\tif (pubKey.length !== 64) {\n\t\t\tthrow new Error('Expected pubKey to be of length 64');\n\t\t}\n\t\t// Only take the lower 160bits of the hash\n\t\treturn keccak256(pubKey).slice(-20);\n\t}\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,SAAS,QAAQ,iCAAiC;AAC3D,SAASC,UAAU,EAAEC,gBAAgB,QAAQ,YAAY;AACzD,SAASC,SAAS,QAAQ,gBAAgB;AAC1C,SAASC,kBAAkB,EAAEC,KAAK,QAAQ,oBAAoB;AAE9D,WAAaC,OAAO;EAGnB,SAAAA,QAAmBC,GAAe;IAAAC,eAAA,OAAAF,OAAA;IACjC,IAAIC,GAAG,CAACE,MAAM,KAAK,EAAE,EAAE;MACtB,MAAM,IAAIC,KAAK,CAAC,wBAAwB,CAAC;;IAE1C,IAAI,CAACH,GAAG,GAAGA,GAAG;EACf;EAEA;;;EAAAI,YAAA,CAAAL,OAAA;IAAAM,GAAA;IAAAC,KAAA;IAOA;;;IAGO,SAAAC,OAAOC,OAAgB;MAC7B,OAAOb,gBAAgB,CAAC,IAAI,CAACK,GAAG,EAAEQ,OAAO,CAACR,GAAG,CAAC;IAC/C;IAEA;;;EAAA;IAAAK,GAAA;IAAAC,KAAA,EAGO,SAAAG,OAAA,EAAM;MACZ,OAAO,IAAI,CAACF,MAAM,CAACR,OAAO,CAACW,IAAI,EAAE,CAAC;IACnC;IAEA;;;EAAA;IAAAL,GAAA;IAAAC,KAAA,EAGO,SAAAK,SAAA,EAAQ;MACd,OAAOjB,UAAU,CAAC,IAAI,CAACM,GAAG,CAAC;IAC5B;IAEA;;;EAAA;IAAAK,GAAA;IAAAC,KAAA,EAGO,SAAAM,QAAA,EAAO;MACb,OAAO,IAAI,CAACZ,GAAG;IAChB;IAEA;;;;;;EAAA;IAAAK,GAAA;IAAAC,KAAA,EAhCO,SAAAI,KAAA,EAAW;MACjB,OAAO,IAAIX,OAAO,CAACD,KAAK,CAAC,EAAE,CAAC,CAAC;IAC9B;EAAC;IAAAO,GAAA;IAAAC,KAAA,EAoCM,SAAAO,gBAAuBC,OAAmB,EAAkB;MAAA,IAAhBC,QAAQ,GAAAC,SAAA,CAAAd,MAAA,QAAAc,SAAA,QAAAC,SAAA,GAAAD,SAAA,MAAG,KAAK;MAClE,IAAIE,MAAM,GAAGJ,OAAO;MACpBjB,kBAAkB,CAACqB,MAAM,CAAC;MAC1B,IAAIH,QAAQ,IAAIG,MAAM,CAAChB,MAAM,KAAK,EAAE,EAAE;QACrCgB,MAAM,GAAGtB,SAAS,CAACuB,eAAe,CAACC,OAAO,CAACF,MAAM,CAAC,CAACG,UAAU,CAAC,KAAK,CAAC,CAACC,KAAK,CAAC,CAAC,CAAC;;MAE9E,IAAIJ,MAAM,CAAChB,MAAM,KAAK,EAAE,EAAE;QACzB,MAAM,IAAIC,KAAK,CAAC,oCAAoC,CAAC;;MAEtD;MACA,OAAOV,SAAS,CAACyB,MAAM,CAAC,CAACI,KAAK,CAAC,CAAC,EAAE,CAAC;IACpC;EAAC;EAAA,OAAAvB,OAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}