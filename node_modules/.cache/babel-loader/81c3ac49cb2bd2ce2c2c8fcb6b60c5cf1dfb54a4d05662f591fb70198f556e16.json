{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT } from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManagerEvent } from './web3_request_manager.js';\nexport var Web3SubscriptionManager = /*#__PURE__*/function () {\n  function Web3SubscriptionManager(requestManager, registeredSubscriptions) {\n    var _this = this;\n    var tolerateUnlinkedSubscription = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    _classCallCheck(this, Web3SubscriptionManager);\n    this.requestManager = requestManager;\n    this.registeredSubscriptions = registeredSubscriptions;\n    this.tolerateUnlinkedSubscription = tolerateUnlinkedSubscription;\n    this._subscriptions = new Map();\n    this.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, function () {\n      return __awaiter(_this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this.unsubscribe();\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    });\n    this.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, function () {\n      _this.clear();\n      _this.listenToProviderEvents();\n    });\n    this.listenToProviderEvents();\n  }\n  _createClass(Web3SubscriptionManager, [{\n    key: \"listenToProviderEvents\",\n    value: function listenToProviderEvents() {\n      var _this2 = this;\n      var providerAsWebProvider = this.requestManager.provider;\n      if (!this.requestManager.provider || typeof (providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions) === 'function' && !(providerAsWebProvider === null || providerAsWebProvider === void 0 ? void 0 : providerAsWebProvider.supportsSubscriptions())) {\n        return;\n      }\n      if (typeof this.requestManager.provider.on === 'function') {\n        if (typeof this.requestManager.provider.request === 'function') {\n          // Listen to provider messages and data\n          this.requestManager.provider.on('message',\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n          function (message) {\n            return _this2.messageListener(message);\n          });\n        } else {\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n          providerAsWebProvider.on('data', function (data) {\n            return _this2.messageListener(data);\n          });\n        }\n      }\n    }\n  }, {\n    key: \"messageListener\",\n    value: function messageListener(data) {\n      var _a, _b, _c;\n      if (!data) {\n        throw new SubscriptionError('Should not call messageListener with no data. Type was');\n      }\n      var subscriptionId = ((_a = data.params) === null || _a === void 0 ? void 0 : _a.subscription) || ((_b = data.data) === null || _b === void 0 ? void 0 : _b.subscription) || ((_c = data.id) === null || _c === void 0 ? void 0 : _c.toString(16));\n      // Process if the received data is related to a subscription\n      if (subscriptionId) {\n        var sub = this._subscriptions.get(subscriptionId);\n        sub === null || sub === void 0 ? void 0 : sub.processSubscriptionData(data);\n      }\n    }\n    /**\n     * Will create a new subscription\n     *\n     * @param name - The subscription you want to subscribe to\n     * @param args - Optional additional parameters, depending on the subscription type\n     * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n     *\n     * Will subscribe to a specific topic (note: name)\n     * @returns The subscription object\n     */\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(name, args) {\n      var returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var Klass, subscription;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              Klass = this.registeredSubscriptions[name];\n              if (Klass) {\n                _context2.next = 3;\n                break;\n              }\n              throw new SubscriptionError('Invalid subscription type');\n            case 3:\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n              subscription = new Klass(args !== null && args !== void 0 ? args : undefined, {\n                subscriptionManager: this,\n                returnFormat: returnFormat\n              });\n              _context2.next = 6;\n              return this.addSubscription(subscription);\n            case 6:\n              return _context2.abrupt(\"return\", subscription);\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Will returns all subscriptions.\n     */\n  }, {\n    key: \"subscriptions\",\n    get: function get() {\n      return this._subscriptions;\n    }\n    /**\n     *\n     * Adds an instance of {@link Web3Subscription} and subscribes to it\n     *\n     * @param sub - A {@link Web3Subscription} object\n     */\n  }, {\n    key: \"addSubscription\",\n    value: function addSubscription(sub) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              if (this.requestManager.provider) {\n                _context3.next = 2;\n                break;\n              }\n              throw new ProviderError('Provider not available');\n            case 2:\n              if (this.supportsSubscriptions()) {\n                _context3.next = 4;\n                break;\n              }\n              throw new SubscriptionError('The current provider does not support subscriptions');\n            case 4:\n              if (!(sub.id && this._subscriptions.has(sub.id))) {\n                _context3.next = 6;\n                break;\n              }\n              throw new SubscriptionError(\"Subscription with id \\\"\".concat(sub.id, \"\\\" already exists\"));\n            case 6:\n              _context3.next = 8;\n              return sub.sendSubscriptionRequest();\n            case 8:\n              if (!isNullish(sub.id)) {\n                _context3.next = 10;\n                break;\n              }\n              throw new SubscriptionError('Subscription is not subscribed yet.');\n            case 10:\n              this._subscriptions.set(sub.id, sub);\n              return _context3.abrupt(\"return\", sub.id);\n            case 12:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Will clear a subscription\n     *\n     * @param id - The subscription of type {@link Web3Subscription}  to remove\n     */\n  }, {\n    key: \"removeSubscription\",\n    value: function removeSubscription(sub) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var id;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              id = sub.id;\n              if (!isNullish(id)) {\n                _context4.next = 3;\n                break;\n              }\n              throw new SubscriptionError('Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.');\n            case 3:\n              if (!(!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription)) {\n                _context4.next = 5;\n                break;\n              }\n              throw new SubscriptionError(\"Subscription with id \\\"\".concat(id.toString(), \"\\\" does not exists\"));\n            case 5:\n              _context4.next = 7;\n              return sub.sendUnsubscribeRequest();\n            case 7:\n              this._subscriptions.delete(id);\n              return _context4.abrupt(\"return\", id);\n            case 9:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Will unsubscribe all subscriptions that fulfill the condition\n     *\n     * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n     * @returns An array of all the un-subscribed subscriptions\n     */\n  }, {\n    key: \"unsubscribe\",\n    value: function unsubscribe(condition) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var result, _iterator, _step, _step$value, id, sub;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              result = [];\n              _iterator = _createForOfIteratorHelper(this.subscriptions.entries());\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  _step$value = _slicedToArray(_step.value, 2), id = _step$value[0], sub = _step$value[1];\n                  if (!condition || typeof condition === 'function' && condition({\n                    id: id,\n                    sub: sub\n                  })) {\n                    result.push(this.removeSubscription(sub));\n                  }\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              return _context5.abrupt(\"return\", Promise.all(result));\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Clears all subscriptions\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._subscriptions.clear();\n    }\n    /**\n     * Check whether the current provider supports subscriptions.\n     *\n     * @returns `true` or `false` depending on if the current provider supports subscriptions\n     */\n  }, {\n    key: \"supportsSubscriptions\",\n    value: function supportsSubscriptions() {\n      return isNullish(this.requestManager.provider) ? false : isSupportSubscriptions(this.requestManager.provider);\n    }\n  }]);\n  return Web3SubscriptionManager;\n}();","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ProviderError","SubscriptionError","isNullish","isSupportSubscriptions","Web3RequestManagerEvent","Web3SubscriptionManager","requestManager","registeredSubscriptions","_this","tolerateUnlinkedSubscription","arguments","length","undefined","_classCallCheck","_subscriptions","Map","on","BEFORE_PROVIDER_CHANGE","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","unsubscribe","stop","PROVIDER_CHANGED","clear","listenToProviderEvents","_createClass","key","value","_this2","providerAsWebProvider","provider","supportsSubscriptions","request","message","messageListener","data","subscriptionId","_a","params","subscription","_b","_c","id","toString","sub","get","processSubscriptionData","subscribe","name","args","returnFormat","Klass","_context2","subscriptionManager","addSubscription","abrupt","_callee2","_context3","has","concat","sendSubscriptionRequest","set","_callee3","removeSubscription","_context4","sendUnsubscribeRequest","delete","_callee4","condition","result","_iterator","_createForOfIteratorHelper","subscriptions","entries","s","_step","n","done","_step$value","_slicedToArray","push","err","e","f","_context5","Promise","all","_callee5"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-core\\src\\web3_subscription_manager.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tEIP1193Provider,\n\tJsonRpcNotification,\n\tJsonRpcSubscriptionResult,\n\tJsonRpcSubscriptionResultOld,\n\tLog,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n} from 'web3-types';\nimport { ProviderError, SubscriptionError } from 'web3-errors';\nimport { isNullish } from 'web3-utils';\nimport { isSupportSubscriptions } from './utils.js';\nimport { Web3RequestManager, Web3RequestManagerEvent } from './web3_request_manager.js';\n// eslint-disable-next-line import/no-cycle\nimport { Web3SubscriptionConstructor } from './web3_subscriptions.js';\n\ntype ShouldUnsubscribeCondition = ({\n\tid,\n\tsub,\n}: {\n\tid: string;\n\tsub: unknown;\n}) => boolean | undefined;\n\nexport class Web3SubscriptionManager<\n\tAPI extends Web3APISpec = Web3APISpec,\n\tRegisteredSubs extends { [key: string]: Web3SubscriptionConstructor<API> } = {\n\t\t[key: string]: Web3SubscriptionConstructor<API>;\n\t},\n> {\n\tprivate readonly _subscriptions: Map<\n\t\tstring,\n\t\tInstanceType<RegisteredSubs[keyof RegisteredSubs]>\n\t> = new Map();\n\n\t/**\n\t *\n\t * @param - requestManager\n\t * @param - registeredSubscriptions\n\t *\n\t * @example\n\t * ```ts\n\t * const requestManager = new Web3RequestManager(\"ws://localhost:8545\");\n\t * const subscriptionManager = new Web3SubscriptionManager(requestManager, {});\n\t * ```\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t);\n\t/**\n\t * @deprecated This constructor overloading should not be used\n\t */\n\tpublic constructor(\n\t\trequestManager: Web3RequestManager<API>,\n\t\tregisteredSubscriptions: RegisteredSubs,\n\t\ttolerateUnlinkedSubscription: boolean,\n\t);\n\tpublic constructor(\n\t\tpublic readonly requestManager: Web3RequestManager<API>,\n\t\tpublic readonly registeredSubscriptions: RegisteredSubs,\n\t\tprivate readonly tolerateUnlinkedSubscription: boolean = false,\n\t) {\n\t\tthis.requestManager.on(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, async () => {\n\t\t\tawait this.unsubscribe();\n\t\t});\n\n\t\tthis.requestManager.on(Web3RequestManagerEvent.PROVIDER_CHANGED, () => {\n\t\t\tthis.clear();\n\t\t\tthis.listenToProviderEvents();\n\t\t});\n\n\t\tthis.listenToProviderEvents();\n\t}\n\n\tprivate listenToProviderEvents() {\n\t\tconst providerAsWebProvider = this.requestManager.provider as Web3BaseProvider;\n\t\tif (\n\t\t\t!this.requestManager.provider ||\n\t\t\t(typeof providerAsWebProvider?.supportsSubscriptions === 'function' &&\n\t\t\t\t!providerAsWebProvider?.supportsSubscriptions())\n\t\t) {\n\t\t\treturn;\n\t\t}\n\n\t\tif (typeof (this.requestManager.provider as EIP1193Provider<API>).on === 'function') {\n\t\t\tif (\n\t\t\t\ttypeof (this.requestManager.provider as EIP1193Provider<API>).request === 'function'\n\t\t\t) {\n\t\t\t\t// Listen to provider messages and data\n\t\t\t\t(this.requestManager.provider as EIP1193Provider<API>).on(\n\t\t\t\t\t'message',\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\t\t(message: any) => this.messageListener(message),\n\t\t\t\t);\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-argument\n\t\t\t\tproviderAsWebProvider.on<Log>('data', (data: any) => this.messageListener(data));\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected messageListener(\n\t\tdata?:\n\t\t\t| JsonRpcSubscriptionResult\n\t\t\t| JsonRpcSubscriptionResultOld<Log>\n\t\t\t| JsonRpcNotification<Log>,\n\t) {\n\t\tif (!data) {\n\t\t\tthrow new SubscriptionError('Should not call messageListener with no data. Type was');\n\t\t}\n\t\tconst subscriptionId =\n\t\t\t(data as JsonRpcNotification).params?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResultOld).data?.subscription ||\n\t\t\t(data as JsonRpcSubscriptionResult).id?.toString(16);\n\n\t\t// Process if the received data is related to a subscription\n\t\tif (subscriptionId) {\n\t\t\tconst sub = this._subscriptions.get(subscriptionId);\n\t\t\tsub?.processSubscriptionData(data);\n\t\t}\n\t}\n\t/**\n\t * Will create a new subscription\n\t *\n\t * @param name - The subscription you want to subscribe to\n\t * @param args - Optional additional parameters, depending on the subscription type\n\t * @param returnFormat- ({@link DataFormat} defaults to {@link DEFAULT_RETURN_FORMAT}) - Specifies how the return data from the call should be formatted.\n\t *\n\t * Will subscribe to a specific topic (note: name)\n\t * @returns The subscription object\n\t */\n\tpublic async subscribe<T extends keyof RegisteredSubs>(\n\t\tname: T,\n\t\targs?: ConstructorParameters<RegisteredSubs[T]>[0],\n\t\treturnFormat: DataFormat = DEFAULT_RETURN_FORMAT,\n\t): Promise<InstanceType<RegisteredSubs[T]>> {\n\t\tconst Klass: RegisteredSubs[T] = this.registeredSubscriptions[name];\n\t\tif (!Klass) {\n\t\t\tthrow new SubscriptionError('Invalid subscription type');\n\t\t}\n\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\tconst subscription = new Klass(args ?? undefined, {\n\t\t\tsubscriptionManager: this as Web3SubscriptionManager<API, RegisteredSubs>,\n\t\t\treturnFormat,\n\t\t} as any) as InstanceType<RegisteredSubs[T]>;\n\n\t\tawait this.addSubscription(subscription);\n\n\t\treturn subscription;\n\t}\n\n\t/**\n\t * Will returns all subscriptions.\n\t */\n\tpublic get subscriptions() {\n\t\treturn this._subscriptions;\n\t}\n\n\t/**\n\t *\n\t * Adds an instance of {@link Web3Subscription} and subscribes to it\n\t *\n\t * @param sub - A {@link Web3Subscription} object\n\t */\n\tpublic async addSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tif (!this.requestManager.provider) {\n\t\t\tthrow new ProviderError('Provider not available');\n\t\t}\n\n\t\tif (!this.supportsSubscriptions()) {\n\t\t\tthrow new SubscriptionError('The current provider does not support subscriptions');\n\t\t}\n\n\t\tif (sub.id && this._subscriptions.has(sub.id)) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${sub.id}\" already exists`);\n\t\t}\n\n\t\tawait sub.sendSubscriptionRequest();\n\n\t\tif (isNullish(sub.id)) {\n\t\t\tthrow new SubscriptionError('Subscription is not subscribed yet.');\n\t\t}\n\n\t\tthis._subscriptions.set(sub.id, sub);\n\n\t\treturn sub.id;\n\t}\n\n\t/**\n\t * Will clear a subscription\n\t *\n\t * @param id - The subscription of type {@link Web3Subscription}  to remove\n\t */\n\tpublic async removeSubscription(sub: InstanceType<RegisteredSubs[keyof RegisteredSubs]>) {\n\t\tconst { id } = sub;\n\n\t\tif (isNullish(id)) {\n\t\t\tthrow new SubscriptionError(\n\t\t\t\t'Subscription is not subscribed yet. Or, had already been unsubscribed but not through the Subscription Manager.',\n\t\t\t);\n\t\t}\n\n\t\tif (!this._subscriptions.has(id) && !this.tolerateUnlinkedSubscription) {\n\t\t\tthrow new SubscriptionError(`Subscription with id \"${id.toString()}\" does not exists`);\n\t\t}\n\n\t\tawait sub.sendUnsubscribeRequest();\n\t\tthis._subscriptions.delete(id);\n\t\treturn id;\n\t}\n\t/**\n\t * Will unsubscribe all subscriptions that fulfill the condition\n\t *\n\t * @param condition - A function that access and `id` and a `subscription` and return `true` or `false`\n\t * @returns An array of all the un-subscribed subscriptions\n\t */\n\tpublic async unsubscribe(condition?: ShouldUnsubscribeCondition) {\n\t\tconst result = [];\n\t\tfor (const [id, sub] of this.subscriptions.entries()) {\n\t\t\tif (!condition || (typeof condition === 'function' && condition({ id, sub }))) {\n\t\t\t\tresult.push(this.removeSubscription(sub));\n\t\t\t}\n\t\t}\n\n\t\treturn Promise.all(result);\n\t}\n\n\t/**\n\t * Clears all subscriptions\n\t */\n\tpublic clear() {\n\t\tthis._subscriptions.clear();\n\t}\n\n\t/**\n\t * Check whether the current provider supports subscriptions.\n\t *\n\t * @returns `true` or `false` depending on if the current provider supports subscriptions\n\t */\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn isNullish(this.requestManager.provider)\n\t\t\t? false\n\t\t\t: isSupportSubscriptions(this.requestManager.provider);\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}