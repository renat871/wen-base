{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Contract } from 'web3-eth-contract';\nimport { ENSRegistryAbi } from './abi/ens/ENSRegistry.js';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { registryAddresses } from './config.js';\nimport { namehash } from './utils.js';\nexport var Registry = /*#__PURE__*/function () {\n  function Registry(context, customRegistryAddress) {\n    _classCallCheck(this, Registry);\n    this.contract = new Contract(ENSRegistryAbi, customRegistryAddress !== null && customRegistryAddress !== void 0 ? customRegistryAddress : registryAddresses.main, context);\n    this.context = context;\n  }\n  _createClass(Registry, [{\n    key: \"getOwner\",\n    value: function getOwner(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              result = this.contract.methods.owner(namehash(name)).call();\n              return _context.abrupt(\"return\", result);\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              throw new Error();\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this, [[0, 5]]);\n      }));\n    }\n  }, {\n    key: \"getTTL\",\n    value: function getTTL(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              return _context2.abrupt(\"return\", this.contract.methods.ttl(namehash(name)).call());\n            case 4:\n              _context2.prev = 4;\n              _context2.t0 = _context2[\"catch\"](0);\n              throw new Error();\n            case 7:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 4]]);\n      }));\n    }\n  }, {\n    key: \"recordExists\",\n    value: function recordExists(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var promise;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.prev = 0;\n              promise = this.contract.methods.recordExists(namehash(name)).call();\n              return _context3.abrupt(\"return\", promise);\n            case 5:\n              _context3.prev = 5;\n              _context3.t0 = _context3[\"catch\"](0);\n              throw new Error();\n            case 8:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[0, 5]]);\n      }));\n    }\n  }, {\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this = this;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.prev = 0;\n              return _context4.abrupt(\"return\", this.contract.methods.resolver(namehash(name)).call().then(function (address) {\n                // address type is unknown, not sure why\n                if (typeof address === 'string') {\n                  var contract = new Contract(PublicResolverAbi, address, _this.context);\n                  // TODO: set contract provider needs to be added when ens current provider\n                  return contract;\n                }\n                throw new Error();\n              }));\n            case 4:\n              _context4.prev = 4;\n              _context4.t0 = _context4[\"catch\"](0);\n              throw new Error();\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this, [[0, 4]]);\n      }));\n    }\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this.contract.events;\n    }\n  }]);\n  return Registry;\n}();","map":{"version":3,"names":["Contract","ENSRegistryAbi","PublicResolverAbi","registryAddresses","namehash","Registry","context","customRegistryAddress","_classCallCheck","contract","main","_createClass","key","value","getOwner","name","result","methods","owner","call","_context","abrupt","prev","t0","Error","stop","_callee","getTTL","ttl","_context2","_callee2","recordExists","promise","_context3","_callee3","getResolver","resolver","then","address","_this","_context4","_callee4","get","events"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-ens\\src\\registry.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3ContextObject } from 'web3-core';\nimport { Contract } from 'web3-eth-contract';\nimport { Address } from 'web3-types';\nimport { ENSRegistryAbi } from './abi/ens/ENSRegistry.js';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { registryAddresses } from './config.js';\nimport { namehash } from './utils.js';\n\nexport class Registry {\n\tprivate readonly contract: Contract<typeof ENSRegistryAbi>;\n\tprivate readonly context: Web3ContextObject;\n\n\tpublic constructor(context: Web3ContextObject, customRegistryAddress?: Address) {\n\t\tthis.contract = new Contract(\n\t\t\tENSRegistryAbi,\n\t\t\tcustomRegistryAddress ?? registryAddresses.main,\n\t\t\tcontext,\n\t\t);\n\n\t\tthis.context = context;\n\t}\n\n\tpublic async getOwner(name: string) {\n\t\ttry {\n\t\t\tconst result = this.contract.methods.owner(namehash(name)).call();\n\n\t\t\treturn result;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getTTL(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods.ttl(namehash(name)).call();\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async recordExists(name: string) {\n\t\ttry {\n\t\t\tconst promise = this.contract.methods.recordExists(namehash(name)).call();\n\n\t\t\treturn promise;\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic async getResolver(name: string) {\n\t\ttry {\n\t\t\treturn this.contract.methods\n\t\t\t\t.resolver(namehash(name))\n\t\t\t\t.call()\n\t\t\t\t.then(address => {\n\t\t\t\t\t// address type is unknown, not sure why\n\t\t\t\t\tif (typeof address === 'string') {\n\t\t\t\t\t\tconst contract = new Contract(PublicResolverAbi, address, this.context);\n\t\t\t\t\t\t// TODO: set contract provider needs to be added when ens current provider\n\t\t\t\t\t\treturn contract;\n\t\t\t\t\t}\n\t\t\t\t\tthrow new Error();\n\t\t\t\t});\n\t\t} catch (error) {\n\t\t\tthrow new Error(); // TODO: TransactionRevertInstructionError Needs to be added after web3-eth call method is implemented\n\t\t}\n\t}\n\n\tpublic get events() {\n\t\treturn this.contract.events;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}