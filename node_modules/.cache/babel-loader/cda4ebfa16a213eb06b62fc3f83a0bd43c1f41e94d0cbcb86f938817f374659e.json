{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ContractExecutionError, InvalidResponseError, ProviderError, ResponseError, rpcErrorsMap, RpcError } from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport { isNullish, isPromise, jsonRpc, isResponseRpcError } from 'web3-utils';\nimport { isEIP1193Provider, isLegacyRequestProvider, isLegacySendAsyncProvider, isLegacySendProvider, isWeb3Provider } from './utils.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\nexport var Web3RequestManagerEvent;\n(function (Web3RequestManagerEvent) {\n  Web3RequestManagerEvent[\"PROVIDER_CHANGED\"] = \"PROVIDER_CHANGED\";\n  Web3RequestManagerEvent[\"BEFORE_PROVIDER_CHANGE\"] = \"BEFORE_PROVIDER_CHANGE\";\n})(Web3RequestManagerEvent || (Web3RequestManagerEvent = {}));\nvar availableProviders = {\n  HttpProvider: HttpProvider,\n  WebsocketProvider: WSProvider\n};\nexport var Web3RequestManager = /*#__PURE__*/function (_Web3EventEmitter) {\n  _inherits(Web3RequestManager, _Web3EventEmitter);\n  var _super = _createSuper(Web3RequestManager);\n  function Web3RequestManager(provider, useRpcCallSpecification) {\n    var _this;\n    _classCallCheck(this, Web3RequestManager);\n    _this = _super.call(this);\n    if (!isNullish(provider)) {\n      _this.setProvider(provider);\n    }\n    _this.useRpcCallSpecification = useRpcCallSpecification;\n    return _this;\n  }\n  /**\n   * Will return all available providers\n   */\n  _createClass(Web3RequestManager, [{\n    key: \"provider\",\n    get:\n    /**\n     * Will return the current provider.\n     *\n     * @returns Returns the current provider\n     */\n    function get() {\n      return this._provider;\n    }\n    /**\n     * Will return all available providers\n     */\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"providers\",\n    get: function get() {\n      return availableProviders;\n    }\n    /**\n     * Use to set provider. Provider can be a provider instance or a string.\n     *\n     * @param provider - The provider to set\n     */\n  }, {\n    key: \"setProvider\",\n    value: function setProvider(provider) {\n      var newProvider;\n      // autodetect provider\n      if (provider && typeof provider === 'string' && this.providers) {\n        // HTTP\n        if (/^http(s)?:\\/\\//i.test(provider)) {\n          newProvider = new this.providers.HttpProvider(provider);\n          // WS\n        } else if (/^ws(s)?:\\/\\//i.test(provider)) {\n          newProvider = new this.providers.WebsocketProvider(provider);\n        } else {\n          throw new ProviderError(\"Can't autodetect provider for \\\"\".concat(provider, \"\\\"\"));\n        }\n      } else if (isNullish(provider)) {\n        // In case want to unset the provider\n        newProvider = undefined;\n      } else {\n        newProvider = provider;\n      }\n      this.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);\n      this._provider = newProvider;\n      this.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);\n      return true;\n    }\n    /**\n     *\n     * Will execute a request\n     *\n     * @param request - {@link Web3APIRequest} The request to send\n     *\n     * @returns The response of the request {@link ResponseType}. If there is error\n     * in the response, will throw an error\n     */\n  }, {\n    key: \"send\",\n    value: function send(request) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return this._sendRequest(request);\n            case 2:\n              response = _context.sent;\n              if (!jsonRpc.isResponseWithResult(response)) {\n                _context.next = 5;\n                break;\n              }\n              return _context.abrupt(\"return\", response.result);\n            case 5:\n              throw new ResponseError(response);\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Same as send, but, will execute a batch of requests\n     *\n     * @param request {@link JsonRpcBatchRequest} The batch request to send\n     */\n  }, {\n    key: \"sendBatch\",\n    value: function sendBatch(request) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var response;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return this._sendRequest(request);\n            case 2:\n              response = _context2.sent;\n              return _context2.abrupt(\"return\", response);\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n  }, {\n    key: \"_sendRequest\",\n    value: function _sendRequest(request) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        var _this2 = this;\n        var provider, payload, response;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              provider = this.provider;\n              if (!isNullish(provider)) {\n                _context3.next = 3;\n                break;\n              }\n              throw new ProviderError('Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.');\n            case 3:\n              payload = jsonRpc.isBatchRequest(request) ? jsonRpc.toBatchPayload(request) : jsonRpc.toPayload(request);\n              if (!isWeb3Provider(provider)) {\n                _context3.next = 15;\n                break;\n              }\n              _context3.prev = 5;\n              _context3.next = 8;\n              return provider.request(payload);\n            case 8:\n              response = _context3.sent;\n              _context3.next = 14;\n              break;\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](5);\n              // Check if the provider throw an error instead of reject with error\n              response = _context3.t0;\n            case 14:\n              return _context3.abrupt(\"return\", this._processJsonRpcResponse(payload, response, {\n                legacy: false,\n                error: false\n              }));\n            case 15:\n              if (!isEIP1193Provider(provider)) {\n                _context3.next = 17;\n                break;\n              }\n              return _context3.abrupt(\"return\", provider.request(payload).then(function (res) {\n                return _this2._processJsonRpcResponse(payload, res, {\n                  legacy: true,\n                  error: false\n                });\n              }).catch(function (error) {\n                return _this2._processJsonRpcResponse(payload, error, {\n                  legacy: true,\n                  error: true\n                });\n              }));\n            case 17:\n              if (!isLegacyRequestProvider(provider)) {\n                _context3.next = 19;\n                break;\n              }\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                var rejectWithError = function rejectWithError(err) {\n                  return reject(_this2._processJsonRpcResponse(payload, err, {\n                    legacy: true,\n                    error: true\n                  }));\n                };\n                var resolveWithResponse = function resolveWithResponse(response) {\n                  return resolve(_this2._processJsonRpcResponse(payload, response, {\n                    legacy: true,\n                    error: false\n                  }));\n                };\n                var result = provider.request(payload,\n                // a callback that is expected to be called after getting the response:\n                function (err, response) {\n                  if (err) {\n                    return rejectWithError(err);\n                  }\n                  return resolveWithResponse(response);\n                });\n                // Some providers, that follow a previous drafted version of EIP1193, has a `request` function\n                //\tthat is not defined as `async`, but it returns a promise.\n                // Such providers would not be picked with if(isEIP1193Provider(provider)) above\n                //\tbecause the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.\n                // Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19\n                // So check if the returned result is a Promise, and resolve with it accordingly.\n                // Note: in this case we expect the callback provided above to never be called.\n                if (isPromise(result)) {\n                  var responsePromise = result;\n                  responsePromise.then(resolveWithResponse).catch(rejectWithError);\n                }\n              }));\n            case 19:\n              if (!isLegacySendProvider(provider)) {\n                _context3.next = 21;\n                break;\n              }\n              return _context3.abrupt(\"return\", new Promise(function (resolve, reject) {\n                provider.send(payload, function (err, response) {\n                  if (err) {\n                    return reject(_this2._processJsonRpcResponse(payload, err, {\n                      legacy: true,\n                      error: true\n                    }));\n                  }\n                  if (isNullish(response)) {\n                    throw new ResponseError('', 'Got a \"nullish\" response from provider.');\n                  }\n                  return resolve(_this2._processJsonRpcResponse(payload, response, {\n                    legacy: true,\n                    error: false\n                  }));\n                });\n              }));\n            case 21:\n              if (!isLegacySendAsyncProvider(provider)) {\n                _context3.next = 23;\n                break;\n              }\n              return _context3.abrupt(\"return\", provider.sendAsync(payload).then(function (response) {\n                return _this2._processJsonRpcResponse(payload, response, {\n                  legacy: true,\n                  error: false\n                });\n              }).catch(function (error) {\n                return _this2._processJsonRpcResponse(payload, error, {\n                  legacy: true,\n                  error: true\n                });\n              }));\n            case 23:\n              throw new ProviderError('Provider does not have a request or send method to use.');\n            case 24:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this, [[5, 11]]);\n      }));\n    }\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"_processJsonRpcResponse\",\n    value: function _processJsonRpcResponse(payload, response, _ref) {\n      var legacy = _ref.legacy,\n        error = _ref.error;\n      if (isNullish(response)) {\n        return this._buildResponse(payload,\n        // Some providers uses \"null\" as valid empty response\n        // eslint-disable-next-line no-null/no-null\n        null, error);\n      }\n      // This is the majority of the cases so check these first\n      // A valid JSON-RPC response with error object\n      if (jsonRpc.isResponseWithError(response)) {\n        // check if its an rpc error\n        if (this.useRpcCallSpecification && isResponseRpcError(response)) {\n          var rpcErrorResponse = response;\n          // check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code\n          if (rpcErrorsMap.get(rpcErrorResponse.error.code)) {\n            // eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n            var Err = rpcErrorsMap.get(rpcErrorResponse.error.code).error;\n            throw new Err(rpcErrorResponse);\n          } else {\n            throw new RpcError(rpcErrorResponse);\n          }\n        } else if (!Web3RequestManager._isReverted(response)) {\n          throw new InvalidResponseError(response, payload);\n        }\n      }\n      // This is the majority of the cases so check these first\n      // A valid JSON-RPC response with result object\n      if (jsonRpc.isResponseWithResult(response)) {\n        return response;\n      }\n      if (response instanceof Error) {\n        Web3RequestManager._isReverted(response);\n        throw response;\n      }\n      if (!legacy && jsonRpc.isBatchRequest(payload) && jsonRpc.isBatchResponse(response)) {\n        return response;\n      }\n      if (legacy && !error && jsonRpc.isBatchRequest(payload)) {\n        return response;\n      }\n      if (legacy && error && jsonRpc.isBatchRequest(payload)) {\n        // In case of error batch response we don't want to throw Invalid response\n        throw response;\n      }\n      if (legacy && !jsonRpc.isResponseWithError(response) && !jsonRpc.isResponseWithResult(response)) {\n        return this._buildResponse(payload, response, error);\n      }\n      if (jsonRpc.isBatchRequest(payload) && !Array.isArray(response)) {\n        throw new ResponseError(response, 'Got normal response for a batch request.');\n      }\n      if (!jsonRpc.isBatchRequest(payload) && Array.isArray(response)) {\n        throw new ResponseError(response, 'Got batch response for a normal request.');\n      }\n      if ((jsonRpc.isResponseWithError(response) || jsonRpc.isResponseWithResult(response)) && !jsonRpc.isBatchRequest(payload)) {\n        if (response.id && payload.id !== response.id) {\n          throw new InvalidResponseError(response);\n        }\n      }\n      throw new ResponseError(response, 'Invalid response');\n    }\n  }, {\n    key: \"_buildResponse\",\n    value:\n    // Need to use same types as _processJsonRpcResponse so have to declare as instance method\n    // eslint-disable-next-line class-methods-use-this\n    function _buildResponse(payload, response, error) {\n      var res = {\n        jsonrpc: '2.0',\n        // eslint-disable-next-line no-nested-ternary\n        id: jsonRpc.isBatchRequest(payload) ? payload[0].id : 'id' in payload ? payload.id :\n        // Have to use the null here explicitly\n        // eslint-disable-next-line no-null/no-null\n        null\n      };\n      if (error) {\n        return Object.assign(Object.assign({}, res), {\n          error: response\n        });\n      }\n      return Object.assign(Object.assign({}, res), {\n        result: response\n      });\n    }\n  }], [{\n    key: \"providers\",\n    get: function get() {\n      return availableProviders;\n    }\n  }, {\n    key: \"_isReverted\",\n    value: function _isReverted(response) {\n      var error;\n      if (jsonRpc.isResponseWithError(response)) {\n        error = response.error;\n      } else if (response instanceof Error) {\n        error = response;\n      }\n      // This message means that there was an error while executing the code of the smart contract\n      // However, more processing will happen at a higher level to decode the error data,\n      //\taccording to the Error ABI, if it was available as of EIP-838.\n      if (error === null || error === void 0 ? void 0 : error.message.includes('revert')) throw new ContractExecutionError(error);\n      return false;\n    }\n  }]);\n  return Web3RequestManager;\n}(Web3EventEmitter);","map":{"version":3,"names":["ContractExecutionError","InvalidResponseError","ProviderError","ResponseError","rpcErrorsMap","RpcError","HttpProvider","WSProvider","isNullish","isPromise","jsonRpc","isResponseRpcError","isEIP1193Provider","isLegacyRequestProvider","isLegacySendAsyncProvider","isLegacySendProvider","isWeb3Provider","Web3EventEmitter","Web3RequestManagerEvent","availableProviders","WebsocketProvider","Web3RequestManager","_Web3EventEmitter","_inherits","_super","_createSuper","provider","useRpcCallSpecification","_this","_classCallCheck","call","setProvider","_createClass","key","get","_provider","value","newProvider","providers","test","concat","undefined","emit","BEFORE_PROVIDER_CHANGE","PROVIDER_CHANGED","send","request","_sendRequest","response","_context","sent","isResponseWithResult","next","abrupt","result","stop","_callee","sendBatch","_context2","_callee2","_context3","payload","isBatchRequest","toBatchPayload","toPayload","prev","t0","_processJsonRpcResponse","legacy","error","then","res","_this2","catch","Promise","resolve","reject","rejectWithError","err","resolveWithResponse","responsePromise","sendAsync","_callee3","_ref","_buildResponse","isResponseWithError","rpcErrorResponse","code","Err","_isReverted","Error","isBatchResponse","Array","isArray","id","jsonrpc","Object","assign","message","includes"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-core\\src\\web3_request_manager.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tContractExecutionError,\n\tInvalidResponseError,\n\tProviderError,\n\tResponseError,\n\trpcErrorsMap,\n\tRpcError,\n} from 'web3-errors';\nimport HttpProvider from 'web3-providers-http';\nimport WSProvider from 'web3-providers-ws';\nimport {\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcError,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tSupportedProviders,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIRequest,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3BaseProvider,\n\tWeb3BaseProviderConstructor,\n} from 'web3-types';\nimport { isNullish, isPromise, jsonRpc, isResponseRpcError } from 'web3-utils';\nimport {\n\tisEIP1193Provider,\n\tisLegacyRequestProvider,\n\tisLegacySendAsyncProvider,\n\tisLegacySendProvider,\n\tisWeb3Provider,\n} from './utils.js';\nimport { Web3EventEmitter } from './web3_event_emitter.js';\n\nexport enum Web3RequestManagerEvent {\n\tPROVIDER_CHANGED = 'PROVIDER_CHANGED',\n\tBEFORE_PROVIDER_CHANGE = 'BEFORE_PROVIDER_CHANGE',\n}\n\nconst availableProviders: {\n\tHttpProvider: Web3BaseProviderConstructor;\n\tWebsocketProvider: Web3BaseProviderConstructor;\n} = {\n\tHttpProvider: HttpProvider as Web3BaseProviderConstructor,\n\tWebsocketProvider: WSProvider as Web3BaseProviderConstructor,\n};\n\nexport class Web3RequestManager<\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Web3EventEmitter<{\n\t[key in Web3RequestManagerEvent]: SupportedProviders<API> | undefined;\n}> {\n\tprivate _provider?: SupportedProviders<API>;\n\tprivate readonly useRpcCallSpecification?: boolean;\n\tpublic constructor(\n\t\tprovider?: SupportedProviders<API> | string,\n\t\tuseRpcCallSpecification?: boolean,\n\t) {\n\t\tsuper();\n\n\t\tif (!isNullish(provider)) {\n\t\t\tthis.setProvider(provider);\n\t\t}\n\t\tthis.useRpcCallSpecification = useRpcCallSpecification;\n\t}\n\n\t/**\n\t * Will return all available providers\n\t */\n\tpublic static get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Will return the current provider.\n\t *\n\t * @returns Returns the current provider\n\t */\n\tpublic get provider() {\n\t\treturn this._provider;\n\t}\n\n\t/**\n\t * Will return all available providers\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic get providers() {\n\t\treturn availableProviders;\n\t}\n\n\t/**\n\t * Use to set provider. Provider can be a provider instance or a string.\n\t *\n\t * @param provider - The provider to set\n\t */\n\tpublic setProvider(provider?: SupportedProviders<API> | string): boolean {\n\t\tlet newProvider: SupportedProviders<API> | undefined;\n\n\t\t// autodetect provider\n\t\tif (provider && typeof provider === 'string' && this.providers) {\n\t\t\t// HTTP\n\t\t\tif (/^http(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.HttpProvider<API>(provider);\n\n\t\t\t\t// WS\n\t\t\t} else if (/^ws(s)?:\\/\\//i.test(provider)) {\n\t\t\t\tnewProvider = new this.providers.WebsocketProvider<API>(provider);\n\t\t\t} else {\n\t\t\t\tthrow new ProviderError(`Can't autodetect provider for \"${provider}\"`);\n\t\t\t}\n\t\t} else if (isNullish(provider)) {\n\t\t\t// In case want to unset the provider\n\t\t\tnewProvider = undefined;\n\t\t} else {\n\t\t\tnewProvider = provider as SupportedProviders<API>;\n\t\t}\n\n\t\tthis.emit(Web3RequestManagerEvent.BEFORE_PROVIDER_CHANGE, this._provider);\n\t\tthis._provider = newProvider;\n\t\tthis.emit(Web3RequestManagerEvent.PROVIDER_CHANGED, this._provider);\n\t\treturn true;\n\t}\n\n\t/**\n\t *\n\t * Will execute a request\n\t *\n\t * @param request - {@link Web3APIRequest} The request to send\n\t *\n\t * @returns The response of the request {@link ResponseType}. If there is error\n\t * in the response, will throw an error\n\t */\n\tpublic async send<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIRequest<API, Method>): Promise<ResponseType> {\n\t\tconst response = await this._sendRequest<Method, ResponseType>(request);\n\t\tif (jsonRpc.isResponseWithResult(response)) {\n\t\t\treturn response.result;\n\t\t}\n\n\t\tthrow new ResponseError(response);\n\t}\n\n\t/**\n\t * Same as send, but, will execute a batch of requests\n\t *\n\t * @param request {@link JsonRpcBatchRequest} The batch request to send\n\t */\n\tpublic async sendBatch(request: JsonRpcBatchRequest): Promise<JsonRpcBatchResponse<unknown>> {\n\t\tconst response = await this._sendRequest<never, never>(request);\n\n\t\treturn response as JsonRpcBatchResponse<unknown>;\n\t}\n\n\tprivate async _sendRequest<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResponseType = Web3APIReturnType<API, Method>,\n\t>(\n\t\trequest: Web3APIRequest<API, Method> | JsonRpcBatchRequest,\n\t): Promise<JsonRpcResponse<ResponseType>> {\n\t\tconst { provider } = this;\n\n\t\tif (isNullish(provider)) {\n\t\t\tthrow new ProviderError(\n\t\t\t\t'Provider not available. Use `.setProvider` or `.provider=` to initialize the provider.',\n\t\t\t);\n\t\t}\n\n\t\tconst payload = jsonRpc.isBatchRequest(request)\n\t\t\t? jsonRpc.toBatchPayload(request)\n\t\t\t: jsonRpc.toPayload(request);\n\n\t\tif (isWeb3Provider(provider)) {\n\t\t\tlet response;\n\n\t\t\ttry {\n\t\t\t\tresponse = await provider.request<Method, ResponseType>(\n\t\t\t\t\tpayload as Web3APIPayload<API, Method>,\n\t\t\t\t);\n\t\t\t} catch (error) {\n\t\t\t\t// Check if the provider throw an error instead of reject with error\n\t\t\t\tresponse = error as JsonRpcResponse<ResponseType>;\n\t\t\t}\n\t\t\treturn this._processJsonRpcResponse(payload, response, { legacy: false, error: false });\n\t\t}\n\n\t\tif (isEIP1193Provider(provider)) {\n\t\t\treturn (provider as Web3BaseProvider<API>)\n\t\t\t\t.request<Method, ResponseType>(payload as Web3APIPayload<API, Method>)\n\t\t\t\t.then(\n\t\t\t\t\tres =>\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, res, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}) as JsonRpcResponseWithResult<ResponseType>,\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\tpayload,\n\t\t\t\t\t\terror as JsonRpcResponse<ResponseType, unknown>,\n\t\t\t\t\t\t{ legacy: true, error: true },\n\t\t\t\t\t),\n\t\t\t\t);\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacyRequestProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject) => {\n\t\t\t\tconst rejectWithError = (err: unknown) =>\n\t\t\t\t\treject(\n\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\terr as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t),\n\t\t\t\t\t);\n\t\t\t\tconst resolveWithResponse = (response: JsonRpcResponse<ResponseType>) =>\n\t\t\t\t\tresolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\tconst result = provider.request<ResponseType>(\n\t\t\t\t\tpayload,\n\t\t\t\t\t// a callback that is expected to be called after getting the response:\n\t\t\t\t\t(err, response) => {\n\t\t\t\t\t\tif (err) {\n\t\t\t\t\t\t\treturn rejectWithError(err);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn resolveWithResponse(response);\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\t// Some providers, that follow a previous drafted version of EIP1193, has a `request` function\n\t\t\t\t//\tthat is not defined as `async`, but it returns a promise.\n\t\t\t\t// Such providers would not be picked with if(isEIP1193Provider(provider)) above\n\t\t\t\t//\tbecause the `request` function was not defined with `async` and so the function definition is not `AsyncFunction`.\n\t\t\t\t// Like this provider: https://github.dev/NomicFoundation/hardhat/blob/62bea2600785595ba36f2105564076cf5cdf0fd8/packages/hardhat-core/src/internal/core/providers/backwards-compatibility.ts#L19\n\t\t\t\t// So check if the returned result is a Promise, and resolve with it accordingly.\n\t\t\t\t// Note: in this case we expect the callback provided above to never be called.\n\t\t\t\tif (isPromise(result)) {\n\t\t\t\t\tconst responsePromise = result as unknown as Promise<\n\t\t\t\t\t\tJsonRpcResponse<ResponseType>\n\t\t\t\t\t>;\n\t\t\t\t\tresponsePromise.then(resolveWithResponse).catch(rejectWithError);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendProvider(provider)) {\n\t\t\treturn new Promise<JsonRpcResponse<ResponseType>>((resolve, reject): void => {\n\t\t\t\tprovider.send<ResponseType>(payload, (err, response) => {\n\t\t\t\t\tif (err) {\n\t\t\t\t\t\treturn reject(\n\t\t\t\t\t\t\tthis._processJsonRpcResponse(\n\t\t\t\t\t\t\t\tpayload,\n\t\t\t\t\t\t\t\terr as unknown as JsonRpcResponse<ResponseType>,\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\t\t\terror: true,\n\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t),\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tif (isNullish(response)) {\n\t\t\t\t\t\tthrow new ResponseError(\n\t\t\t\t\t\t\t'' as never,\n\t\t\t\t\t\t\t'Got a \"nullish\" response from provider.',\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\treturn resolve(\n\t\t\t\t\t\tthis._processJsonRpcResponse(payload, response, {\n\t\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\t\terror: false,\n\t\t\t\t\t\t}),\n\t\t\t\t\t);\n\t\t\t\t});\n\t\t\t});\n\t\t}\n\n\t\t// TODO: This could be deprecated and removed.\n\t\tif (isLegacySendAsyncProvider(provider)) {\n\t\t\treturn provider\n\t\t\t\t.sendAsync<ResponseType>(payload)\n\t\t\t\t.then(response =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, response, { legacy: true, error: false }),\n\t\t\t\t)\n\t\t\t\t.catch(error =>\n\t\t\t\t\tthis._processJsonRpcResponse(payload, error as JsonRpcResponse<ResponseType>, {\n\t\t\t\t\t\tlegacy: true,\n\t\t\t\t\t\terror: true,\n\t\t\t\t\t}),\n\t\t\t\t);\n\t\t}\n\n\t\tthrow new ProviderError('Provider does not have a request or send method to use.');\n\t}\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _processJsonRpcResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\t{ legacy, error }: { legacy: boolean; error: boolean },\n\t): JsonRpcResponse<ResultType> | never {\n\t\tif (isNullish(response)) {\n\t\t\treturn this._buildResponse(\n\t\t\t\tpayload,\n\t\t\t\t// Some providers uses \"null\" as valid empty response\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\tnull as unknown as JsonRpcResponse<ResultType, ErrorType>,\n\t\t\t\terror,\n\t\t\t);\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with error object\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\t// check if its an rpc error\n\t\t\tif (\n\t\t\t\tthis.useRpcCallSpecification &&\n\t\t\t\tisResponseRpcError(response as JsonRpcResponseWithError)\n\t\t\t) {\n\t\t\t\tconst rpcErrorResponse = response as JsonRpcResponseWithError;\n\t\t\t\t// check if rpc error flag is on and response error code match an EIP-1474 or a standard rpc error code\n\t\t\t\tif (rpcErrorsMap.get(rpcErrorResponse.error.code)) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-non-null-assertion\n\t\t\t\t\tconst Err = rpcErrorsMap.get(rpcErrorResponse.error.code)!.error;\n\t\t\t\t\tthrow new Err(rpcErrorResponse);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new RpcError(rpcErrorResponse);\n\t\t\t\t}\n\t\t\t} else if (!Web3RequestManager._isReverted(response)) {\n\t\t\t\tthrow new InvalidResponseError<ErrorType, RequestType>(response, payload);\n\t\t\t}\n\t\t}\n\n\t\t// This is the majority of the cases so check these first\n\t\t// A valid JSON-RPC response with result object\n\t\tif (jsonRpc.isResponseWithResult<ResultType>(response)) {\n\t\t\treturn response;\n\t\t}\n\n\t\tif ((response as unknown) instanceof Error) {\n\t\t\tWeb3RequestManager._isReverted(response);\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (!legacy && jsonRpc.isBatchRequest(payload) && jsonRpc.isBatchResponse(response)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && !error && jsonRpc.isBatchRequest(payload)) {\n\t\t\treturn response as JsonRpcBatchResponse<ResultType>;\n\t\t}\n\n\t\tif (legacy && error && jsonRpc.isBatchRequest(payload)) {\n\t\t\t// In case of error batch response we don't want to throw Invalid response\n\t\t\tthrow response;\n\t\t}\n\n\t\tif (\n\t\t\tlegacy &&\n\t\t\t!jsonRpc.isResponseWithError(response) &&\n\t\t\t!jsonRpc.isResponseWithResult(response)\n\t\t) {\n\t\t\treturn this._buildResponse(payload, response, error);\n\t\t}\n\n\t\tif (jsonRpc.isBatchRequest(payload) && !Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got normal response for a batch request.');\n\t\t}\n\n\t\tif (!jsonRpc.isBatchRequest(payload) && Array.isArray(response)) {\n\t\t\tthrow new ResponseError(response, 'Got batch response for a normal request.');\n\t\t}\n\n\t\tif (\n\t\t\t(jsonRpc.isResponseWithError(response) || jsonRpc.isResponseWithResult(response)) &&\n\t\t\t!jsonRpc.isBatchRequest(payload)\n\t\t) {\n\t\t\tif (response.id && payload.id !== response.id) {\n\t\t\t\tthrow new InvalidResponseError<ErrorType>(response);\n\t\t\t}\n\t\t}\n\n\t\tthrow new ResponseError(response, 'Invalid response');\n\t}\n\n\tprivate static _isReverted<ResultType, ErrorType>(\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t): boolean {\n\t\tlet error: JsonRpcError | undefined;\n\n\t\tif (jsonRpc.isResponseWithError<ErrorType>(response)) {\n\t\t\terror = (response as JsonRpcResponseWithError).error;\n\t\t} else if ((response as unknown) instanceof Error) {\n\t\t\terror = response as unknown as JsonRpcError;\n\t\t}\n\n\t\t// This message means that there was an error while executing the code of the smart contract\n\t\t// However, more processing will happen at a higher level to decode the error data,\n\t\t//\taccording to the Error ABI, if it was available as of EIP-838.\n\t\tif (error?.message.includes('revert')) throw new ContractExecutionError(error);\n\n\t\treturn false;\n\t}\n\t// Need to use same types as _processJsonRpcResponse so have to declare as instance method\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _buildResponse<ResultType, ErrorType, RequestType>(\n\t\tpayload: JsonRpcPayload<RequestType>,\n\t\tresponse: JsonRpcResponse<ResultType, ErrorType>,\n\t\terror: boolean,\n\t): JsonRpcResponse<ResultType> {\n\t\tconst res = {\n\t\t\tjsonrpc: '2.0',\n\t\t\t// eslint-disable-next-line no-nested-ternary\n\t\t\tid: jsonRpc.isBatchRequest(payload)\n\t\t\t\t? payload[0].id\n\t\t\t\t: 'id' in payload\n\t\t\t\t? payload.id\n\t\t\t\t: // Have to use the null here explicitly\n\t\t\t\t  // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null,\n\t\t};\n\n\t\tif (error) {\n\t\t\treturn {\n\t\t\t\t...res,\n\t\t\t\terror: response as unknown,\n\t\t\t} as JsonRpcResponse<ResultType>;\n\t\t}\n\n\t\treturn {\n\t\t\t...res,\n\t\t\tresult: response as unknown,\n\t\t} as JsonRpcResponse<ResultType>;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}