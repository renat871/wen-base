{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport function trySendTransaction(web3Context, sendTransactionFunc, transactionHash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _rejectIfTimeout, _rejectIfTimeout2, timeoutId, rejectOnTimeout, _yield$rejectIfBlockT, _yield$rejectIfBlockT2, rejectOnBlockTimeout, blockTimeoutResourceCleaner;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _rejectIfTimeout = rejectIfTimeout(web3Context.transactionSendTimeout, new TransactionSendTimeoutError({\n            numberOfSeconds: web3Context.transactionSendTimeout / 1000,\n            transactionHash: transactionHash\n          })), _rejectIfTimeout2 = _slicedToArray(_rejectIfTimeout, 2), timeoutId = _rejectIfTimeout2[0], rejectOnTimeout = _rejectIfTimeout2[1];\n          _context.next = 3;\n          return rejectIfBlockTimeout(web3Context, transactionHash);\n        case 3:\n          _yield$rejectIfBlockT = _context.sent;\n          _yield$rejectIfBlockT2 = _slicedToArray(_yield$rejectIfBlockT, 2);\n          rejectOnBlockTimeout = _yield$rejectIfBlockT2[0];\n          blockTimeoutResourceCleaner = _yield$rejectIfBlockT2[1];\n          _context.prev = 7;\n          _context.next = 10;\n          return Promise.race([sendTransactionFunc(), rejectOnTimeout, rejectOnBlockTimeout // this will throw an error on Transaction Block Timeout\n          ]);\n        case 10:\n          return _context.abrupt(\"return\", _context.sent);\n        case 11:\n          _context.prev = 11;\n          clearTimeout(timeoutId);\n          blockTimeoutResourceCleaner.clean();\n          return _context.finish(11);\n        case 15:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[7,, 11, 15]]);\n  }));\n}","map":{"version":3,"names":["rejectIfTimeout","TransactionSendTimeoutError","rejectIfBlockTimeout","trySendTransaction","web3Context","sendTransactionFunc","transactionHash","transactionSendTimeout","numberOfSeconds","_rejectIfTimeout2","_slicedToArray","_rejectIfTimeout","timeoutId","rejectOnTimeout","_context","next","_yield$rejectIfBlockT","sent","_yield$rejectIfBlockT2","rejectOnBlockTimeout","blockTimeoutResourceCleaner","prev","Promise","race","abrupt","clearTimeout","clean","finish","stop","_callee"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth\\src\\utils\\try_send_transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3Context } from 'web3-core';\nimport { EthExecutionAPI, Bytes } from 'web3-types';\nimport { AsyncFunction, rejectIfTimeout } from 'web3-utils';\nimport { TransactionSendTimeoutError } from 'web3-errors';\n\n// eslint-disable-next-line import/no-cycle\nimport { rejectIfBlockTimeout } from './reject_if_block_timeout.js';\n\n/**\n * An internal function to send a transaction or throws if sending did not finish during the timeout during the blocks-timeout.\n * @param web3Context - the context to read the configurations from\n * @param sendTransactionFunc - the function that will send the transaction (could be sendTransaction or sendRawTransaction)\n * @param transactionHash - to be used inside the exception message if there will be any exceptions.\n * @returns the Promise<string> returned by the `sendTransactionFunc`.\n */\nexport async function trySendTransaction(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\tsendTransactionFunc: AsyncFunction<string>,\n\ttransactionHash?: Bytes,\n): Promise<string> {\n\tconst [timeoutId, rejectOnTimeout] = rejectIfTimeout(\n\t\tweb3Context.transactionSendTimeout,\n\t\tnew TransactionSendTimeoutError({\n\t\t\tnumberOfSeconds: web3Context.transactionSendTimeout / 1000,\n\t\t\ttransactionHash,\n\t\t}),\n\t);\n\n\tconst [rejectOnBlockTimeout, blockTimeoutResourceCleaner] = await rejectIfBlockTimeout(\n\t\tweb3Context,\n\t\ttransactionHash,\n\t);\n\n\ttry {\n\t\t// If an error happened here, do not catch it, just clear the resources before raising it to the caller function.\n\t\treturn await Promise.race([\n\t\t\tsendTransactionFunc(), // this is the function that will send the transaction\n\t\t\trejectOnTimeout, // this will throw an error on Transaction Send Timeout\n\t\t\trejectOnBlockTimeout, // this will throw an error on Transaction Block Timeout\n\t\t]);\n\t} finally {\n\t\tclearTimeout(timeoutId);\n\t\tblockTimeoutResourceCleaner.clean();\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAAwBA,eAAe,QAAQ,YAAY;AAC3D,SAASC,2BAA2B,QAAQ,aAAa;AAEzD;AACA,SAASC,oBAAoB,QAAQ,8BAA8B;AAEnE;;;;;;;AAOA,OAAM,SAAgBC,kBAAkBA,CACvCC,WAAyC,EACzCC,mBAA0C,EAC1CC,eAAuB;;;;;;6BAEcN,eAAe,CACnDI,WAAW,CAACG,sBAAsB,EAClC,IAAIN,2BAA2B,CAAC;YAC/BO,eAAe,EAAEJ,WAAW,CAACG,sBAAsB,GAAG,IAAI;YAC1DD,eAAe,EAAfA;WACA,CAAC,CACF,EAAAG,iBAAA,GAAAC,cAAA,CAAAC,gBAAA,MANMC,SAAS,GAAAH,iBAAA,KAAEI,eAAe,GAAAJ,iBAAA;UAAAK,QAAA,CAAAC,IAAA;UAQ2B,OAAMb,oBAAoB,CACrFE,WAAW,EACXE,eAAe,CACf;QAAA;UAAAU,qBAAA,GAAAF,QAAA,CAAAG,IAAA;UAAAC,sBAAA,GAAAR,cAAA,CAAAM,qBAAA;UAHMG,oBAAoB,GAAAD,sBAAA;UAAEE,2BAA2B,GAAAF,sBAAA;UAAAJ,QAAA,CAAAO,IAAA;UAAAP,QAAA,CAAAC,IAAA;UAOhD,OAAMO,OAAO,CAACC,IAAI,CAAC,CACzBlB,mBAAmB,EAAE,EACrBQ,eAAe,EACfM,oBAAoB,CAAE;UAAA,CACtB,CAAC;QAAA;UAAA,OAAAL,QAAA,CAAAU,MAAA,WAAAV,QAAA,CAAAG,IAAA;QAAA;UAAAH,QAAA,CAAAO,IAAA;UAEFI,YAAY,CAACb,SAAS,CAAC;UACvBQ,2BAA2B,CAACM,KAAK,EAAE;UAAC,OAAAZ,QAAA,CAAAa,MAAA;QAAA;QAAA;UAAA,OAAAb,QAAA,CAAAc,IAAA;MAAA;IAAA,GAAAC,OAAA;EAAA,CAErC"},"metadata":{},"sourceType":"module","externalDependencies":[]}