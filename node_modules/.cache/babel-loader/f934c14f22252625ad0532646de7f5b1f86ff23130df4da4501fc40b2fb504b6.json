{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { DEFAULT_RETURN_FORMAT, ETH_DATA_FORMAT } from 'web3-types';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport { InvalidTransactionWithSender, InvalidTransactionWithReceiver, LocalWalletNotAvailableError, TransactionDataAndInputError, UnableToPopulateNonceError } from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\nexport var getTransactionFromOrToAttr = function getTransactionFromOrToAttr(attr, web3Context, transaction, privateKey) {\n  if (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n    if (typeof transaction[attr] === 'string' && isAddress(transaction[attr])) {\n      return transaction[attr];\n    }\n    if (!isHexStrict(transaction[attr]) && isNumber(transaction[attr])) {\n      if (web3Context.wallet) {\n        var account = web3Context.wallet.get(format({\n          format: 'uint'\n        }, transaction[attr], NUMBER_DATA_FORMAT));\n        if (!isNullish(account)) {\n          return account.address;\n        }\n        throw new LocalWalletNotAvailableError();\n      }\n      throw new LocalWalletNotAvailableError();\n    } else {\n      throw attr === 'from' ? new InvalidTransactionWithSender(transaction.from) :\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n      new InvalidTransactionWithReceiver(transaction.to);\n    }\n  }\n  if (attr === 'from') {\n    if (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n    if (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n  }\n  return undefined;\n};\nexport var getTransactionNonce = function getTransactionNonce(web3Context, address) {\n  var returnFormat = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : DEFAULT_RETURN_FORMAT;\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          if (!isNullish(address)) {\n            _context.next = 2;\n            break;\n          }\n          throw new UnableToPopulateNonceError();\n        case 2:\n          return _context.abrupt(\"return\", getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat));\n        case 3:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n};\nexport var getTransactionType = function getTransactionType(transaction, web3Context) {\n  var inferredType = detectTransactionType(transaction, web3Context);\n  if (!isNullish(inferredType)) return inferredType;\n  if (!isNullish(web3Context.defaultTransactionType)) return format({\n    format: 'uint'\n  }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n  return undefined;\n};\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport function defaultTransactionBuilder(options) {\n  var _a, _b;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var populatedTransaction, common, chainId, networkId, name, fillGasLimit;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          populatedTransaction = format(transactionSchema, options.transaction, DEFAULT_RETURN_FORMAT);\n          if (isNullish(populatedTransaction.from)) {\n            populatedTransaction.from = getTransactionFromOrToAttr('from', options.web3Context, undefined, options.privateKey);\n          }\n          // TODO: Debug why need to typecase getTransactionNonce\n          if (!isNullish(populatedTransaction.nonce)) {\n            _context2.next = 6;\n            break;\n          }\n          _context2.next = 5;\n          return getTransactionNonce(options.web3Context, populatedTransaction.from, ETH_DATA_FORMAT);\n        case 5:\n          populatedTransaction.nonce = _context2.sent;\n        case 6:\n          if (isNullish(populatedTransaction.value)) {\n            populatedTransaction.value = '0x';\n          }\n          if (isNullish(populatedTransaction.data)) {\n            _context2.next = 13;\n            break;\n          }\n          if (!(!isNullish(populatedTransaction.input) && populatedTransaction.data !== populatedTransaction.input)) {\n            _context2.next = 10;\n            break;\n          }\n          throw new TransactionDataAndInputError({\n            data: bytesToHex(populatedTransaction.data),\n            input: bytesToHex(populatedTransaction.input)\n          });\n        case 10:\n          if (!populatedTransaction.data.startsWith('0x')) populatedTransaction.data = \"0x\".concat(populatedTransaction.data);\n          _context2.next = 14;\n          break;\n        case 13:\n          if (!isNullish(populatedTransaction.input)) {\n            if (!populatedTransaction.input.startsWith('0x')) populatedTransaction.input = \"0x\".concat(populatedTransaction.input);\n          } else {\n            populatedTransaction.input = '0x';\n          }\n        case 14:\n          if (isNullish(populatedTransaction.common)) {\n            if (options.web3Context.defaultCommon) {\n              common = options.web3Context.defaultCommon;\n              chainId = common.customChain.chainId;\n              networkId = common.customChain.networkId;\n              name = common.customChain.name;\n              populatedTransaction.common = Object.assign(Object.assign({}, common), {\n                customChain: {\n                  chainId: chainId,\n                  networkId: networkId,\n                  name: name\n                }\n              });\n            }\n            if (isNullish(populatedTransaction.chain)) {\n              populatedTransaction.chain = options.web3Context.defaultChain;\n            }\n            if (isNullish(populatedTransaction.hardfork)) {\n              populatedTransaction.hardfork = options.web3Context.defaultHardfork;\n            }\n          }\n          if (!(isNullish(populatedTransaction.chainId) && isNullish((_a = populatedTransaction.common) === null || _a === void 0 ? void 0 : _a.customChain.chainId))) {\n            _context2.next = 19;\n            break;\n          }\n          _context2.next = 18;\n          return getChainId(options.web3Context, ETH_DATA_FORMAT);\n        case 18:\n          populatedTransaction.chainId = _context2.sent;\n        case 19:\n          if (!isNullish(populatedTransaction.networkId)) {\n            _context2.next = 28;\n            break;\n          }\n          if (!((_b = options.web3Context.defaultNetworkId) !== null && _b !== void 0)) {\n            _context2.next = 24;\n            break;\n          }\n          _context2.t0 = _b;\n          _context2.next = 27;\n          break;\n        case 24:\n          _context2.next = 26;\n          return getId(options.web3Context, ETH_DATA_FORMAT);\n        case 26:\n          _context2.t0 = _context2.sent;\n        case 27:\n          populatedTransaction.networkId = _context2.t0;\n        case 28:\n          if (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n            populatedTransaction.gasLimit = populatedTransaction.gas;\n          }\n          populatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n          if (isNullish(populatedTransaction.accessList) && (populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')) {\n            populatedTransaction.accessList = [];\n          }\n          if (!options.fillGasPrice) {\n            _context2.next = 38;\n            break;\n          }\n          _context2.t1 = Object;\n          _context2.t2 = Object.assign({}, populatedTransaction);\n          _context2.next = 36;\n          return getTransactionGasPricing(populatedTransaction, options.web3Context, ETH_DATA_FORMAT);\n        case 36:\n          _context2.t3 = _context2.sent;\n          populatedTransaction = _context2.t1.assign.call(_context2.t1, _context2.t2, _context2.t3);\n        case 38:\n          if (!(isNullish(populatedTransaction.gas) && isNullish(populatedTransaction.gasLimit) && options.fillGasLimit)) {\n            _context2.next = 43;\n            break;\n          }\n          _context2.next = 41;\n          return estimateGas(options.web3Context, populatedTransaction, 'latest', ETH_DATA_FORMAT);\n        case 41:\n          fillGasLimit = _context2.sent;\n          populatedTransaction = Object.assign(Object.assign({}, populatedTransaction), {\n            gas: format({\n              format: 'uint'\n            }, fillGasLimit, ETH_DATA_FORMAT)\n          });\n        case 43:\n          return _context2.abrupt(\"return\", populatedTransaction);\n        case 44:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n}\nexport var transactionBuilder = function transactionBuilder(options) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var _a;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", ((_a = options.web3Context.transactionBuilder) !== null && _a !== void 0 ? _a : defaultTransactionBuilder)(Object.assign(Object.assign({}, options), {\n            transaction: options.transaction\n          })));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n};","map":{"version":3,"names":["DEFAULT_RETURN_FORMAT","ETH_DATA_FORMAT","privateKeyToAddress","getId","isNullish","isNumber","isHexStrict","isAddress","InvalidTransactionWithSender","InvalidTransactionWithReceiver","LocalWalletNotAvailableError","TransactionDataAndInputError","UnableToPopulateNonceError","bytesToHex","format","NUMBER_DATA_FORMAT","getChainId","getTransactionCount","estimateGas","detectTransactionType","transactionSchema","getTransactionGasPricing","getTransactionFromOrToAttr","attr","web3Context","transaction","privateKey","undefined","wallet","account","get","address","from","to","defaultAccount","getTransactionNonce","returnFormat","arguments","length","__awaiter","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","defaultBlock","stop","getTransactionType","inferredType","defaultTransactionType","defaultTransactionBuilder","options","populatedTransaction","nonce","_context2","sent","value","data","input","startsWith","concat","common","defaultCommon","chainId","customChain","networkId","name","Object","assign","chain","defaultChain","hardfork","defaultHardfork","_a","_b","defaultNetworkId","t0","gasLimit","gas","type","accessList","fillGasPrice","t1","t2","t3","call","fillGasLimit","_callee2","transactionBuilder","_callee3","_callee3$","_context3"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth\\src\\utils\\transaction_builder.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport {\n\tEthExecutionAPI,\n\tAddress,\n\tHexString,\n\tValidChains,\n\tHardfork,\n\tTransaction,\n\tTransactionWithFromLocalWalletIndex,\n\tTransactionWithToLocalWalletIndex,\n\tTransactionWithFromAndToLocalWalletIndex,\n\tCommon,\n\tWeb3NetAPI,\n\tNumbers,\n\tDataFormat,\n\tDEFAULT_RETURN_FORMAT,\n\tFormatType,\n\tETH_DATA_FORMAT,\n} from 'web3-types';\nimport { Web3Context } from 'web3-core';\nimport { privateKeyToAddress } from 'web3-eth-accounts';\nimport { getId } from 'web3-net';\nimport { isNullish, isNumber, isHexStrict, isAddress } from 'web3-validator';\nimport {\n\tInvalidTransactionWithSender,\n\tInvalidTransactionWithReceiver,\n\tLocalWalletNotAvailableError,\n\tTransactionDataAndInputError,\n\tUnableToPopulateNonceError,\n} from 'web3-errors';\nimport { bytesToHex, format } from 'web3-utils';\nimport { NUMBER_DATA_FORMAT } from '../constants.js';\n// eslint-disable-next-line import/no-cycle\nimport { getChainId, getTransactionCount, estimateGas } from '../rpc_method_wrappers.js';\nimport { detectTransactionType } from './detect_transaction_type.js';\nimport { transactionSchema } from '../schemas.js';\nimport { InternalTransaction } from '../types.js';\n// eslint-disable-next-line import/no-cycle\nimport { getTransactionGasPricing } from './get_transaction_gas_pricing.js';\n\nexport const getTransactionFromOrToAttr = (\n\tattr: 'from' | 'to',\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\ttransaction?:\n\t\t| Transaction\n\t\t| TransactionWithFromLocalWalletIndex\n\t\t| TransactionWithToLocalWalletIndex\n\t\t| TransactionWithFromAndToLocalWalletIndex,\n\tprivateKey?: HexString | Uint8Array,\n): Address | undefined => {\n\tif (transaction !== undefined && attr in transaction && transaction[attr] !== undefined) {\n\t\tif (typeof transaction[attr] === 'string' && isAddress(transaction[attr] as string)) {\n\t\t\treturn transaction[attr] as Address;\n\t\t}\n\t\tif (!isHexStrict(transaction[attr] as string) && isNumber(transaction[attr] as Numbers)) {\n\t\t\tif (web3Context.wallet) {\n\t\t\t\tconst account = web3Context.wallet.get(\n\t\t\t\t\tformat({ format: 'uint' }, transaction[attr] as Numbers, NUMBER_DATA_FORMAT),\n\t\t\t\t);\n\n\t\t\t\tif (!isNullish(account)) {\n\t\t\t\t\treturn account.address;\n\t\t\t\t}\n\n\t\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t\t}\n\t\t\tthrow new LocalWalletNotAvailableError();\n\t\t} else {\n\t\t\tthrow attr === 'from'\n\t\t\t\t? new InvalidTransactionWithSender(transaction.from)\n\t\t\t\t: // eslint-disable-next-line @typescript-eslint/no-unsafe-call\n\t\t\t\t  new InvalidTransactionWithReceiver(transaction.to);\n\t\t}\n\t}\n\tif (attr === 'from') {\n\t\tif (!isNullish(privateKey)) return privateKeyToAddress(privateKey);\n\t\tif (!isNullish(web3Context.defaultAccount)) return web3Context.defaultAccount;\n\t}\n\n\treturn undefined;\n};\n\nexport const getTransactionNonce = async <ReturnFormat extends DataFormat>(\n\tweb3Context: Web3Context<EthExecutionAPI>,\n\taddress?: Address,\n\treturnFormat: ReturnFormat = DEFAULT_RETURN_FORMAT as ReturnFormat,\n) => {\n\tif (isNullish(address)) {\n\t\t// TODO if (web3.eth.accounts.wallet) use address from local wallet\n\t\tthrow new UnableToPopulateNonceError();\n\t}\n\n\treturn getTransactionCount(web3Context, address, web3Context.defaultBlock, returnFormat);\n};\n\nexport const getTransactionType = (\n\ttransaction: FormatType<Transaction, typeof ETH_DATA_FORMAT>,\n\tweb3Context: Web3Context<EthExecutionAPI>,\n) => {\n\tconst inferredType = detectTransactionType(transaction, web3Context);\n\n\tif (!isNullish(inferredType)) return inferredType;\n\tif (!isNullish(web3Context.defaultTransactionType))\n\t\treturn format({ format: 'uint' }, web3Context.defaultTransactionType, ETH_DATA_FORMAT);\n\n\treturn undefined;\n};\n\n// Keep in mind that the order the properties of populateTransaction get populated matters\n// as some of the properties are dependent on others\nexport async function defaultTransactionBuilder<ReturnType = Transaction>(options: {\n\ttransaction: Transaction;\n\tweb3Context: Web3Context<EthExecutionAPI & Web3NetAPI>;\n\tprivateKey?: HexString | Uint8Array;\n\tfillGasPrice?: boolean;\n\tfillGasLimit?: boolean;\n}): Promise<ReturnType> {\n\tlet populatedTransaction = format(\n\t\ttransactionSchema,\n\t\toptions.transaction,\n\t\tDEFAULT_RETURN_FORMAT,\n\t) as InternalTransaction;\n\n\tif (isNullish(populatedTransaction.from)) {\n\t\tpopulatedTransaction.from = getTransactionFromOrToAttr(\n\t\t\t'from',\n\t\t\toptions.web3Context,\n\t\t\tundefined,\n\t\t\toptions.privateKey,\n\t\t);\n\t}\n\n\t// TODO: Debug why need to typecase getTransactionNonce\n\tif (isNullish(populatedTransaction.nonce)) {\n\t\tpopulatedTransaction.nonce = await getTransactionNonce(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction.from,\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t}\n\n\tif (isNullish(populatedTransaction.value)) {\n\t\tpopulatedTransaction.value = '0x';\n\t}\n\n\tif (!isNullish(populatedTransaction.data)) {\n\t\tif (\n\t\t\t!isNullish(populatedTransaction.input) &&\n\t\t\tpopulatedTransaction.data !== populatedTransaction.input\n\t\t)\n\t\t\tthrow new TransactionDataAndInputError({\n\t\t\t\tdata: bytesToHex(populatedTransaction.data),\n\t\t\t\tinput: bytesToHex(populatedTransaction.input),\n\t\t\t});\n\n\t\tif (!populatedTransaction.data.startsWith('0x'))\n\t\t\tpopulatedTransaction.data = `0x${populatedTransaction.data}`;\n\t} else if (!isNullish(populatedTransaction.input)) {\n\t\tif (!populatedTransaction.input.startsWith('0x'))\n\t\t\tpopulatedTransaction.input = `0x${populatedTransaction.input}`;\n\t} else {\n\t\tpopulatedTransaction.input = '0x';\n\t}\n\n\tif (isNullish(populatedTransaction.common)) {\n\t\tif (options.web3Context.defaultCommon) {\n\t\t\tconst common = options.web3Context.defaultCommon as unknown as Common;\n\t\t\tconst chainId = common.customChain.chainId as string;\n\t\t\tconst networkId = common.customChain.networkId as string;\n\t\t\tconst name = common.customChain.name as string;\n\t\t\tpopulatedTransaction.common = {\n\t\t\t\t...common,\n\t\t\t\tcustomChain: { chainId, networkId, name },\n\t\t\t};\n\t\t}\n\n\t\tif (isNullish(populatedTransaction.chain)) {\n\t\t\tpopulatedTransaction.chain = options.web3Context.defaultChain as ValidChains;\n\t\t}\n\t\tif (isNullish(populatedTransaction.hardfork)) {\n\t\t\tpopulatedTransaction.hardfork = options.web3Context.defaultHardfork as Hardfork;\n\t\t}\n\t}\n\n\tif (\n\t\tisNullish(populatedTransaction.chainId) &&\n\t\tisNullish(populatedTransaction.common?.customChain.chainId)\n\t) {\n\t\tpopulatedTransaction.chainId = await getChainId(options.web3Context, ETH_DATA_FORMAT);\n\t}\n\n\tif (isNullish(populatedTransaction.networkId)) {\n\t\tpopulatedTransaction.networkId =\n\t\t\t(options.web3Context.defaultNetworkId as string) ??\n\t\t\t(await getId(options.web3Context, ETH_DATA_FORMAT));\n\t}\n\n\tif (isNullish(populatedTransaction.gasLimit) && !isNullish(populatedTransaction.gas)) {\n\t\tpopulatedTransaction.gasLimit = populatedTransaction.gas;\n\t}\n\n\tpopulatedTransaction.type = getTransactionType(populatedTransaction, options.web3Context);\n\tif (\n\t\tisNullish(populatedTransaction.accessList) &&\n\t\t(populatedTransaction.type === '0x1' || populatedTransaction.type === '0x2')\n\t) {\n\t\tpopulatedTransaction.accessList = [];\n\t}\n\tif (options.fillGasPrice)\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\t...(await getTransactionGasPricing(\n\t\t\t\tpopulatedTransaction,\n\t\t\t\toptions.web3Context,\n\t\t\t\tETH_DATA_FORMAT,\n\t\t\t)),\n\t\t};\n\tif (\n\t\tisNullish(populatedTransaction.gas) &&\n\t\tisNullish(populatedTransaction.gasLimit) &&\n\t\toptions.fillGasLimit\n\t) {\n\t\tconst fillGasLimit = await estimateGas(\n\t\t\toptions.web3Context,\n\t\t\tpopulatedTransaction,\n\t\t\t'latest',\n\t\t\tETH_DATA_FORMAT,\n\t\t);\n\t\tpopulatedTransaction = {\n\t\t\t...populatedTransaction,\n\t\t\tgas: format({ format: 'uint' }, fillGasLimit as Numbers, ETH_DATA_FORMAT),\n\t\t};\n\t}\n\treturn populatedTransaction as ReturnType;\n}\n\nexport const transactionBuilder = async <ReturnType = Transaction>(\n\toptions: {\n\t\ttransaction: Transaction;\n\t\tweb3Context: Web3Context<EthExecutionAPI>;\n\t\tprivateKey?: HexString | Uint8Array;\n\t\tfillGasPrice?: boolean;\n\t\tfillGasLimit?: boolean;\n\t},\n\t// eslint-disable-next-line @typescript-eslint/require-await\n) =>\n\t(options.web3Context.transactionBuilder ?? defaultTransactionBuilder)({\n\t\t...options,\n\t\ttransaction: options.transaction,\n\t}) as unknown as ReturnType;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}