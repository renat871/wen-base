{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { validator } from 'web3-validator';\nexport function getProtocolVersion(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          return _context.abrupt(\"return\", requestManager.send({\n            method: 'eth_protocolVersion',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n}\nexport function getSyncing(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          return _context2.abrupt(\"return\", requestManager.send({\n            method: 'eth_syncing',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n}\nexport function getCoinbase(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          return _context3.abrupt(\"return\", requestManager.send({\n            method: 'eth_coinbase',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n}\nexport function getMining(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          return _context4.abrupt(\"return\", requestManager.send({\n            method: 'eth_mining',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n}\nexport function getHashRate(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          return _context5.abrupt(\"return\", requestManager.send({\n            method: 'eth_hashrate',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n}\nexport function getGasPrice(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          return _context6.abrupt(\"return\", requestManager.send({\n            method: 'eth_gasPrice',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n}\nexport function getAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          return _context7.abrupt(\"return\", requestManager.send({\n            method: 'eth_accounts',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n}\nexport function getBlockNumber(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          return _context8.abrupt(\"return\", requestManager.send({\n            method: 'eth_blockNumber',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n}\nexport function getBalance(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n          return _context9.abrupt(\"return\", requestManager.send({\n            method: 'eth_getBalance',\n            params: [address, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n}\nexport function getStorageAt(requestManager, address, storageSlot, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n    return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n      while (1) switch (_context10.prev = _context10.next) {\n        case 0:\n          validator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n          return _context10.abrupt(\"return\", requestManager.send({\n            method: 'eth_getStorageAt',\n            params: [address, storageSlot, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context10.stop();\n      }\n    }, _callee10);\n  }));\n}\nexport function getTransactionCount(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee11() {\n    return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n      while (1) switch (_context11.prev = _context11.next) {\n        case 0:\n          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n          return _context11.abrupt(\"return\", requestManager.send({\n            method: 'eth_getTransactionCount',\n            params: [address, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }, _callee11);\n  }));\n}\nexport function getBlockTransactionCountByHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee12() {\n    return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n      while (1) switch (_context12.prev = _context12.next) {\n        case 0:\n          validator.validate(['bytes32'], [blockHash]);\n          return _context12.abrupt(\"return\", requestManager.send({\n            method: 'eth_getBlockTransactionCountByHash',\n            params: [blockHash]\n          }));\n        case 2:\n        case \"end\":\n          return _context12.stop();\n      }\n    }, _callee12);\n  }));\n}\nexport function getBlockTransactionCountByNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee13() {\n    return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n      while (1) switch (_context13.prev = _context13.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag'], [blockNumber]);\n          return _context13.abrupt(\"return\", requestManager.send({\n            method: 'eth_getBlockTransactionCountByNumber',\n            params: [blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context13.stop();\n      }\n    }, _callee13);\n  }));\n}\nexport function getUncleCountByBlockHash(requestManager, blockHash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n    return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n      while (1) switch (_context14.prev = _context14.next) {\n        case 0:\n          validator.validate(['bytes32'], [blockHash]);\n          return _context14.abrupt(\"return\", requestManager.send({\n            method: 'eth_getUncleCountByBlockHash',\n            params: [blockHash]\n          }));\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }, _callee14);\n  }));\n}\nexport function getUncleCountByBlockNumber(requestManager, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee15() {\n    return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n      while (1) switch (_context15.prev = _context15.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag'], [blockNumber]);\n          return _context15.abrupt(\"return\", requestManager.send({\n            method: 'eth_getUncleCountByBlockNumber',\n            params: [blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }, _callee15);\n  }));\n}\nexport function getCode(requestManager, address, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee16() {\n    return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n      while (1) switch (_context16.prev = _context16.next) {\n        case 0:\n          validator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n          return _context16.abrupt(\"return\", requestManager.send({\n            method: 'eth_getCode',\n            params: [address, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context16.stop();\n      }\n    }, _callee16);\n  }));\n}\nexport function sign(requestManager, address, message) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee17() {\n    return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n      while (1) switch (_context17.prev = _context17.next) {\n        case 0:\n          validator.validate(['address', 'hex'], [address, message]);\n          return _context17.abrupt(\"return\", requestManager.send({\n            method: 'eth_sign',\n            params: [address, message]\n          }));\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }, _callee17);\n  }));\n}\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport function signTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee18() {\n    return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n      while (1) switch (_context18.prev = _context18.next) {\n        case 0:\n          return _context18.abrupt(\"return\", requestManager.send({\n            method: 'eth_signTransaction',\n            params: [transaction]\n          }));\n        case 1:\n        case \"end\":\n          return _context18.stop();\n      }\n    }, _callee18);\n  }));\n}\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport function sendTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee19() {\n    return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n      while (1) switch (_context19.prev = _context19.next) {\n        case 0:\n          return _context19.abrupt(\"return\", requestManager.send({\n            method: 'eth_sendTransaction',\n            params: [transaction]\n          }));\n        case 1:\n        case \"end\":\n          return _context19.stop();\n      }\n    }, _callee19);\n  }));\n}\nexport function sendRawTransaction(requestManager, transaction) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n    return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n      while (1) switch (_context20.prev = _context20.next) {\n        case 0:\n          validator.validate(['hex'], [transaction]);\n          return _context20.abrupt(\"return\", requestManager.send({\n            method: 'eth_sendRawTransaction',\n            params: [transaction]\n          }));\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }, _callee20);\n  }));\n}\n// TODO - validate transaction\nexport function call(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n    return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n      while (1) switch (_context21.prev = _context21.next) {\n        case 0:\n          // validateTransactionCall(transaction);\n          validator.validate(['blockNumberOrTag'], [blockNumber]);\n          return _context21.abrupt(\"return\", requestManager.send({\n            method: 'eth_call',\n            params: [transaction, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context21.stop();\n      }\n    }, _callee21);\n  }));\n}\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nexport function estimateGas(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee22() {\n    return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n      while (1) switch (_context22.prev = _context22.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag'], [blockNumber]);\n          return _context22.abrupt(\"return\", requestManager.send({\n            method: 'eth_estimateGas',\n            params: [transaction, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context22.stop();\n      }\n    }, _callee22);\n  }));\n}\nexport function getBlockByHash(requestManager, blockHash, hydrated) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee23() {\n    return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n      while (1) switch (_context23.prev = _context23.next) {\n        case 0:\n          validator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n          return _context23.abrupt(\"return\", requestManager.send({\n            method: 'eth_getBlockByHash',\n            params: [blockHash, hydrated]\n          }));\n        case 2:\n        case \"end\":\n          return _context23.stop();\n      }\n    }, _callee23);\n  }));\n}\nexport function getBlockByNumber(requestManager, blockNumber, hydrated) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee24() {\n    return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n      while (1) switch (_context24.prev = _context24.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n          return _context24.abrupt(\"return\", requestManager.send({\n            method: 'eth_getBlockByNumber',\n            params: [blockNumber, hydrated]\n          }));\n        case 2:\n        case \"end\":\n          return _context24.stop();\n      }\n    }, _callee24);\n  }));\n}\nexport function getTransactionByHash(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee25() {\n    return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n      while (1) switch (_context25.prev = _context25.next) {\n        case 0:\n          validator.validate(['bytes32'], [transactionHash]);\n          return _context25.abrupt(\"return\", requestManager.send({\n            method: 'eth_getTransactionByHash',\n            params: [transactionHash]\n          }));\n        case 2:\n        case \"end\":\n          return _context25.stop();\n      }\n    }, _callee25);\n  }));\n}\nexport function getTransactionByBlockHashAndIndex(requestManager, blockHash, transactionIndex) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n    return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n      while (1) switch (_context26.prev = _context26.next) {\n        case 0:\n          validator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n          return _context26.abrupt(\"return\", requestManager.send({\n            method: 'eth_getTransactionByBlockHashAndIndex',\n            params: [blockHash, transactionIndex]\n          }));\n        case 2:\n        case \"end\":\n          return _context26.stop();\n      }\n    }, _callee26);\n  }));\n}\nexport function getTransactionByBlockNumberAndIndex(requestManager, blockNumber, transactionIndex) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee27() {\n    return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n      while (1) switch (_context27.prev = _context27.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n          return _context27.abrupt(\"return\", requestManager.send({\n            method: 'eth_getTransactionByBlockNumberAndIndex',\n            params: [blockNumber, transactionIndex]\n          }));\n        case 2:\n        case \"end\":\n          return _context27.stop();\n      }\n    }, _callee27);\n  }));\n}\nexport function getTransactionReceipt(requestManager, transactionHash) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n    return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n      while (1) switch (_context28.prev = _context28.next) {\n        case 0:\n          validator.validate(['bytes32'], [transactionHash]);\n          return _context28.abrupt(\"return\", requestManager.send({\n            method: 'eth_getTransactionReceipt',\n            params: [transactionHash]\n          }));\n        case 2:\n        case \"end\":\n          return _context28.stop();\n      }\n    }, _callee28);\n  }));\n}\nexport function getUncleByBlockHashAndIndex(requestManager, blockHash, uncleIndex) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee29() {\n    return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n      while (1) switch (_context29.prev = _context29.next) {\n        case 0:\n          validator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n          return _context29.abrupt(\"return\", requestManager.send({\n            method: 'eth_getUncleByBlockHashAndIndex',\n            params: [blockHash, uncleIndex]\n          }));\n        case 2:\n        case \"end\":\n          return _context29.stop();\n      }\n    }, _callee29);\n  }));\n}\nexport function getUncleByBlockNumberAndIndex(requestManager, blockNumber, uncleIndex) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n    return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n      while (1) switch (_context30.prev = _context30.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n          return _context30.abrupt(\"return\", requestManager.send({\n            method: 'eth_getUncleByBlockNumberAndIndex',\n            params: [blockNumber, uncleIndex]\n          }));\n        case 2:\n        case \"end\":\n          return _context30.stop();\n      }\n    }, _callee30);\n  }));\n}\nexport function getCompilers(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n    return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n      while (1) switch (_context31.prev = _context31.next) {\n        case 0:\n          return _context31.abrupt(\"return\", requestManager.send({\n            method: 'eth_getCompilers',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context31.stop();\n      }\n    }, _callee31);\n  }));\n}\nexport function compileSolidity(requestManager, code) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee32() {\n    return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n      while (1) switch (_context32.prev = _context32.next) {\n        case 0:\n          validator.validate(['string'], [code]);\n          return _context32.abrupt(\"return\", requestManager.send({\n            method: 'eth_compileSolidity',\n            params: [code]\n          }));\n        case 2:\n        case \"end\":\n          return _context32.stop();\n      }\n    }, _callee32);\n  }));\n}\nexport function compileLLL(requestManager, code) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n    return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n      while (1) switch (_context33.prev = _context33.next) {\n        case 0:\n          validator.validate(['string'], [code]);\n          return _context33.abrupt(\"return\", requestManager.send({\n            method: 'eth_compileLLL',\n            params: [code]\n          }));\n        case 2:\n        case \"end\":\n          return _context33.stop();\n      }\n    }, _callee33);\n  }));\n}\nexport function compileSerpent(requestManager, code) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee34() {\n    return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n      while (1) switch (_context34.prev = _context34.next) {\n        case 0:\n          validator.validate(['string'], [code]);\n          return _context34.abrupt(\"return\", requestManager.send({\n            method: 'eth_compileSerpent',\n            params: [code]\n          }));\n        case 2:\n        case \"end\":\n          return _context34.stop();\n      }\n    }, _callee34);\n  }));\n}\nexport function newFilter(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee35() {\n    return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n      while (1) switch (_context35.prev = _context35.next) {\n        case 0:\n          validator.validate(['filter'], [filter]);\n          return _context35.abrupt(\"return\", requestManager.send({\n            method: 'eth_newFilter',\n            params: [filter]\n          }));\n        case 2:\n        case \"end\":\n          return _context35.stop();\n      }\n    }, _callee35);\n  }));\n}\nexport function newBlockFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee36() {\n    return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n      while (1) switch (_context36.prev = _context36.next) {\n        case 0:\n          return _context36.abrupt(\"return\", requestManager.send({\n            method: 'eth_newBlockFilter',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context36.stop();\n      }\n    }, _callee36);\n  }));\n}\nexport function newPendingTransactionFilter(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n    return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n      while (1) switch (_context37.prev = _context37.next) {\n        case 0:\n          return _context37.abrupt(\"return\", requestManager.send({\n            method: 'eth_newPendingTransactionFilter',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context37.stop();\n      }\n    }, _callee37);\n  }));\n}\nexport function uninstallFilter(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee38() {\n    return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n      while (1) switch (_context38.prev = _context38.next) {\n        case 0:\n          validator.validate(['hex'], [filterIdentifier]);\n          return _context38.abrupt(\"return\", requestManager.send({\n            method: 'eth_uninstallFilter',\n            params: [filterIdentifier]\n          }));\n        case 2:\n        case \"end\":\n          return _context38.stop();\n      }\n    }, _callee38);\n  }));\n}\nexport function getFilterChanges(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n    return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n      while (1) switch (_context39.prev = _context39.next) {\n        case 0:\n          validator.validate(['hex'], [filterIdentifier]);\n          return _context39.abrupt(\"return\", requestManager.send({\n            method: 'eth_getFilterChanges',\n            params: [filterIdentifier]\n          }));\n        case 2:\n        case \"end\":\n          return _context39.stop();\n      }\n    }, _callee39);\n  }));\n}\nexport function getFilterLogs(requestManager, filterIdentifier) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee40() {\n    return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n      while (1) switch (_context40.prev = _context40.next) {\n        case 0:\n          validator.validate(['hex'], [filterIdentifier]);\n          return _context40.abrupt(\"return\", requestManager.send({\n            method: 'eth_getFilterLogs',\n            params: [filterIdentifier]\n          }));\n        case 2:\n        case \"end\":\n          return _context40.stop();\n      }\n    }, _callee40);\n  }));\n}\nexport function getLogs(requestManager, filter) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee41() {\n    return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n      while (1) switch (_context41.prev = _context41.next) {\n        case 0:\n          validator.validate(['filter'], [filter]);\n          return _context41.abrupt(\"return\", requestManager.send({\n            method: 'eth_getLogs',\n            params: [filter]\n          }));\n        case 2:\n        case \"end\":\n          return _context41.stop();\n      }\n    }, _callee41);\n  }));\n}\nexport function getWork(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n    return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n      while (1) switch (_context42.prev = _context42.next) {\n        case 0:\n          return _context42.abrupt(\"return\", requestManager.send({\n            method: 'eth_getWork',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context42.stop();\n      }\n    }, _callee42);\n  }));\n}\nexport function submitWork(requestManager, nonce, hash, digest) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n    return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n      while (1) switch (_context43.prev = _context43.next) {\n        case 0:\n          validator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n          return _context43.abrupt(\"return\", requestManager.send({\n            method: 'eth_submitWork',\n            params: [nonce, hash, digest]\n          }));\n        case 2:\n        case \"end\":\n          return _context43.stop();\n      }\n    }, _callee43);\n  }));\n}\nexport function submitHashrate(requestManager, hashRate, id) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n    return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n      while (1) switch (_context44.prev = _context44.next) {\n        case 0:\n          validator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n          return _context44.abrupt(\"return\", requestManager.send({\n            method: 'eth_submitHashrate',\n            params: [hashRate, id]\n          }));\n        case 2:\n        case \"end\":\n          return _context44.stop();\n      }\n    }, _callee44);\n  }));\n}\nexport function getFeeHistory(requestManager, blockCount, newestBlock, rewardPercentiles) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee45() {\n    var _iterator, _step, rewardPercentile;\n    return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n      while (1) switch (_context45.prev = _context45.next) {\n        case 0:\n          validator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n          _iterator = _createForOfIteratorHelper(rewardPercentiles);\n          try {\n            for (_iterator.s(); !(_step = _iterator.n()).done;) {\n              rewardPercentile = _step.value;\n              validator.validate(['number'], [rewardPercentile]);\n            }\n          } catch (err) {\n            _iterator.e(err);\n          } finally {\n            _iterator.f();\n          }\n          return _context45.abrupt(\"return\", requestManager.send({\n            method: 'eth_feeHistory',\n            params: [blockCount, newestBlock, rewardPercentiles]\n          }));\n        case 4:\n        case \"end\":\n          return _context45.stop();\n      }\n    }, _callee45);\n  }));\n}\nexport function getPendingTransactions(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee46() {\n    return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n      while (1) switch (_context46.prev = _context46.next) {\n        case 0:\n          return _context46.abrupt(\"return\", requestManager.send({\n            method: 'eth_pendingTransactions',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context46.stop();\n      }\n    }, _callee46);\n  }));\n}\nexport function requestAccounts(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {\n    return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n      while (1) switch (_context47.prev = _context47.next) {\n        case 0:\n          return _context47.abrupt(\"return\", requestManager.send({\n            method: 'eth_requestAccounts',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context47.stop();\n      }\n    }, _callee47);\n  }));\n}\nexport function getChainId(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee48() {\n    return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n      while (1) switch (_context48.prev = _context48.next) {\n        case 0:\n          return _context48.abrupt(\"return\", requestManager.send({\n            method: 'eth_chainId',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context48.stop();\n      }\n    }, _callee48);\n  }));\n}\nexport function getProof(requestManager, address, storageKeys, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee49() {\n    return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n      while (1) switch (_context49.prev = _context49.next) {\n        case 0:\n          validator.validate(['address', 'bytes32[]', 'blockNumberOrTag'], [address, storageKeys, blockNumber]);\n          return _context49.abrupt(\"return\", requestManager.send({\n            method: 'eth_getProof',\n            params: [address, storageKeys, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context49.stop();\n      }\n    }, _callee49);\n  }));\n}\nexport function getNodeInfo(requestManager) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee50() {\n    return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n      while (1) switch (_context50.prev = _context50.next) {\n        case 0:\n          return _context50.abrupt(\"return\", requestManager.send({\n            method: 'web3_clientVersion',\n            params: []\n          }));\n        case 1:\n        case \"end\":\n          return _context50.stop();\n      }\n    }, _callee50);\n  }));\n}\nexport function createAccessList(requestManager, transaction, blockNumber) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee51() {\n    return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n      while (1) switch (_context51.prev = _context51.next) {\n        case 0:\n          validator.validate(['blockNumberOrTag'], [blockNumber]);\n          return _context51.abrupt(\"return\", requestManager.send({\n            method: 'eth_createAccessList',\n            params: [transaction, blockNumber]\n          }));\n        case 2:\n        case \"end\":\n          return _context51.stop();\n      }\n    }, _callee51);\n  }));\n}\nexport function signTypedData(requestManager, address, typedData) {\n  var useLegacy = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee52() {\n    return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n      while (1) switch (_context52.prev = _context52.next) {\n        case 0:\n          // TODO Add validation for typedData\n          validator.validate(['address'], [address]);\n          return _context52.abrupt(\"return\", requestManager.send({\n            method: \"eth_signTypedData\".concat(useLegacy ? '' : '_v4'),\n            params: [address, typedData]\n          }));\n        case 2:\n        case \"end\":\n          return _context52.stop();\n      }\n    }, _callee52);\n  }));\n}","map":{"version":3,"names":["validator","getProtocolVersion","requestManager","send","method","params","_context","stop","_callee","getSyncing","_context2","_callee2","getCoinbase","_context3","_callee3","getMining","_context4","_callee4","getHashRate","_context5","_callee5","getGasPrice","_context6","_callee6","getAccounts","_context7","_callee7","getBlockNumber","_context8","_callee8","getBalance","address","blockNumber","validate","_context9","abrupt","_callee9","getStorageAt","storageSlot","_context10","_callee10","getTransactionCount","_context11","_callee11","getBlockTransactionCountByHash","blockHash","_context12","_callee12","getBlockTransactionCountByNumber","_context13","_callee13","getUncleCountByBlockHash","_context14","_callee14","getUncleCountByBlockNumber","_context15","_callee15","getCode","_context16","_callee16","sign","message","_context17","_callee17","signTransaction","transaction","_context18","_callee18","sendTransaction","_context19","_callee19","sendRawTransaction","_context20","_callee20","call","_context21","_callee21","estimateGas","_context22","_callee22","getBlockByHash","hydrated","_context23","_callee23","getBlockByNumber","_context24","_callee24","getTransactionByHash","transactionHash","_context25","_callee25","getTransactionByBlockHashAndIndex","transactionIndex","_context26","_callee26","getTransactionByBlockNumberAndIndex","_context27","_callee27","getTransactionReceipt","_context28","_callee28","getUncleByBlockHashAndIndex","uncleIndex","_context29","_callee29","getUncleByBlockNumberAndIndex","_context30","_callee30","getCompilers","_context31","_callee31","compileSolidity","code","_context32","_callee32","compileLLL","_context33","_callee33","compileSerpent","_context34","_callee34","newFilter","filter","_context35","_callee35","newBlockFilter","_context36","_callee36","newPendingTransactionFilter","_context37","_callee37","uninstallFilter","filterIdentifier","_context38","_callee38","getFilterChanges","_context39","_callee39","getFilterLogs","_context40","_callee40","getLogs","_context41","_callee41","getWork","_context42","_callee42","submitWork","nonce","hash","digest","_context43","_callee43","submitHashrate","hashRate","id","_context44","_callee44","getFeeHistory","blockCount","newestBlock","rewardPercentiles","_iterator","_createForOfIteratorHelper","s","_step","n","done","rewardPercentile","value","err","e","f","_context45","_callee45","getPendingTransactions","_context46","_callee46","requestAccounts","_context47","_callee47","getChainId","_context48","_callee48","getProof","storageKeys","_context49","_callee49","getNodeInfo","_context50","_callee50","createAccessList","_context51","_callee51","signTypedData","typedData","useLegacy","arguments","length","undefined","_context52","concat","_callee52"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-rpc-methods\\src\\eth_rpc_methods.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport {\n\tAddress,\n\tBlockNumberOrTag,\n\tFilter,\n\tHexString32Bytes,\n\tHexString8Bytes,\n\tHexStringBytes,\n\tTransactionCallAPI,\n\tTransactionWithSenderAPI,\n\tUint,\n\tUint256,\n\tWeb3EthExecutionAPI,\n} from 'web3-types';\nimport { Eip712TypedData } from 'web3-types/src/eth_types';\nimport { validator } from 'web3-validator';\n\nexport async function getProtocolVersion(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_protocolVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function getSyncing(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_syncing',\n\t\tparams: [],\n\t});\n}\n\nexport async function getCoinbase(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_coinbase',\n\t\tparams: [],\n\t});\n}\n\nexport async function getMining(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_mining',\n\t\tparams: [],\n\t});\n}\n\nexport async function getHashRate(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_hashrate',\n\t\tparams: [],\n\t});\n}\n\nexport async function getGasPrice(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_gasPrice',\n\t\tparams: [],\n\t});\n}\n\nexport async function getAccounts(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_accounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBlockNumber(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_blockNumber',\n\t\tparams: [],\n\t});\n}\n\nexport async function getBalance(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBalance',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getStorageAt(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tstorageSlot: Uint256,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'hex', 'blockNumberOrTag'], [address, storageSlot, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getStorageAt',\n\t\tparams: [address, storageSlot, blockNumber],\n\t});\n}\n\nexport async function getTransactionCount(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionCount',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function getBlockTransactionCountByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getBlockTransactionCountByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockTransactionCountByNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getUncleCountByBlockHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [blockHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockHash',\n\t\tparams: [blockHash],\n\t});\n}\n\nexport async function getUncleCountByBlockNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleCountByBlockNumber',\n\t\tparams: [blockNumber],\n\t});\n}\n\nexport async function getCode(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['address', 'blockNumberOrTag'], [address, blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCode',\n\t\tparams: [address, blockNumber],\n\t});\n}\n\nexport async function sign(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\tmessage: HexStringBytes,\n) {\n\tvalidator.validate(['address', 'hex'], [address, message]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sign',\n\t\tparams: [address, message],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function signTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_signTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - Validation should be:\n// isTransactionWithSender(transaction)\n// ? validateTransactionWithSender(transaction)\n// : validateTransactionWithSender(transaction, true) with true being a isPartial flag\nexport async function sendTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\nexport async function sendRawTransaction(\n\trequestManager: Web3RequestManager,\n\ttransaction: HexStringBytes,\n) {\n\tvalidator.validate(['hex'], [transaction]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_sendRawTransaction',\n\t\tparams: [transaction],\n\t});\n}\n\n// TODO - validate transaction\nexport async function call(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionCallAPI,\n\tblockNumber: BlockNumberOrTag,\n) {\n\t// validateTransactionCall(transaction);\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_call',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\n// TODO Not sure how to best validate Partial<TransactionWithSender>\nexport async function estimateGas(\n\trequestManager: Web3RequestManager,\n\ttransaction: Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_estimateGas',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function getBlockByHash(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['bytes32', 'bool'], [blockHash, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByHash',\n\t\tparams: [blockHash, hydrated],\n\t});\n}\n\nexport async function getBlockByNumber(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\thydrated: boolean,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'bool'], [blockNumber, hydrated]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getBlockByNumber',\n\t\tparams: [blockNumber, hydrated],\n\t});\n}\n\nexport async function getTransactionByHash(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByHash',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getTransactionByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockHashAndIndex',\n\t\tparams: [blockHash, transactionIndex],\n\t});\n}\n\nexport async function getTransactionByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\ttransactionIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, transactionIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionByBlockNumberAndIndex',\n\t\tparams: [blockNumber, transactionIndex],\n\t});\n}\n\nexport async function getTransactionReceipt(\n\trequestManager: Web3RequestManager,\n\ttransactionHash: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32'], [transactionHash]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getTransactionReceipt',\n\t\tparams: [transactionHash],\n\t});\n}\n\nexport async function getUncleByBlockHashAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockHash: HexString32Bytes,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['bytes32', 'hex'], [blockHash, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockHashAndIndex',\n\t\tparams: [blockHash, uncleIndex],\n\t});\n}\n\nexport async function getUncleByBlockNumberAndIndex(\n\trequestManager: Web3RequestManager,\n\tblockNumber: BlockNumberOrTag,\n\tuncleIndex: Uint,\n) {\n\tvalidator.validate(['blockNumberOrTag', 'hex'], [blockNumber, uncleIndex]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getUncleByBlockNumberAndIndex',\n\t\tparams: [blockNumber, uncleIndex],\n\t});\n}\n\nexport async function getCompilers(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getCompilers',\n\t\tparams: [],\n\t});\n}\n\nexport async function compileSolidity(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSolidity',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileLLL(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileLLL',\n\t\tparams: [code],\n\t});\n}\n\nexport async function compileSerpent(requestManager: Web3RequestManager, code: string) {\n\tvalidator.validate(['string'], [code]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_compileSerpent',\n\t\tparams: [code],\n\t});\n}\n\nexport async function newFilter(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_newFilter',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function newBlockFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newBlockFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function newPendingTransactionFilter(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_newPendingTransactionFilter',\n\t\tparams: [],\n\t});\n}\n\nexport async function uninstallFilter(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_uninstallFilter',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterChanges(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterChanges',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getFilterLogs(requestManager: Web3RequestManager, filterIdentifier: Uint) {\n\tvalidator.validate(['hex'], [filterIdentifier]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getFilterLogs',\n\t\tparams: [filterIdentifier],\n\t});\n}\n\nexport async function getLogs(requestManager: Web3RequestManager, filter: Filter) {\n\tvalidator.validate(['filter'], [filter]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getLogs',\n\t\tparams: [filter],\n\t});\n}\n\nexport async function getWork(requestManager: Web3RequestManager) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_getWork',\n\t\tparams: [],\n\t});\n}\n\nexport async function submitWork(\n\trequestManager: Web3RequestManager,\n\tnonce: HexString8Bytes,\n\thash: HexString32Bytes,\n\tdigest: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes8', 'bytes32', 'bytes32'], [nonce, hash, digest]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitWork',\n\t\tparams: [nonce, hash, digest],\n\t});\n}\n\nexport async function submitHashrate(\n\trequestManager: Web3RequestManager,\n\thashRate: HexString32Bytes,\n\tid: HexString32Bytes,\n) {\n\tvalidator.validate(['bytes32', 'bytes32'], [hashRate, id]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_submitHashrate',\n\t\tparams: [hashRate, id],\n\t});\n}\n\nexport async function getFeeHistory(\n\trequestManager: Web3RequestManager,\n\tblockCount: Uint,\n\tnewestBlock: BlockNumberOrTag,\n\trewardPercentiles: number[],\n) {\n\tvalidator.validate(['hex', 'blockNumberOrTag'], [blockCount, newestBlock]);\n\n\tfor (const rewardPercentile of rewardPercentiles) {\n\t\tvalidator.validate(['number'], [rewardPercentile]);\n\t}\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_feeHistory',\n\t\tparams: [blockCount, newestBlock, rewardPercentiles],\n\t});\n}\n\nexport async function getPendingTransactions(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_pendingTransactions',\n\t\tparams: [],\n\t});\n}\n\nexport async function requestAccounts(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_requestAccounts',\n\t\tparams: [],\n\t});\n}\n\nexport async function getChainId(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'eth_chainId',\n\t\tparams: [],\n\t});\n}\n\nexport async function getProof(\n\trequestManager: Web3RequestManager<Web3EthExecutionAPI>,\n\taddress: Address,\n\tstorageKeys: HexString32Bytes[],\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(\n\t\t['address', 'bytes32[]', 'blockNumberOrTag'],\n\t\t[address, storageKeys, blockNumber],\n\t);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_getProof',\n\t\tparams: [address, storageKeys, blockNumber],\n\t});\n}\n\nexport async function getNodeInfo(requestManager: Web3RequestManager<Web3EthExecutionAPI>) {\n\treturn requestManager.send({\n\t\tmethod: 'web3_clientVersion',\n\t\tparams: [],\n\t});\n}\n\nexport async function createAccessList(\n\trequestManager: Web3RequestManager,\n\ttransaction: TransactionWithSenderAPI | Partial<TransactionWithSenderAPI>,\n\tblockNumber: BlockNumberOrTag,\n) {\n\tvalidator.validate(['blockNumberOrTag'], [blockNumber]);\n\n\treturn requestManager.send({\n\t\tmethod: 'eth_createAccessList',\n\t\tparams: [transaction, blockNumber],\n\t});\n}\n\nexport async function signTypedData(\n\trequestManager: Web3RequestManager,\n\taddress: Address,\n\ttypedData: Eip712TypedData,\n\tuseLegacy = false,\n): Promise<string> {\n\t// TODO Add validation for typedData\n\tvalidator.validate(['address'], [address]);\n\n\treturn requestManager.send({\n\t\tmethod: `eth_signTypedData${useLegacy ? '' : '_v4'}`,\n\t\tparams: [address, typedData],\n\t});\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}