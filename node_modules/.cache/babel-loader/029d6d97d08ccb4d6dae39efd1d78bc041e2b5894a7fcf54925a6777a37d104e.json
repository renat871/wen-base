{"ast":null,"code":"import { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\nvar formats = {\n  address: function address(data) {\n    return isAddress(data);\n  },\n  bloom: function bloom(data) {\n    return isBloom(data);\n  },\n  blockNumber: function blockNumber(data) {\n    return isBlockNumber(data);\n  },\n  blockTag: function blockTag(data) {\n    return isBlockTag(data);\n  },\n  blockNumberOrTag: function blockNumberOrTag(data) {\n    return isBlockNumberOrTag(data);\n  },\n  bool: function bool(data) {\n    return isBoolean(data);\n  },\n  bytes: function bytes(data) {\n    return isBytes(data);\n  },\n  filter: function filter(data) {\n    return isFilterObject(data);\n  },\n  hex: function hex(data) {\n    return isHexStrict(data);\n  },\n  uint: function uint(data) {\n    return isUInt(data);\n  },\n  int: function int(data) {\n    return isInt(data);\n  },\n  number: function number(data) {\n    return isNumber(data);\n  },\n  string: function string(data) {\n    return isString(data);\n  }\n};\n// generate formats for all numbers types\nvar _loop = function _loop() {\n  var bitSize = Math.pow(2, i);\n  formats[\"int\".concat(bitSize)] = function (data) {\n    return isInt(data, {\n      bitSize: bitSize\n    });\n  };\n  formats[\"uint\".concat(bitSize)] = function (data) {\n    return isUInt(data, {\n      bitSize: bitSize\n    });\n  };\n};\nfor (var i = 3; i <= 8; i += 1) {\n  _loop();\n}\n// generate bytes\nvar _loop2 = function _loop2(size) {\n  formats[\"bytes\".concat(size)] = function (data) {\n    return isBytes(data, {\n      size: size\n    });\n  };\n};\nfor (var size = 1; size <= 32; size += 1) {\n  _loop2(size);\n}\nformats.bytes256 = formats.bytes;\nexport default formats;","map":{"version":3,"names":["isAddress","isBlockNumber","isBlockNumberOrTag","isBlockTag","isBloom","isBoolean","isBytes","isFilterObject","isHexStrict","isString","isNumber","isInt","isUInt","formats","address","data","bloom","blockNumber","blockTag","blockNumberOrTag","bool","bytes","filter","hex","uint","int","number","string","_loop","bitSize","Math","pow","i","concat","_loop2","size","bytes256"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-validator\\src\\formats.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Filter } from 'web3-types';\nimport { ValidInputTypes } from './types.js';\nimport { isAddress } from './validation/address.js';\nimport { isBlockNumber, isBlockNumberOrTag, isBlockTag } from './validation/block.js';\nimport { isBloom } from './validation/bloom.js';\nimport { isBoolean } from './validation/boolean.js';\nimport { isBytes } from './validation/bytes.js';\nimport { isFilterObject } from './validation/filter.js';\nimport { isHexStrict, isString } from './validation/string.js';\nimport { isNumber, isInt, isUInt } from './validation/numbers.js';\n\nconst formats: { [key: string]: (data: unknown) => boolean } = {\n\taddress: (data: unknown) => isAddress(data as ValidInputTypes),\n\tbloom: (data: unknown) => isBloom(data as ValidInputTypes),\n\tblockNumber: (data: unknown) => isBlockNumber(data as string | number | bigint),\n\tblockTag: (data: unknown) => isBlockTag(data as string),\n\tblockNumberOrTag: (data: unknown) => isBlockNumberOrTag(data as string | number | bigint),\n\tbool: (data: unknown) => isBoolean(data as ValidInputTypes),\n\tbytes: (data: unknown) => isBytes(data as ValidInputTypes | Uint8Array | number[]),\n\tfilter: (data: unknown) => isFilterObject(data as Filter),\n\thex: (data: unknown) => isHexStrict(data as ValidInputTypes),\n\tuint: (data: unknown) => isUInt(data as ValidInputTypes),\n\tint: (data: unknown) => isInt(data as ValidInputTypes),\n\tnumber: (data: unknown) => isNumber(data as ValidInputTypes),\n\tstring: (data: unknown) => isString(data as ValidInputTypes),\n};\n// generate formats for all numbers types\nfor (let i = 3; i <= 8; i += 1) {\n\tconst bitSize = 2 ** i;\n\tformats[`int${bitSize}`] = data => isInt(data as ValidInputTypes, { bitSize });\n\tformats[`uint${bitSize}`] = data => isUInt(data as ValidInputTypes, { bitSize });\n}\n// generate bytes\nfor (let size = 1; size <= 32; size += 1) {\n\tformats[`bytes${size}`] = data =>\n\t\tisBytes(data as ValidInputTypes | Uint8Array | number[], { size });\n}\nformats.bytes256 = formats.bytes;\n\nexport default formats;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}