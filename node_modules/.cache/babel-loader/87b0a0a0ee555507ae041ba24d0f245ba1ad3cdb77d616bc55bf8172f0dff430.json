{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3Context } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { getId } from 'web3-net';\nimport { DEFAULT_RETURN_FORMAT, FMT_NUMBER } from 'web3-types';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n *\n */\nexport var ENS = /*#__PURE__*/function (_Web3Context) {\n  _inherits(ENS, _Web3Context);\n  var _super = _createSuper(ENS);\n  /**\n   * Use to create an instance of ENS\n   * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n   * @param provider - (Optional) The provider to use for the ENS instance\n   * @example\n   * ```ts\n   * const ens = new ENS(\n   * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n   * \t\"http://localhost:8545\"\n   * );\n   *\n   * console.log( ens.defaultChain);\n   * > mainnet\n   * ```\n   */\n  function ENS(registryAddr, provider) {\n    var _this;\n    _classCallCheck(this, ENS);\n    _this = _super.call(this, provider !== null && provider !== void 0 ? provider : '');\n    _this.registryAddress = registryAddr !== null && registryAddr !== void 0 ? registryAddr : registryAddresses.main; // will default to main registry address\n    _this._registry = new Registry(_this.getContextObject(), registryAddr);\n    _this._resolver = new Resolver(_this._registry);\n    return _this;\n  }\n  /**\n   * Returns the Resolver by the given address\n   * @param name - The name of the ENS domain\n   * @returns - An contract instance of the resolver\n   *\n   * @example\n   * ```ts\n   * const resolver = await ens.getResolver('resolver');\n   *\n   * console.log(resolver.options.address);\n   * > '0x1234567890123456789012345678901234567890'\n   * ```\n   */\n  _createClass(ENS, [{\n    key: \"getResolver\",\n    value: function getResolver(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              return _context.abrupt(\"return\", this._registry.getResolver(name));\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n    /**\n     * Returns true if the record exists\n     * @param name - The ENS name\n     * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n     * @example\n     * ```ts\n     * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n     * ```\n     */\n  }, {\n    key: \"recordExists\",\n    value: function recordExists(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", this._registry.recordExists(name));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Returns the caching TTL (time-to-live) of an ENS name.\n     * @param name - The ENS name\n     * @returns - Returns the caching TTL (time-to-live) of a name.\n     * @example\n     * ```ts\n     * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n     * ```\n     */\n  }, {\n    key: \"getTTL\",\n    value: function getTTL(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", this._registry.getTTL(name));\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n    }\n    /**\n     * Returns the owner by the given name and current configured or detected Registry\n     * @param name - The ENS name\n     * @returns - Returns the address of the owner of the name.\n     * @example\n     * ```ts\n     * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n     * ```\n     */\n  }, {\n    key: \"getOwner\",\n    value: function getOwner(name) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", this._registry.getOwner(name));\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Resolves an ENS name to an Ethereum address.\n     * @param ENSName - The ENS name to resolve\n     * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n     * @returns - The Ethereum address of the given name\n     * ```ts\n     * const address = await web3.eth.ens.getAddress('ethereum.eth');\n     * console.log(address);\n     * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n     * ```\n     */\n  }, {\n    key: \"getAddress\",\n    value: function getAddress(ENSName) {\n      var coinType = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 60;\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", this._resolver.getAddress(ENSName, coinType));\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Returns the X and Y coordinates of the curve point for the public key.\n     * @param ENSName - The ENS name\n     * @returns - The X and Y coordinates of the curve point for the public key\n     * @example\n     * ```ts\n     * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n     * console.log(key);\n     * > {\n     * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n     * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n     * }\n     * ```\n     */\n  }, {\n    key: \"getPubkey\",\n    value: function getPubkey(ENSName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", this._resolver.getPubkey(ENSName));\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n    /**\n     * Returns the content hash object associated with an ENS node.\n     * @param ENSName - The ENS name\n     * @returns - The content hash object associated with an ENS node\n     * @example\n     * ```ts\n     * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n     * console.log(hash);\n     * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n     * ```\n     */\n  }, {\n    key: \"getContenthash\",\n    value: function getContenthash(ENSName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              return _context7.abrupt(\"return\", this._resolver.getContenthash(ENSName));\n            case 1:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n    }\n    /**\n     * Checks if the current used network is synced and looks for ENS support there.\n     * Throws an error if not.\n     * @returns - The address of the ENS registry if the network has been detected successfully\n     * @example\n     * ```ts\n     * console.log(await web3.eth.ens.checkNetwork());\n     * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n     * ```\n     */\n  }, {\n    key: \"checkNetwork\",\n    value: function checkNetwork() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n        var now, syncInfo, networkType, addr;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              now = Date.now() / 1000;\n              if (!(!this._lastSyncCheck || now - this._lastSyncCheck > 3600)) {\n                _context8.next = 8;\n                break;\n              }\n              _context8.next = 4;\n              return isSyncing(this);\n            case 4:\n              syncInfo = _context8.sent;\n              if (typeof syncInfo === 'boolean' && !syncInfo) {\n                _context8.next = 7;\n                break;\n              }\n              throw new ENSNetworkNotSyncedError();\n            case 7:\n              this._lastSyncCheck = now;\n            case 8:\n              if (!this._detectedAddress) {\n                _context8.next = 10;\n                break;\n              }\n              return _context8.abrupt(\"return\", this._detectedAddress);\n            case 10:\n              _context8.next = 12;\n              return getId(this, Object.assign(Object.assign({}, DEFAULT_RETURN_FORMAT), {\n                number: FMT_NUMBER.HEX\n              }));\n            case 12:\n              networkType = _context8.sent;\n              // get the network from provider\n              addr = registryAddresses[networkIds[networkType]];\n              if (!(typeof addr === 'undefined')) {\n                _context8.next = 16;\n                break;\n              }\n              throw new ENSUnsupportedNetworkError(networkType);\n            case 16:\n              this._detectedAddress = addr;\n              return _context8.abrupt(\"return\", this._detectedAddress);\n            case 18:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8, this);\n      }));\n    }\n    /**\n     * Returns true if the related Resolver does support the given signature or interfaceId.\n     * @param ENSName - The ENS name\n     * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n     * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n     * @example\n     * ```ts\n     * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n     * console.log(supports);\n     * > true\n     * ```\n     */\n  }, {\n    key: \"supportsInterface\",\n    value: function supportsInterface(ENSName, interfaceId) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              return _context9.abrupt(\"return\", this._resolver.supportsInterface(ENSName, interfaceId));\n            case 1:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9, this);\n      }));\n    }\n    /**\n     * @returns - Returns all events that can be emitted by the ENS registry.\n     */\n  }, {\n    key: \"events\",\n    get: function get() {\n      return this._registry.events;\n    }\n  }]);\n  return ENS;\n}(Web3Context);","map":{"version":3,"names":["Web3Context","ENSNetworkNotSyncedError","ENSUnsupportedNetworkError","isSyncing","getId","DEFAULT_RETURN_FORMAT","FMT_NUMBER","networkIds","registryAddresses","Registry","Resolver","ENS","_Web3Context","_inherits","_super","_createSuper","registryAddr","provider","_this","_classCallCheck","call","registryAddress","main","_registry","getContextObject","_resolver","_createClass","key","value","getResolver","name","_context","stop","_callee","recordExists","_context2","_callee2","getTTL","_context3","_callee3","getOwner","_context4","_callee4","getAddress","ENSName","coinType","arguments","length","undefined","_context5","_callee5","getPubkey","_context6","_callee6","getContenthash","_context7","_callee7","checkNetwork","now","Date","_lastSyncCheck","_context8","next","syncInfo","sent","_detectedAddress","abrupt","Object","assign","number","HEX","networkType","addr","_callee8","supportsInterface","interfaceId","_context9","_callee9","get","events"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-ens\\src\\ens.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3Context, Web3ContextObject } from 'web3-core';\nimport { ENSNetworkNotSyncedError, ENSUnsupportedNetworkError } from 'web3-errors';\nimport { isSyncing } from 'web3-eth';\nimport { Contract } from 'web3-eth-contract';\nimport { getId } from 'web3-net';\nimport {\n\tDEFAULT_RETURN_FORMAT,\n\tEthExecutionAPI,\n\tFMT_NUMBER,\n\tSupportedProviders,\n\tWeb3NetAPI,\n} from 'web3-types';\nimport { PublicResolverAbi } from './abi/ens/PublicResolver.js';\nimport { networkIds, registryAddresses } from './config.js';\nimport { Registry } from './registry.js';\nimport { Resolver } from './resolver.js';\n\n/**\n * This class is designed to interact with the ENS system on the Ethereum blockchain.\n *\n */\nexport class ENS extends Web3Context<EthExecutionAPI & Web3NetAPI> {\n\t/**\n\t * The registryAddress property can be used to define a custom registry address when you are connected to an unknown chain. It defaults to the main registry address.\n\t */\n\tpublic registryAddress: string;\n\tprivate readonly _registry: Registry;\n\tprivate readonly _resolver: Resolver;\n\tprivate _detectedAddress?: string;\n\tprivate _lastSyncCheck?: number;\n\n\t/**\n\t * Use to create an instance of ENS\n\t * @param registryAddr - (Optional) The address of the ENS registry (default: mainnet registry address)\n\t * @param provider - (Optional) The provider to use for the ENS instance\n\t * @example\n\t * ```ts\n\t * const ens = new ENS(\n\t * \t\"0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e\",\n\t * \t\"http://localhost:8545\"\n\t * );\n\t *\n\t * console.log( ens.defaultChain);\n\t * > mainnet\n\t * ```\n\t */\n\tpublic constructor(\n\t\tregistryAddr?: string,\n\t\tprovider?:\n\t\t\t| SupportedProviders<EthExecutionAPI & Web3NetAPI>\n\t\t\t| Web3ContextObject<EthExecutionAPI & Web3NetAPI>\n\t\t\t| string,\n\t) {\n\t\tsuper(provider ?? '');\n\t\tthis.registryAddress = registryAddr ?? registryAddresses.main; // will default to main registry address\n\t\tthis._registry = new Registry(this.getContextObject(), registryAddr);\n\t\tthis._resolver = new Resolver(this._registry);\n\t}\n\n\t/**\n\t * Returns the Resolver by the given address\n\t * @param name - The name of the ENS domain\n\t * @returns - An contract instance of the resolver\n\t *\n\t * @example\n\t * ```ts\n\t * const resolver = await ens.getResolver('resolver');\n\t *\n\t * console.log(resolver.options.address);\n\t * > '0x1234567890123456789012345678901234567890'\n\t * ```\n\t */\n\tpublic async getResolver(name: string): Promise<Contract<typeof PublicResolverAbi>> {\n\t\treturn this._registry.getResolver(name);\n\t}\n\n\t/**\n\t * Returns true if the record exists\n\t * @param name - The ENS name\n\t * @returns - Returns `true` if node exists in this ENS registry. This will return `false` for records that are in the legacy ENS registry but have not yet been migrated to the new one.\n\t * @example\n\t * ```ts\n\t * const exists = await web3.eth.ens.recordExists('ethereum.eth');\n\t * ```\n\t */\n\tpublic async recordExists(name: string): Promise<unknown> {\n\t\treturn this._registry.recordExists(name);\n\t}\n\n\t/**\n\t * Returns the caching TTL (time-to-live) of an ENS name.\n\t * @param name - The ENS name\n\t * @returns - Returns the caching TTL (time-to-live) of a name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getTTL('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getTTL(name: string): Promise<unknown> {\n\t\treturn this._registry.getTTL(name);\n\t}\n\n\t/**\n\t * Returns the owner by the given name and current configured or detected Registry\n\t * @param name - The ENS name\n\t * @returns - Returns the address of the owner of the name.\n\t * @example\n\t * ```ts\n\t * const owner = await web3.eth.ens.getOwner('ethereum.eth');\n\t * ```\n\t */\n\tpublic async getOwner(name: string): Promise<unknown> {\n\t\treturn this._registry.getOwner(name);\n\t}\n\n\t/**\n\t * Resolves an ENS name to an Ethereum address.\n\t * @param ENSName - The ENS name to resolve\n\t * @param coinType - (Optional) The coin type, defaults to 60 (ETH)\n\t * @returns - The Ethereum address of the given name\n\t * ```ts\n\t * const address = await web3.eth.ens.getAddress('ethereum.eth');\n\t * console.log(address);\n\t * > '0xfB6916095ca1df60bB79Ce92cE3Ea74c37c5d359'\n\t * ```\n\t */\n\tpublic async getAddress(ENSName: string, coinType = 60) {\n\t\treturn this._resolver.getAddress(ENSName, coinType);\n\t}\n\n\t/**\n\t * Returns the X and Y coordinates of the curve point for the public key.\n\t * @param ENSName - The ENS name\n\t * @returns - The X and Y coordinates of the curve point for the public key\n\t * @example\n\t * ```ts\n\t * const key = await web3.eth.ens.getPubkey('ethereum.eth');\n\t * console.log(key);\n\t * > {\n\t * \"0\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"1\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"x\": \"0x0000000000000000000000000000000000000000000000000000000000000000\",\n\t * \"y\": \"0x0000000000000000000000000000000000000000000000000000000000000000\"\n\t * }\n\t * ```\n\t */\n\tpublic async getPubkey(ENSName: string) {\n\t\treturn this._resolver.getPubkey(ENSName);\n\t}\n\n\t/**\n\t * Returns the content hash object associated with an ENS node.\n\t * @param ENSName - The ENS name\n\t * @returns - The content hash object associated with an ENS node\n\t * @example\n\t * ```ts\n\t * const hash = await web3.eth.ens.getContenthash('ethereum.eth');\n\t * console.log(hash);\n\t * > 'QmaEBknbGT4bTQiQoe2VNgBJbRfygQGktnaW5TbuKixjYL'\n\t * ```\n\t */\n\tpublic async getContenthash(ENSName: string) {\n\t\treturn this._resolver.getContenthash(ENSName);\n\t}\n\n\t/**\n\t * Checks if the current used network is synced and looks for ENS support there.\n\t * Throws an error if not.\n\t * @returns - The address of the ENS registry if the network has been detected successfully\n\t * @example\n\t * ```ts\n\t * console.log(await web3.eth.ens.checkNetwork());\n\t * > '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e'\n\t * ```\n\t */\n\tpublic async checkNetwork() {\n\t\tconst now = Date.now() / 1000;\n\t\tif (!this._lastSyncCheck || now - this._lastSyncCheck > 3600) {\n\t\t\tconst syncInfo = await isSyncing(this);\n\n\t\t\tif (!(typeof syncInfo === 'boolean' && !syncInfo)) {\n\t\t\t\tthrow new ENSNetworkNotSyncedError();\n\t\t\t}\n\n\t\t\tthis._lastSyncCheck = now;\n\t\t}\n\n\t\tif (this._detectedAddress) {\n\t\t\treturn this._detectedAddress;\n\t\t}\n\t\tconst networkType = await getId(this, {\n\t\t\t...DEFAULT_RETURN_FORMAT,\n\t\t\tnumber: FMT_NUMBER.HEX,\n\t\t}); // get the network from provider\n\t\tconst addr = registryAddresses[networkIds[networkType]];\n\n\t\tif (typeof addr === 'undefined') {\n\t\t\tthrow new ENSUnsupportedNetworkError(networkType);\n\t\t}\n\n\t\tthis._detectedAddress = addr;\n\t\treturn this._detectedAddress;\n\t}\n\n\t/**\n\t * Returns true if the related Resolver does support the given signature or interfaceId.\n\t * @param ENSName - The ENS name\n\t * @param interfaceId - The signature of the function or the interfaceId as described in the ENS documentation\n\t * @returns - `true` if the related Resolver does support the given signature or interfaceId.\n\t * @example\n\t * ```ts\n\t * const supports = await web3.eth.ens.supportsInterface('ethereum.eth', 'addr(bytes32');\n\t * console.log(supports);\n\t * > true\n\t * ```\n\t */\n\tpublic async supportsInterface(ENSName: string, interfaceId: string) {\n\t\treturn this._resolver.supportsInterface(ENSName, interfaceId);\n\t}\n\n\t/**\n\t * @returns - Returns all events that can be emitted by the ENS registry.\n\t */\n\tpublic get events() {\n\t\treturn this._registry.events;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}