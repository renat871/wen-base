{"ast":null,"code":"import _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport var TransactionFactory = /*#__PURE__*/function () {\n  // It is not possible to instantiate a TransactionFactory object.\n  // eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n  function TransactionFactory() {\n    _classCallCheck(this, TransactionFactory);\n  }\n  /**\n   * Create a transaction from a `txData` object\n   *\n   * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n   * @param txOptions - Options to pass on to the constructor of the transaction\n   */\n  _createClass(TransactionFactory, null, [{\n    key: \"fromTxData\",\n    value: function fromTxData(txData) {\n      var txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!('type' in txData) || txData.type === undefined) {\n        // Assume legacy transaction\n        return Transaction.fromTxData(txData, txOptions);\n      }\n      var txType = Number(uint8ArrayToBigInt(toUint8Array(txData.type)));\n      if (txType === 0) {\n        return Transaction.fromTxData(txData, txOptions);\n      }\n      if (txType === 1) {\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        return AccessListEIP2930Transaction.fromTxData(\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        txData, txOptions);\n      }\n      if (txType === 2) {\n        return FeeMarketEIP1559Transaction.fromTxData(\n        // eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n        txData, txOptions);\n      }\n      throw new Error(\"Tx instantiation with type \".concat(txType, \" not supported\"));\n    }\n    /**\n     * This method tries to decode serialized data.\n     *\n     * @param data - The data Uint8Array\n     * @param txOptions - The transaction options\n     */\n  }, {\n    key: \"fromSerializedData\",\n    value: function fromSerializedData(data) {\n      var txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (data[0] <= 0x7f) {\n        // Determine the type.\n        switch (data[0]) {\n          case 1:\n            return AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n          case 2:\n            return FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n          default:\n            throw new Error(\"TypedTransaction with ID \".concat(data[0], \" unknown\"));\n        }\n      } else {\n        return Transaction.fromSerializedTx(data, txOptions);\n      }\n    }\n    /**\n     * When decoding a BlockBody, in the transactions field, a field is either:\n     * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n     * A Uint8Array[] (Legacy Transaction)\n     * This method returns the right transaction.\n     *\n     * @param data - A Uint8Array or Uint8Array[]\n     * @param txOptions - The transaction options\n     */\n  }, {\n    key: \"fromBlockBodyData\",\n    value: function fromBlockBodyData(data) {\n      var txOptions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (data instanceof Uint8Array) {\n        return this.fromSerializedData(data, txOptions);\n      }\n      if (Array.isArray(data)) {\n        // It is a legacy transaction\n        return Transaction.fromValuesArray(data, txOptions);\n      }\n      throw new Error('Cannot decode transaction: unknown type input');\n    }\n  }]);\n  return TransactionFactory;\n}();","map":{"version":3,"names":["toUint8Array","uint8ArrayToBigInt","FeeMarketEIP1559Transaction","AccessListEIP2930Transaction","Transaction","TransactionFactory","_classCallCheck","_createClass","key","value","fromTxData","txData","txOptions","arguments","length","undefined","type","txType","Number","Error","concat","fromSerializedData","data","fromSerializedTx","fromBlockBodyData","Uint8Array","Array","isArray","fromValuesArray"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\transactionFactory.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { toUint8Array, uint8ArrayToBigInt } from '../common/utils.js';\nimport { FeeMarketEIP1559Transaction } from './eip1559Transaction.js';\nimport { AccessListEIP2930Transaction } from './eip2930Transaction.js';\nimport { Transaction } from './legacyTransaction.js';\nimport type { TypedTransaction } from '../types.js';\n\nimport type {\n\tAccessListEIP2930TxData,\n\tFeeMarketEIP1559TxData,\n\tTxData,\n\tTxOptions,\n} from './types.js';\n\n// eslint-disable-next-line @typescript-eslint/no-extraneous-class\nexport class TransactionFactory {\n\t// It is not possible to instantiate a TransactionFactory object.\n\t// eslint-disable-next-line @typescript-eslint/no-empty-function, no-useless-constructor\n\tprivate constructor() {}\n\n\t/**\n\t * Create a transaction from a `txData` object\n\t *\n\t * @param txData - The transaction data. The `type` field will determine which transaction type is returned (if undefined, creates a legacy transaction)\n\t * @param txOptions - Options to pass on to the constructor of the transaction\n\t */\n\tpublic static fromTxData(\n\t\ttxData: TxData | TypedTransaction,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (!('type' in txData) || txData.type === undefined) {\n\t\t\t// Assume legacy transaction\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tconst txType = Number(uint8ArrayToBigInt(toUint8Array(txData.type)));\n\t\tif (txType === 0) {\n\t\t\treturn Transaction.fromTxData(txData as TxData, txOptions);\n\t\t}\n\t\tif (txType === 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<AccessListEIP2930TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tif (txType === 2) {\n\t\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/consistent-type-assertions\n\t\t\t\t<FeeMarketEIP1559TxData>txData,\n\t\t\t\ttxOptions,\n\t\t\t);\n\t\t}\n\t\tthrow new Error(`Tx instantiation with type ${txType} not supported`);\n\t}\n\n\t/**\n\t * This method tries to decode serialized data.\n\t *\n\t * @param data - The data Uint8Array\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromSerializedData(\n\t\tdata: Uint8Array,\n\t\ttxOptions: TxOptions = {},\n\t): TypedTransaction {\n\t\tif (data[0] <= 0x7f) {\n\t\t\t// Determine the type.\n\t\t\tswitch (data[0]) {\n\t\t\t\tcase 1:\n\t\t\t\t\treturn AccessListEIP2930Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tcase 2:\n\t\t\t\t\treturn FeeMarketEIP1559Transaction.fromSerializedTx(data, txOptions);\n\t\t\t\tdefault:\n\t\t\t\t\tthrow new Error(`TypedTransaction with ID ${data[0]} unknown`);\n\t\t\t}\n\t\t} else {\n\t\t\treturn Transaction.fromSerializedTx(data, txOptions);\n\t\t}\n\t}\n\n\t/**\n\t * When decoding a BlockBody, in the transactions field, a field is either:\n\t * A Uint8Array (a TypedTransaction - encoded as TransactionType || rlp(TransactionPayload))\n\t * A Uint8Array[] (Legacy Transaction)\n\t * This method returns the right transaction.\n\t *\n\t * @param data - A Uint8Array or Uint8Array[]\n\t * @param txOptions - The transaction options\n\t */\n\tpublic static fromBlockBodyData(data: Uint8Array | Uint8Array[], txOptions: TxOptions = {}) {\n\t\tif (data instanceof Uint8Array) {\n\t\t\treturn this.fromSerializedData(data, txOptions);\n\t\t}\n\t\tif (Array.isArray(data)) {\n\t\t\t// It is a legacy transaction\n\t\t\treturn Transaction.fromValuesArray(data, txOptions);\n\t\t}\n\t\tthrow new Error('Cannot decode transaction: unknown type input');\n\t}\n}\n"],"mappings":";;AAAA;;;;;;;;;;;;;;;;AAgBA,SAASA,YAAY,EAAEC,kBAAkB,QAAQ,oBAAoB;AACrE,SAASC,2BAA2B,QAAQ,yBAAyB;AACrE,SAASC,4BAA4B,QAAQ,yBAAyB;AACtE,SAASC,WAAW,QAAQ,wBAAwB;AAUpD;AACA,WAAaC,kBAAkB;EAC9B;EACA;EACA,SAAAA,mBAAA;IAAAC,eAAA,OAAAD,kBAAA;EAAuB;EAEvB;;;;;;EAAAE,YAAA,CAAAF,kBAAA;IAAAG,GAAA;IAAAC,KAAA,EAMO,SAAAC,WACNC,MAAiC,EACR;MAAA,IAAzBC,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;MAEzB,IAAI,EAAE,MAAM,IAAIF,MAAM,CAAC,IAAIA,MAAM,CAACK,IAAI,KAAKD,SAAS,EAAE;QACrD;QACA,OAAOX,WAAW,CAACM,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;MAE3D,IAAMK,MAAM,GAAGC,MAAM,CAACjB,kBAAkB,CAACD,YAAY,CAACW,MAAM,CAACK,IAAI,CAAC,CAAC,CAAC;MACpE,IAAIC,MAAM,KAAK,CAAC,EAAE;QACjB,OAAOb,WAAW,CAACM,UAAU,CAACC,MAAgB,EAAEC,SAAS,CAAC;;MAE3D,IAAIK,MAAM,KAAK,CAAC,EAAE;QACjB;QACA,OAAOd,4BAA4B,CAACO,UAAU;QAC7C;QACyBC,MAAM,EAC/BC,SAAS,CACT;;MAEF,IAAIK,MAAM,KAAK,CAAC,EAAE;QACjB,OAAOf,2BAA2B,CAACQ,UAAU;QAC5C;QACwBC,MAAM,EAC9BC,SAAS,CACT;;MAEF,MAAM,IAAIO,KAAK,+BAAAC,MAAA,CAA+BH,MAAM,mBAAgB,CAAC;IACtE;IAEA;;;;;;EAAA;IAAAT,GAAA;IAAAC,KAAA,EAMO,SAAAY,mBACNC,IAAgB,EACS;MAAA,IAAzBV,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;MAEzB,IAAIS,IAAI,CAAC,CAAC,CAAC,IAAI,IAAI,EAAE;QACpB;QACA,QAAQA,IAAI,CAAC,CAAC,CAAC;UACd,KAAK,CAAC;YACL,OAAOnB,4BAA4B,CAACoB,gBAAgB,CAACD,IAAI,EAAEV,SAAS,CAAC;UACtE,KAAK,CAAC;YACL,OAAOV,2BAA2B,CAACqB,gBAAgB,CAACD,IAAI,EAAEV,SAAS,CAAC;UACrE;YACC,MAAM,IAAIO,KAAK,6BAAAC,MAAA,CAA6BE,IAAI,CAAC,CAAC,CAAC,aAAU,CAAC;;OAEhE,MAAM;QACN,OAAOlB,WAAW,CAACmB,gBAAgB,CAACD,IAAI,EAAEV,SAAS,CAAC;;IAEtD;IAEA;;;;;;;;;EAAA;IAAAJ,GAAA;IAAAC,KAAA,EASO,SAAAe,kBAAyBF,IAA+B,EAA2B;MAAA,IAAzBV,SAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAuB,EAAE;MACzF,IAAIS,IAAI,YAAYG,UAAU,EAAE;QAC/B,OAAO,IAAI,CAACJ,kBAAkB,CAACC,IAAI,EAAEV,SAAS,CAAC;;MAEhD,IAAIc,KAAK,CAACC,OAAO,CAACL,IAAI,CAAC,EAAE;QACxB;QACA,OAAOlB,WAAW,CAACwB,eAAe,CAACN,IAAI,EAAEV,SAAS,CAAC;;MAEpD,MAAM,IAAIO,KAAK,CAAC,+CAA+C,CAAC;IACjE;EAAC;EAAA,OAAAd,kBAAA;AAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}