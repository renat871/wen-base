{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\nimport { transactionReceiptSchema } from '../schemas.js';\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nexport var watchTransactionByPolling = function watchTransactionByPolling(_ref) {\n  var web3Context = _ref.web3Context,\n    transactionReceipt = _ref.transactionReceipt,\n    transactionPromiEvent = _ref.transactionPromiEvent,\n    returnFormat = _ref.returnFormat;\n  var _a;\n  // Having a transactionReceipt means that the transaction has already been included\n  // in at least one block, so we start with 1\n  var confirmations = 1;\n  var intervalId = setInterval(function () {\n    (function () {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var nextBlock;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (confirmations >= web3Context.transactionConfirmationBlocks) clearInterval(intervalId);\n              _context.next = 3;\n              return ethRpcMethods.getBlockByNumber(web3Context.requestManager, numberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)), false);\n            case 3:\n              nextBlock = _context.sent;\n              if (nextBlock === null || nextBlock === void 0 ? void 0 : nextBlock.hash) {\n                confirmations += 1;\n                transactionPromiEvent.emit('confirmation', {\n                  confirmations: format({\n                    format: 'uint'\n                  }, confirmations, returnFormat),\n                  receipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n                  latestBlockHash: format({\n                    format: 'bytes32'\n                  }, nextBlock.hash, returnFormat)\n                });\n              }\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      }));\n    })();\n  }, (_a = web3Context.transactionReceiptPollingInterval) !== null && _a !== void 0 ? _a : web3Context.transactionPollingInterval);\n};","map":{"version":3,"names":["format","numberToHex","ethRpcMethods","transactionReceiptSchema","watchTransactionByPolling","_ref","web3Context","transactionReceipt","transactionPromiEvent","returnFormat","confirmations","intervalId","setInterval","__awaiter","_regeneratorRuntime","mark","_callee","nextBlock","wrap","_callee$","_context","prev","next","transactionConfirmationBlocks","clearInterval","getBlockByNumber","requestManager","BigInt","blockNumber","sent","hash","emit","receipt","latestBlockHash","stop","_a","transactionReceiptPollingInterval","transactionPollingInterval"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth\\src\\utils\\watch_transaction_by_pooling.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Bytes, EthExecutionAPI, TransactionReceipt } from 'web3-types';\nimport { Web3Context, Web3PromiEvent } from 'web3-core';\nimport { format, numberToHex } from 'web3-utils';\nimport { ethRpcMethods } from 'web3-rpc-methods';\n\nimport { DataFormat } from 'web3-types';\nimport { SendSignedTransactionEvents, SendTransactionEvents } from '../types.js';\nimport { transactionReceiptSchema } from '../schemas.js';\n\nexport type Web3PromiEventEventTypeBase<ReturnFormat extends DataFormat> =\n\t| SendTransactionEvents<ReturnFormat>\n\t| SendSignedTransactionEvents<ReturnFormat>;\n\nexport type WaitProps<ReturnFormat extends DataFormat, ResolveType = TransactionReceipt> = {\n\tweb3Context: Web3Context<EthExecutionAPI>;\n\ttransactionReceipt: TransactionReceipt;\n\ttransactionPromiEvent: Web3PromiEvent<ResolveType, Web3PromiEventEventTypeBase<ReturnFormat>>;\n\treturnFormat: ReturnFormat;\n};\n\n/**\n * This function watches a Transaction by subscribing to new heads.\n * It is used by `watchTransactionForConfirmations`, in case the provider does not support subscription.\n * And it is also used by `watchTransactionBySubscription`, as a fallback, if the subscription failed for any reason.\n */\nexport const watchTransactionByPolling = <\n\tReturnFormat extends DataFormat,\n\tResolveType = TransactionReceipt,\n>({\n\tweb3Context,\n\ttransactionReceipt,\n\ttransactionPromiEvent,\n\treturnFormat,\n}: WaitProps<ReturnFormat, ResolveType>) => {\n\t// Having a transactionReceipt means that the transaction has already been included\n\t// in at least one block, so we start with 1\n\tlet confirmations = 1;\n\tconst intervalId = setInterval(() => {\n\t\t(async () => {\n\t\t\tif (confirmations >= web3Context.transactionConfirmationBlocks)\n\t\t\t\tclearInterval(intervalId);\n\n\t\t\tconst nextBlock = await ethRpcMethods.getBlockByNumber(\n\t\t\t\tweb3Context.requestManager,\n\t\t\t\tnumberToHex(BigInt(transactionReceipt.blockNumber) + BigInt(confirmations)),\n\t\t\t\tfalse,\n\t\t\t);\n\n\t\t\tif (nextBlock?.hash) {\n\t\t\t\tconfirmations += 1;\n\n\t\t\t\ttransactionPromiEvent.emit('confirmation', {\n\t\t\t\t\tconfirmations: format({ format: 'uint' }, confirmations, returnFormat),\n\t\t\t\t\treceipt: format(transactionReceiptSchema, transactionReceipt, returnFormat),\n\t\t\t\t\tlatestBlockHash: format(\n\t\t\t\t\t\t{ format: 'bytes32' },\n\t\t\t\t\t\tnextBlock.hash as Bytes,\n\t\t\t\t\t\treturnFormat,\n\t\t\t\t\t),\n\t\t\t\t});\n\t\t\t}\n\t\t})() as unknown;\n\t}, web3Context.transactionReceiptPollingInterval ?? web3Context.transactionPollingInterval);\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkBA,SAASA,MAAM,EAAEC,WAAW,QAAQ,YAAY;AAChD,SAASC,aAAa,QAAQ,kBAAkB;AAIhD,SAASC,wBAAwB,QAAQ,eAAe;AAaxD;;;;;AAKA,OAAO,IAAMC,yBAAyB,GAAG,SAA5BA,yBAAyBA,CAAAC,IAAA,EAQK;EAAA,IAJ1CC,WAAW,GAAAD,IAAA,CAAXC,WAAW;IACXC,kBAAkB,GAAAF,IAAA,CAAlBE,kBAAkB;IAClBC,qBAAqB,GAAAH,IAAA,CAArBG,qBAAqB;IACrBC,YAAY,GAAAJ,IAAA,CAAZI,YAAY;;EAEZ;EACA;EACA,IAAIC,aAAa,GAAG,CAAC;EACrB,IAAMC,UAAU,GAAGC,WAAW,CAAC,YAAK;IACnC,CAAC;MAAA,OAAWC,SAAA,sCAAAC,mBAAA,GAAAC,IAAA,UAAAC,QAAA;QAAA,IAAAC,SAAA;QAAA,OAAAH,mBAAA,GAAAI,IAAA,UAAAC,SAAAC,QAAA;UAAA,kBAAAA,QAAA,CAAAC,IAAA,GAAAD,QAAA,CAAAE,IAAA;YAAA;cACX,IAAIZ,aAAa,IAAIJ,WAAW,CAACiB,6BAA6B,EAC7DC,aAAa,CAACb,UAAU,CAAC;cAACS,QAAA,CAAAE,IAAA;cAET,OAAMpB,aAAa,CAACuB,gBAAgB,CACrDnB,WAAW,CAACoB,cAAc,EAC1BzB,WAAW,CAAC0B,MAAM,CAACpB,kBAAkB,CAACqB,WAAW,CAAC,GAAGD,MAAM,CAACjB,aAAa,CAAC,CAAC,EAC3E,KAAK,CACL;YAAA;cAJKO,SAAS,GAAAG,QAAA,CAAAS,IAAA;cAMf,IAAIZ,SAAS,aAATA,SAAS,uBAATA,SAAS,CAAEa,IAAI,EAAE;gBACpBpB,aAAa,IAAI,CAAC;gBAElBF,qBAAqB,CAACuB,IAAI,CAAC,cAAc,EAAE;kBAC1CrB,aAAa,EAAEV,MAAM,CAAC;oBAAEA,MAAM,EAAE;kBAAM,CAAE,EAAEU,aAAa,EAAED,YAAY,CAAC;kBACtEuB,OAAO,EAAEhC,MAAM,CAACG,wBAAwB,EAAEI,kBAAkB,EAAEE,YAAY,CAAC;kBAC3EwB,eAAe,EAAEjC,MAAM,CACtB;oBAAEA,MAAM,EAAE;kBAAS,CAAE,EACrBiB,SAAS,CAACa,IAAa,EACvBrB,YAAY;iBAEb,CAAC;;YACF;YAAA;cAAA,OAAAW,QAAA,CAAAc,IAAA;UAAA;QAAA,GAAAlB,OAAA;MAAA,CACD;IAAA,GAAC,CAAa;EAChB,CAAC,EAAE,CAAAmB,EAAA,GAAA7B,WAAW,CAAC8B,iCAAiC,cAAAD,EAAA,cAAAA,EAAA,GAAI7B,WAAW,CAAC+B,0BAA0B,CAAC;AAC5F,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}