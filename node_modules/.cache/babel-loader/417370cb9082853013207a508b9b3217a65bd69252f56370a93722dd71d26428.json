{"ast":null,"code":"/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { isNullish } from 'web3-validator';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n// check if code is a valid rpc server error code\nexport var isResponseRpcError = function isResponseRpcError(rpcError) {\n  var errorCode = rpcError.error.code;\n  return rpcErrorsMap.has(errorCode) || errorCode >= -32099 && errorCode <= -32000;\n};\nexport var isResponseWithResult = function isResponseWithResult(response) {\n  return !Array.isArray(response) && !!response && response.jsonrpc === '2.0' &&\n  // JSON RPC consider \"null\" as valid response\n  'result' in response && isNullish(response.error) && (typeof response.id === 'number' || typeof response.id === 'string');\n};\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport var isResponseWithError = function isResponseWithError(response) {\n  return !Array.isArray(response) && response.jsonrpc === '2.0' && !!response && isNullish(response.result) &&\n  // JSON RPC consider \"null\" as valid response\n  'error' in response && (typeof response.id === 'number' || typeof response.id === 'string');\n};\nexport var isResponseWithNotification = function isResponseWithNotification(response) {\n  return !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && !isNullish(response.params) && !isNullish(response.method);\n};\nexport var isSubscriptionResult = function isSubscriptionResult(response) {\n  return !Array.isArray(response) && !!response && response.jsonrpc === '2.0' && 'id' in response &&\n  // JSON RPC consider \"null\" as valid response\n  'result' in response;\n};\nexport var validateResponse = function validateResponse(response) {\n  return isResponseWithResult(response) || isResponseWithError(response);\n};\nexport var isValidResponse = function isValidResponse(response) {\n  return Array.isArray(response) ? response.every(validateResponse) : validateResponse(response);\n};\nexport var isBatchResponse = function isBatchResponse(response) {\n  return Array.isArray(response) && response.length > 0 && isValidResponse(response);\n};\n// internal optional variable to increment and use for the jsonrpc `id`\nvar requestIdSeed;\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport var setRequestIdStart = function setRequestIdStart(start) {\n  requestIdSeed = start;\n};\nexport var toPayload = function toPayload(request) {\n  var _a, _b, _c, _d;\n  if (typeof requestIdSeed !== 'undefined') {\n    requestIdSeed += 1;\n  }\n  return {\n    jsonrpc: (_a = request.jsonrpc) !== null && _a !== void 0 ? _a : '2.0',\n    id: (_c = (_b = request.id) !== null && _b !== void 0 ? _b : requestIdSeed) !== null && _c !== void 0 ? _c : uuidV4(),\n    method: request.method,\n    params: (_d = request.params) !== null && _d !== void 0 ? _d : undefined\n  };\n};\nexport var toBatchPayload = function toBatchPayload(requests) {\n  return requests.map(function (request) {\n    return toPayload(request);\n  });\n};\nexport var isBatchRequest = function isBatchRequest(request) {\n  return Array.isArray(request) && request.length > 0;\n};","map":{"version":3,"names":["isNullish","rpcErrorsMap","uuidV4","isResponseRpcError","rpcError","errorCode","error","code","has","isResponseWithResult","response","Array","isArray","jsonrpc","id","isResponseWithError","result","isResponseWithNotification","params","method","isSubscriptionResult","validateResponse","isValidResponse","every","isBatchResponse","length","requestIdSeed","setRequestIdStart","start","toPayload","request","_a","_c","_b","_d","undefined","toBatchPayload","requests","map","isBatchRequest"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-utils\\src\\json_rpc.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { isNullish } from 'web3-validator';\nimport {\n\tJsonRpcPayload,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResponseWithError,\n\tJsonRpcOptionalRequest,\n\tJsonRpcBatchRequest,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcSubscriptionResult,\n} from 'web3-types';\nimport { rpcErrorsMap } from 'web3-errors';\nimport { uuidV4 } from './uuid.js';\n\n// check if code is a valid rpc server error code\nexport const isResponseRpcError = (rpcError: JsonRpcResponseWithError) => {\n\tconst errorCode = rpcError.error.code;\n\treturn rpcErrorsMap.has(errorCode) || (errorCode >= -32099 && errorCode <= -32000);\n};\n\nexport const isResponseWithResult = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithResult<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response &&\n\tisNullish(response.error) &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\n// To avoid circular package dependency, copied to code here. If you update this please update same function in `response_errors.ts`\nexport const isResponseWithError = <Error = unknown, Result = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcResponseWithError<Error> =>\n\t!Array.isArray(response) &&\n\tresponse.jsonrpc === '2.0' &&\n\t!!response &&\n\tisNullish(response.result) &&\n\t// JSON RPC consider \"null\" as valid response\n\t'error' in response &&\n\t(typeof response.id === 'number' || typeof response.id === 'string');\n\nexport const isResponseWithNotification = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcNotification<Result> =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t!isNullish(response.params) &&\n\t!isNullish(response.method);\n\nexport const isSubscriptionResult = <Result>(\n\tresponse: JsonRpcNotification<Result> | JsonRpcSubscriptionResult,\n): response is JsonRpcSubscriptionResult =>\n\t!Array.isArray(response) &&\n\t!!response &&\n\tresponse.jsonrpc === '2.0' &&\n\t'id' in response &&\n\t// JSON RPC consider \"null\" as valid response\n\t'result' in response;\n\nexport const validateResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean => isResponseWithResult<Result>(response) || isResponseWithError<Error>(response);\n\nexport const isValidResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): boolean =>\n\tArray.isArray(response) ? response.every(validateResponse) : validateResponse(response);\n\nexport const isBatchResponse = <Result = unknown, Error = unknown>(\n\tresponse: JsonRpcResponse<Result, Error>,\n): response is JsonRpcBatchResponse<Result, Error> =>\n\tArray.isArray(response) && response.length > 0 && isValidResponse(response);\n\n// internal optional variable to increment and use for the jsonrpc `id`\nlet requestIdSeed: number | undefined;\n\n/**\n * Optionally use to make the jsonrpc `id` start from a specific number.\n * Without calling this function, the `id` will be filled with a Uuid.\n * But after this being called with a number, the `id` will be a number staring from the provided `start` variable.\n * However, if `undefined` was passed to this function, the `id` will be a Uuid again.\n * @param start - a number to start incrementing from.\n * \tOr `undefined` to use a new Uuid (this is the default behavior)\n */\nexport const setRequestIdStart = (start: number | undefined) => {\n\trequestIdSeed = start;\n};\n\nexport const toPayload = <ParamType = unknown[]>(\n\trequest: JsonRpcOptionalRequest<ParamType>,\n): JsonRpcPayload<ParamType> => {\n\tif (typeof requestIdSeed !== 'undefined') {\n\t\trequestIdSeed += 1;\n\t}\n\treturn {\n\t\tjsonrpc: request.jsonrpc ?? '2.0',\n\t\tid: request.id ?? requestIdSeed ?? uuidV4(),\n\t\tmethod: request.method,\n\t\tparams: request.params ?? undefined,\n\t};\n};\n\nexport const toBatchPayload = (requests: JsonRpcOptionalRequest<unknown>[]): JsonRpcBatchRequest =>\n\trequests.map(request => toPayload<unknown>(request)) as JsonRpcBatchRequest;\n\nexport const isBatchRequest = (\n\trequest: JsonRpcBatchRequest | JsonRpcRequest<unknown> | JsonRpcOptionalRequest<unknown>,\n): request is JsonRpcBatchRequest => Array.isArray(request) && request.length > 0;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}