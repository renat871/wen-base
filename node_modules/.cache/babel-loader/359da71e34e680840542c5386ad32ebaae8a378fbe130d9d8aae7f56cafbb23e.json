{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { decodeParameter, decodeParametersWith } from './parameters_api.js';\nvar STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];\nvar _decodeParameter = function _decodeParameter(inputType, clonedTopic) {\n  return inputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);\n};\n/**\n * Decodes ABI-encoded log data and indexed topic data.\n * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param data - The ABI byte code in the `data` field of a log.\n * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]\n * @returns - The result object containing the decoded parameters.\n *\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeLog(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *        indexed: true,\n *      },\n *      {\n *        type: \"uint8\",\n *        name: \"mySmallNumber\",\n *        indexed: true,\n *      },\n *    ],\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000\",\n *    [\n *      \"0x000000000000000000000000000000000000000000000000000000000000f310\",\n *      \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n *    ]\n *  );\n * > {\n *  '0': 'Hello%!',\n *  '1': 62224n,\n *  '2': 16n,\n *  __length__: 3,\n *  myString: 'Hello%!',\n *  myNumber: 62224n,\n *  mySmallNumber: 16n\n * }\n * ```\n */\nexport var decodeLog = function decodeLog(inputs, data, topics) {\n  var clonedTopics = Array.isArray(topics) ? topics : [topics];\n  var indexedInputs = {};\n  var nonIndexedInputs = {};\n  var _iterator = _createForOfIteratorHelper(inputs.entries()),\n    _step;\n  try {\n    for (_iterator.s(); !(_step = _iterator.n()).done;) {\n      var _step$value = _slicedToArray(_step.value, 2),\n        i = _step$value[0],\n        input = _step$value[1];\n      if (input.indexed) {\n        indexedInputs[i] = input;\n      } else {\n        nonIndexedInputs[i] = input;\n      }\n    }\n  } catch (err) {\n    _iterator.e(err);\n  } finally {\n    _iterator.f();\n  }\n  var decodedNonIndexedInputs = data ? decodeParametersWith(Object.values(nonIndexedInputs), data, true) : {\n    __length__: 0\n  };\n  // If topics are more than indexed inputs, that means first topic is the event signature\n  var offset = clonedTopics.length - Object.keys(indexedInputs).length;\n  var decodedIndexedInputs = Object.values(indexedInputs).map(function (input, index) {\n    return STATIC_TYPES.some(function (s) {\n      return input.type.startsWith(s);\n    }) ? _decodeParameter(input.type, clonedTopics[index + offset]) : clonedTopics[index + offset];\n  });\n  var returnValues = {\n    __length__: 0\n  };\n  var indexedCounter = 0;\n  var nonIndexedCounter = 0;\n  var _iterator2 = _createForOfIteratorHelper(inputs.entries()),\n    _step2;\n  try {\n    for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n      var _step2$value = _slicedToArray(_step2.value, 2),\n        _i = _step2$value[0],\n        res = _step2$value[1];\n      returnValues[_i] = res.type === 'string' ? '' : undefined;\n      if (indexedInputs[_i]) {\n        returnValues[_i] = decodedIndexedInputs[indexedCounter];\n        indexedCounter += 1;\n      }\n      if (nonIndexedInputs[_i]) {\n        returnValues[_i] = decodedNonIndexedInputs[String(nonIndexedCounter)];\n        nonIndexedCounter += 1;\n      }\n      if (res.name) {\n        returnValues[res.name] = returnValues[_i];\n      }\n      returnValues.__length__ += 1;\n    }\n  } catch (err) {\n    _iterator2.e(err);\n  } finally {\n    _iterator2.f();\n  }\n  return returnValues;\n};","map":{"version":3,"names":["decodeParameter","decodeParametersWith","STATIC_TYPES","_decodeParameter","inputType","clonedTopic","decodeLog","inputs","data","topics","clonedTopics","Array","isArray","indexedInputs","nonIndexedInputs","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","value","i","input","indexed","err","e","f","decodedNonIndexedInputs","Object","values","__length__","offset","length","keys","decodedIndexedInputs","map","index","some","type","startsWith","returnValues","indexedCounter","nonIndexedCounter","_iterator2","_step2","_step2$value","res","undefined","String","name"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-abi\\src\\api\\logs_api.ts"],"sourcesContent":["ï»¿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { HexString, AbiParameter, DecodedParams } from 'web3-types';\nimport { decodeParameter, decodeParametersWith } from './parameters_api.js';\n\nconst STATIC_TYPES = ['bool', 'string', 'int', 'uint', 'address', 'fixed', 'ufixed'];\n\nconst _decodeParameter = (inputType: string, clonedTopic: string) =>\n\tinputType === 'string' ? clonedTopic : decodeParameter(inputType, clonedTopic);\n\n/**\n * Decodes ABI-encoded log data and indexed topic data.\n * @param inputs - A {@link AbiParameter} input array. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param data - The ABI byte code in the `data` field of a log.\n * @param topics - An array with the index parameter topics of the log, without the topic[0] if its a non-anonymous event, otherwise with topic[0]\n * @returns - The result object containing the decoded parameters.\n *\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeLog(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *        indexed: true,\n *      },\n *      {\n *        type: \"uint8\",\n *        name: \"mySmallNumber\",\n *        indexed: true,\n *      },\n *    ],\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000748656c6c6f252100000000000000000000000000000000000000000000000000\",\n *    [\n *      \"0x000000000000000000000000000000000000000000000000000000000000f310\",\n *      \"0x0000000000000000000000000000000000000000000000000000000000000010\",\n *    ]\n *  );\n * > {\n *  '0': 'Hello%!',\n *  '1': 62224n,\n *  '2': 16n,\n *  __length__: 3,\n *  myString: 'Hello%!',\n *  myNumber: 62224n,\n *  mySmallNumber: 16n\n * }\n * ```\n */\nexport const decodeLog = <ReturnType extends DecodedParams>(\n\tinputs: Array<AbiParameter>,\n\tdata: HexString,\n\ttopics: string | string[],\n) => {\n\tconst clonedTopics = Array.isArray(topics) ? topics : [topics];\n\n\tconst indexedInputs: Record<number, AbiParameter> = {};\n\tconst nonIndexedInputs: Record<number, AbiParameter> = {};\n\n\tfor (const [i, input] of inputs.entries()) {\n\t\tif (input.indexed) {\n\t\t\tindexedInputs[i] = input;\n\t\t} else {\n\t\t\tnonIndexedInputs[i] = input;\n\t\t}\n\t}\n\n\tconst decodedNonIndexedInputs: DecodedParams = data\n\t\t? decodeParametersWith(Object.values(nonIndexedInputs), data, true)\n\t\t: { __length__: 0 };\n\n\t// If topics are more than indexed inputs, that means first topic is the event signature\n\tconst offset = clonedTopics.length - Object.keys(indexedInputs).length;\n\n\tconst decodedIndexedInputs = Object.values(indexedInputs).map((input, index) =>\n\t\tSTATIC_TYPES.some(s => input.type.startsWith(s))\n\t\t\t? _decodeParameter(input.type, clonedTopics[index + offset])\n\t\t\t: clonedTopics[index + offset],\n\t);\n\n\tconst returnValues: DecodedParams = { __length__: 0 };\n\n\tlet indexedCounter = 0;\n\tlet nonIndexedCounter = 0;\n\n\tfor (const [i, res] of inputs.entries()) {\n\t\treturnValues[i] = res.type === 'string' ? '' : undefined;\n\n\t\tif (indexedInputs[i]) {\n\t\t\treturnValues[i] = decodedIndexedInputs[indexedCounter];\n\t\t\tindexedCounter += 1;\n\t\t}\n\n\t\tif (nonIndexedInputs[i]) {\n\t\t\treturnValues[i] = decodedNonIndexedInputs[String(nonIndexedCounter)];\n\t\t\tnonIndexedCounter += 1;\n\t\t}\n\n\t\tif (res.name) {\n\t\t\treturnValues[res.name] = returnValues[i];\n\t\t}\n\n\t\treturnValues.__length__ += 1;\n\t}\n\n\treturn returnValues as ReturnType;\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}