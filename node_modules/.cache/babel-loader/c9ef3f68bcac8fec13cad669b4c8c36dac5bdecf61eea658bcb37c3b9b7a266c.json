{"ast":null,"code":"import _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nimport _wrapNativeSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js\";\nimport _objectSpread from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { ensureBytes } from './utils.js';\nimport { wNAF, validateBasic } from './curve.js';\nfunction validatePointOpts(curve) {\n  var opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    a: 'field',\n    b: 'field'\n  }, {\n    allowedPrivateKeyLengths: 'array',\n    wrapPrivateKey: 'boolean',\n    isTorsionFree: 'function',\n    clearCofactor: 'function',\n    allowInfinityPoint: 'boolean',\n    fromBytes: 'function',\n    toBytes: 'function'\n  });\n  var endo = opts.endo,\n    Fp = opts.Fp,\n    a = opts.a;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (typeof endo !== 'object' || typeof endo.beta !== 'bigint' || typeof endo.splitScalar !== 'function') {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze(_objectSpread({}, opts));\n}\n// ASN.1 DER encoding utilities\nvar b2n = ut.bytesToNumberBE,\n  h2b = ut.hexToBytes;\nexport var DER = {\n  // asn.1 DER encoding utils\n  Err: /*#__PURE__*/function (_Error) {\n    _inherits(DERErr, _Error);\n    var _super = _createSuper(DERErr);\n    function DERErr() {\n      var m = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n      _classCallCheck(this, DERErr);\n      return _super.call(this, m);\n    }\n    return _createClass(DERErr);\n  }( /*#__PURE__*/_wrapNativeSuper(Error)),\n  _parseInt: function _parseInt(data) {\n    var E = DER.Err;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    var len = data[1];\n    var res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 128) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 128)) throw new E('Invalid signature integer: unnecessary leading zero');\n    return {\n      d: b2n(res),\n      l: data.subarray(len + 2)\n    }; // d is data, l is left\n  },\n  toSig: function toSig(hex) {\n    // parse DER signature\n    var E = DER.Err;\n    var data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    var l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    var _DER$_parseInt = DER._parseInt(data.subarray(2)),\n      r = _DER$_parseInt.d,\n      sBytes = _DER$_parseInt.l;\n    var _DER$_parseInt2 = DER._parseInt(sBytes),\n      s = _DER$_parseInt2.d,\n      rBytesLeft = _DER$_parseInt2.l;\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return {\n      r: r,\n      s: s\n    };\n  },\n  hexFromSig: function hexFromSig(sig) {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    var slice = function slice(s) {\n      return Number.parseInt(s[0], 16) & 8 ? '00' + s : s;\n    };\n    var h = function h(num) {\n      var hex = num.toString(16);\n      return hex.length & 1 ? \"0\".concat(hex) : hex;\n    };\n    var s = slice(h(sig.s));\n    var r = slice(h(sig.r));\n    var shl = s.length / 2;\n    var rhl = r.length / 2;\n    var sl = h(shl);\n    var rl = h(rhl);\n    return \"30\".concat(h(rhl + shl + 4), \"02\").concat(rl).concat(r, \"02\").concat(sl).concat(s);\n  }\n};\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nvar _0n = BigInt(0),\n  _1n = BigInt(1),\n  _2n = BigInt(2),\n  _3n = BigInt(3),\n  _4n = BigInt(4);\nexport function weierstrassPoints(opts) {\n  var CURVE = validatePointOpts(opts);\n  var Fp = CURVE.Fp; // All curves has same field / group length as for now, but they can differ\n  var toBytes = CURVE.toBytes || function (c, point, isCompressed) {\n    var a = point.toAffine();\n    return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n  };\n  var fromBytes = CURVE.fromBytes || function (bytes) {\n    // const head = bytes[0];\n    var tail = bytes.subarray(1);\n    // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n    var x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n    var y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n    return {\n      x: x,\n      y: y\n    };\n  };\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x) {\n    var a = CURVE.a,\n      b = CURVE.b;\n    var x2 = Fp.sqr(x); // x * x\n    var x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx))) throw new Error('bad generator point: equation left != right');\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num) {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key) {\n    var lengths = CURVE.allowedPrivateKeyLengths,\n      nByteLength = CURVE.nByteLength,\n      wrapPrivateKey = CURVE.wrapPrivateKey,\n      n = CURVE.n;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    var num;\n    try {\n      num = typeof key === 'bigint' ? key : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(\"private key must be \".concat(nByteLength, \" bytes, hex or bigint, not \").concat(typeof key));\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n  var pointPrecomputes = new Map();\n  function assertPrjPoint(other) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  var Point = /*#__PURE__*/function () {\n    function Point(px, py, pz) {\n      _classCallCheck(this, Point);\n      this.px = px;\n      this.py = py;\n      this.pz = pz;\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    _createClass(Point, [{\n      key: \"x\",\n      get: function get() {\n        return this.toAffine().x;\n      }\n    }, {\n      key: \"y\",\n      get: function get() {\n        return this.toAffine().y;\n      }\n      /**\n       * Takes a bunch of Projective Points but executes only one\n       * inversion on all of them. Inversion is very slow operation,\n       * so this improves performance massively.\n       * Optimization: converts a list of projective points to a list of identical points with Z=1.\n       */\n    }, {\n      key: \"_setWindowSize\",\n      value:\n      // \"Private method\", don't use it directly\n      function _setWindowSize(windowSize) {\n        this._WINDOW_SIZE = windowSize;\n        pointPrecomputes.delete(this);\n      }\n      // A point on curve is valid if it conforms to equation.\n    }, {\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        // Zero is valid point too!\n        if (this.is0()) {\n          if (CURVE.allowInfinityPoint) return;\n          throw new Error('bad point: ZERO');\n        }\n        // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n        var _this$toAffine = this.toAffine(),\n          x = _this$toAffine.x,\n          y = _this$toAffine.y;\n        // Check if x, y are valid field elements\n        if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n        var left = Fp.sqr(y); // y²\n        var right = weierstrassEquation(x); // x³ + ax + b\n        if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n        if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n      }\n    }, {\n      key: \"hasEvenY\",\n      value: function hasEvenY() {\n        var _this$toAffine2 = this.toAffine(),\n          y = _this$toAffine2.y;\n        if (Fp.isOdd) return !Fp.isOdd(y);\n        throw new Error(\"Field doesn't support isOdd\");\n      }\n      /**\n       * Compare one point to another.\n       */\n    }, {\n      key: \"equals\",\n      value: function equals(other) {\n        assertPrjPoint(other);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X2 = other.px,\n          Y2 = other.py,\n          Z2 = other.pz;\n        var U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n        var U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n        return U1 && U2;\n      }\n      /**\n       * Flips point to one corresponding to (x, -y) in Affine coordinates.\n       */\n    }, {\n      key: \"negate\",\n      value: function negate() {\n        return new Point(this.px, Fp.neg(this.py), this.pz);\n      }\n      // Renes-Costello-Batina exception-free doubling formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 3\n      // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    }, {\n      key: \"double\",\n      value: function double() {\n        var a = CURVE.a,\n          b = CURVE.b;\n        var b3 = Fp.mul(b, _3n);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        var t0 = Fp.mul(X1, X1); // step 1\n        var t1 = Fp.mul(Y1, Y1);\n        var t2 = Fp.mul(Z1, Z1);\n        var t3 = Fp.mul(X1, Y1);\n        t3 = Fp.add(t3, t3); // step 5\n        Z3 = Fp.mul(X1, Z1);\n        Z3 = Fp.add(Z3, Z3);\n        X3 = Fp.mul(a, Z3);\n        Y3 = Fp.mul(b3, t2);\n        Y3 = Fp.add(X3, Y3); // step 10\n        X3 = Fp.sub(t1, Y3);\n        Y3 = Fp.add(t1, Y3);\n        Y3 = Fp.mul(X3, Y3);\n        X3 = Fp.mul(t3, X3);\n        Z3 = Fp.mul(b3, Z3); // step 15\n        t2 = Fp.mul(a, t2);\n        t3 = Fp.sub(t0, t2);\n        t3 = Fp.mul(a, t3);\n        t3 = Fp.add(t3, Z3);\n        Z3 = Fp.add(t0, t0); // step 20\n        t0 = Fp.add(Z3, t0);\n        t0 = Fp.add(t0, t2);\n        t0 = Fp.mul(t0, t3);\n        Y3 = Fp.add(Y3, t0);\n        t2 = Fp.mul(Y1, Z1); // step 25\n        t2 = Fp.add(t2, t2);\n        t0 = Fp.mul(t2, t3);\n        X3 = Fp.sub(X3, t0);\n        Z3 = Fp.mul(t2, t1);\n        Z3 = Fp.add(Z3, Z3); // step 30\n        Z3 = Fp.add(Z3, Z3);\n        return new Point(X3, Y3, Z3);\n      }\n      // Renes-Costello-Batina exception-free addition formula.\n      // There is 30% faster Jacobian formula, but it is not complete.\n      // https://eprint.iacr.org/2015/1060, algorithm 1\n      // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    }, {\n      key: \"add\",\n      value: function add(other) {\n        assertPrjPoint(other);\n        var X1 = this.px,\n          Y1 = this.py,\n          Z1 = this.pz;\n        var X2 = other.px,\n          Y2 = other.py,\n          Z2 = other.pz;\n        var X3 = Fp.ZERO,\n          Y3 = Fp.ZERO,\n          Z3 = Fp.ZERO; // prettier-ignore\n        var a = CURVE.a;\n        var b3 = Fp.mul(CURVE.b, _3n);\n        var t0 = Fp.mul(X1, X2); // step 1\n        var t1 = Fp.mul(Y1, Y2);\n        var t2 = Fp.mul(Z1, Z2);\n        var t3 = Fp.add(X1, Y1);\n        var t4 = Fp.add(X2, Y2); // step 5\n        t3 = Fp.mul(t3, t4);\n        t4 = Fp.add(t0, t1);\n        t3 = Fp.sub(t3, t4);\n        t4 = Fp.add(X1, Z1);\n        var t5 = Fp.add(X2, Z2); // step 10\n        t4 = Fp.mul(t4, t5);\n        t5 = Fp.add(t0, t2);\n        t4 = Fp.sub(t4, t5);\n        t5 = Fp.add(Y1, Z1);\n        X3 = Fp.add(Y2, Z2); // step 15\n        t5 = Fp.mul(t5, X3);\n        X3 = Fp.add(t1, t2);\n        t5 = Fp.sub(t5, X3);\n        Z3 = Fp.mul(a, t4);\n        X3 = Fp.mul(b3, t2); // step 20\n        Z3 = Fp.add(X3, Z3);\n        X3 = Fp.sub(t1, Z3);\n        Z3 = Fp.add(t1, Z3);\n        Y3 = Fp.mul(X3, Z3);\n        t1 = Fp.add(t0, t0); // step 25\n        t1 = Fp.add(t1, t0);\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.mul(b3, t4);\n        t1 = Fp.add(t1, t2);\n        t2 = Fp.sub(t0, t2); // step 30\n        t2 = Fp.mul(a, t2);\n        t4 = Fp.add(t4, t2);\n        t0 = Fp.mul(t1, t4);\n        Y3 = Fp.add(Y3, t0);\n        t0 = Fp.mul(t5, t4); // step 35\n        X3 = Fp.mul(t3, X3);\n        X3 = Fp.sub(X3, t0);\n        t0 = Fp.mul(t3, t1);\n        Z3 = Fp.mul(t5, Z3);\n        Z3 = Fp.add(Z3, t0); // step 40\n        return new Point(X3, Y3, Z3);\n      }\n    }, {\n      key: \"subtract\",\n      value: function subtract(other) {\n        return this.add(other.negate());\n      }\n    }, {\n      key: \"is0\",\n      value: function is0() {\n        return this.equals(Point.ZERO);\n      }\n    }, {\n      key: \"wNAF\",\n      value: function wNAF(n) {\n        return wnaf.wNAFCached(this, pointPrecomputes, n, function (comp) {\n          var toInv = Fp.invertBatch(comp.map(function (p) {\n            return p.pz;\n          }));\n          return comp.map(function (p, i) {\n            return p.toAffine(toInv[i]);\n          }).map(Point.fromAffine);\n        });\n      }\n      /**\n       * Non-constant-time multiplication. Uses double-and-add algorithm.\n       * It's faster, but should only be used when you don't care about\n       * an exposed private key e.g. sig verification, which works over *public* keys.\n       */\n    }, {\n      key: \"multiplyUnsafe\",\n      value: function multiplyUnsafe(n) {\n        var I = Point.ZERO;\n        if (n === _0n) return I;\n        assertGE(n); // Will throw on 0\n        if (n === _1n) return this;\n        var endo = CURVE.endo;\n        if (!endo) return wnaf.unsafeLadder(this, n);\n        // Apply endomorphism\n        var _endo$splitScalar = endo.splitScalar(n),\n          k1neg = _endo$splitScalar.k1neg,\n          k1 = _endo$splitScalar.k1,\n          k2neg = _endo$splitScalar.k2neg,\n          k2 = _endo$splitScalar.k2;\n        var k1p = I;\n        var k2p = I;\n        var d = this;\n        while (k1 > _0n || k2 > _0n) {\n          if (k1 & _1n) k1p = k1p.add(d);\n          if (k2 & _1n) k2p = k2p.add(d);\n          d = d.double();\n          k1 >>= _1n;\n          k2 >>= _1n;\n        }\n        if (k1neg) k1p = k1p.negate();\n        if (k2neg) k2p = k2p.negate();\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        return k1p.add(k2p);\n      }\n      /**\n       * Constant time multiplication.\n       * Uses wNAF method. Windowed method may be 10% faster,\n       * but takes 2x longer to generate and consumes 2x memory.\n       * Uses precomputes when available.\n       * Uses endomorphism for Koblitz curves.\n       * @param scalar by which the point would be multiplied\n       * @returns New point\n       */\n    }, {\n      key: \"multiply\",\n      value: function multiply(scalar) {\n        assertGE(scalar);\n        var n = scalar;\n        var point, fake; // Fake point is used to const-time mult\n        var endo = CURVE.endo;\n        if (endo) {\n          var _endo$splitScalar2 = endo.splitScalar(n),\n            k1neg = _endo$splitScalar2.k1neg,\n            k1 = _endo$splitScalar2.k1,\n            k2neg = _endo$splitScalar2.k2neg,\n            k2 = _endo$splitScalar2.k2;\n          var _this$wNAF = this.wNAF(k1),\n            k1p = _this$wNAF.p,\n            f1p = _this$wNAF.f;\n          var _this$wNAF2 = this.wNAF(k2),\n            k2p = _this$wNAF2.p,\n            f2p = _this$wNAF2.f;\n          k1p = wnaf.constTimeNegate(k1neg, k1p);\n          k2p = wnaf.constTimeNegate(k2neg, k2p);\n          k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n          point = k1p.add(k2p);\n          fake = f1p.add(f2p);\n        } else {\n          var _this$wNAF3 = this.wNAF(n),\n            p = _this$wNAF3.p,\n            f = _this$wNAF3.f;\n          point = p;\n          fake = f;\n        }\n        // Normalize `z` for both points, but return only real one\n        return Point.normalizeZ([point, fake])[0];\n      }\n      /**\n       * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n       * Not using Strauss-Shamir trick: precomputation tables are faster.\n       * The trick could be useful if both P and Q are not G (not in our case).\n       * @returns non-zero affine point\n       */\n    }, {\n      key: \"multiplyAndAddUnsafe\",\n      value: function multiplyAndAddUnsafe(Q, a, b) {\n        var G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n        var mul = function mul(P, a // Select faster multiply() method\n        ) {\n          return a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a);\n        };\n        var sum = mul(this, a).add(mul(Q, b));\n        return sum.is0() ? undefined : sum;\n      }\n      // Converts Projective point to affine (x, y) coordinates.\n      // Can accept precomputed Z^-1 - for example, from invertBatch.\n      // (x, y, z) ∋ (x=x/z, y=y/z)\n    }, {\n      key: \"toAffine\",\n      value: function toAffine(iz) {\n        var x = this.px,\n          y = this.py,\n          z = this.pz;\n        var is0 = this.is0();\n        // If invZ was 0, we return zero point. However we still want to execute\n        // all operations, so we replace invZ with a random number, 1.\n        if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n        var ax = Fp.mul(x, iz);\n        var ay = Fp.mul(y, iz);\n        var zz = Fp.mul(z, iz);\n        if (is0) return {\n          x: Fp.ZERO,\n          y: Fp.ZERO\n        };\n        if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n        return {\n          x: ax,\n          y: ay\n        };\n      }\n    }, {\n      key: \"isTorsionFree\",\n      value: function isTorsionFree() {\n        var cofactor = CURVE.h,\n          isTorsionFree = CURVE.isTorsionFree;\n        if (cofactor === _1n) return true; // No subgroups, always torsion-free\n        if (isTorsionFree) return isTorsionFree(Point, this);\n        throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n      }\n    }, {\n      key: \"clearCofactor\",\n      value: function clearCofactor() {\n        var cofactor = CURVE.h,\n          clearCofactor = CURVE.clearCofactor;\n        if (cofactor === _1n) return this; // Fast-path\n        if (clearCofactor) return clearCofactor(Point, this);\n        return this.multiplyUnsafe(CURVE.h);\n      }\n    }, {\n      key: \"toRawBytes\",\n      value: function toRawBytes() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        this.assertValidity();\n        return toBytes(Point, this, isCompressed);\n      }\n    }, {\n      key: \"toHex\",\n      value: function toHex() {\n        var isCompressed = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n        return ut.bytesToHex(this.toRawBytes(isCompressed));\n      }\n    }], [{\n      key: \"fromAffine\",\n      value: function fromAffine(p) {\n        var _ref = p || {},\n          x = _ref.x,\n          y = _ref.y;\n        if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n        if (p instanceof Point) throw new Error('projective point not allowed');\n        var is0 = function is0(i) {\n          return Fp.eql(i, Fp.ZERO);\n        };\n        // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n        if (is0(x) && is0(y)) return Point.ZERO;\n        return new Point(x, y, Fp.ONE);\n      }\n    }, {\n      key: \"normalizeZ\",\n      value: function normalizeZ(points) {\n        var toInv = Fp.invertBatch(points.map(function (p) {\n          return p.pz;\n        }));\n        return points.map(function (p, i) {\n          return p.toAffine(toInv[i]);\n        }).map(Point.fromAffine);\n      }\n      /**\n       * Converts hash string or Uint8Array to Point.\n       * @param hex short/long ECDSA hex\n       */\n    }, {\n      key: \"fromHex\",\n      value: function fromHex(hex) {\n        var P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n        P.assertValidity();\n        return P;\n      }\n      // Multiplies generator point by privateKey.\n    }, {\n      key: \"fromPrivateKey\",\n      value: function fromPrivateKey(privateKey) {\n        return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n      }\n    }]);\n    return Point;\n  }();\n  Point.BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n  Point.ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n  var _bits = CURVE.nBitLength;\n  var wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE: CURVE,\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    weierstrassEquation: weierstrassEquation,\n    isWithinCurveOrder: isWithinCurveOrder\n  };\n}\nfunction validateOpts(curve) {\n  var opts = validateBasic(curve);\n  ut.validateObject(opts, {\n    hash: 'hash',\n    hmac: 'function',\n    randomBytes: 'function'\n  }, {\n    bits2int: 'function',\n    bits2int_modN: 'function',\n    lowS: 'boolean'\n  });\n  return Object.freeze(_objectSpread({\n    lowS: true\n  }, opts));\n}\nexport function weierstrass(curveDef) {\n  var CURVE = validateOpts(curveDef);\n  var Fp = CURVE.Fp,\n    CURVE_ORDER = CURVE.n;\n  var compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  var uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n  function isValidFieldElement(num) {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n\n  function modN(a) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n  var _weierstrassPoints = weierstrassPoints(_objectSpread(_objectSpread({}, CURVE), {}, {\n      toBytes: function toBytes(c, point, isCompressed) {\n        var a = point.toAffine();\n        var x = Fp.toBytes(a.x);\n        var cat = ut.concatBytes;\n        if (isCompressed) {\n          return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n        } else {\n          return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n        }\n      },\n      fromBytes: function fromBytes(bytes) {\n        var len = bytes.length;\n        var head = bytes[0];\n        var tail = bytes.subarray(1);\n        // this.assertValidity() is done inside of fromHex\n        if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n          var x = ut.bytesToNumberBE(tail);\n          if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n          var y2 = weierstrassEquation(x); // y² = x³ + ax + b\n          var y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n          var isYOdd = (y & _1n) === _1n;\n          // ECDSA\n          var isHeadOdd = (head & 1) === 1;\n          if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n          return {\n            x: x,\n            y: y\n          };\n        } else if (len === uncompressedLen && head === 0x04) {\n          var _x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n          var _y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n          return {\n            x: _x,\n            y: _y\n          };\n        } else {\n          throw new Error(\"Point of length \".concat(len, \" was invalid. Expected \").concat(compressedLen, \" compressed bytes or \").concat(uncompressedLen, \" uncompressed bytes\"));\n        }\n      }\n    })),\n    Point = _weierstrassPoints.ProjectivePoint,\n    normPrivateKeyToScalar = _weierstrassPoints.normPrivateKeyToScalar,\n    weierstrassEquation = _weierstrassPoints.weierstrassEquation,\n    isWithinCurveOrder = _weierstrassPoints.isWithinCurveOrder;\n  var numToNByteStr = function numToNByteStr(num) {\n    return ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n  };\n  function isBiggerThanHalfOrder(number) {\n    var HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n  function normalizeS(s) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  var slcNum = function slcNum(b, from, to) {\n    return ut.bytesToNumberBE(b.slice(from, to));\n  };\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  var Signature = /*#__PURE__*/function () {\n    function Signature(r, s, recovery) {\n      _classCallCheck(this, Signature);\n      this.r = r;\n      this.s = s;\n      this.recovery = recovery;\n      this.assertValidity();\n    }\n    // pair (bytes of r, bytes of s)\n    _createClass(Signature, [{\n      key: \"assertValidity\",\n      value: function assertValidity() {\n        // can use assertGE here\n        if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n        if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n      }\n    }, {\n      key: \"addRecoveryBit\",\n      value: function addRecoveryBit(recovery) {\n        return new Signature(this.r, this.s, recovery);\n      }\n    }, {\n      key: \"recoverPublicKey\",\n      value: function recoverPublicKey(msgHash) {\n        var r = this.r,\n          s = this.s,\n          rec = this.recovery;\n        var h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n        if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n        var radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n        if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n        var prefix = (rec & 1) === 0 ? '02' : '03';\n        var R = Point.fromHex(prefix + numToNByteStr(radj));\n        var ir = invN(radj); // r^-1\n        var u1 = modN(-h * ir); // -hr^-1\n        var u2 = modN(s * ir); // sr^-1\n        var Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n        if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n        Q.assertValidity();\n        return Q;\n      }\n      // Signatures should be low-s, to prevent malleability.\n    }, {\n      key: \"hasHighS\",\n      value: function hasHighS() {\n        return isBiggerThanHalfOrder(this.s);\n      }\n    }, {\n      key: \"normalizeS\",\n      value: function normalizeS() {\n        return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n      }\n      // DER-encoded\n    }, {\n      key: \"toDERRawBytes\",\n      value: function toDERRawBytes() {\n        return ut.hexToBytes(this.toDERHex());\n      }\n    }, {\n      key: \"toDERHex\",\n      value: function toDERHex() {\n        return DER.hexFromSig({\n          r: this.r,\n          s: this.s\n        });\n      }\n      // padded bytes of r, then padded bytes of s\n    }, {\n      key: \"toCompactRawBytes\",\n      value: function toCompactRawBytes() {\n        return ut.hexToBytes(this.toCompactHex());\n      }\n    }, {\n      key: \"toCompactHex\",\n      value: function toCompactHex() {\n        return numToNByteStr(this.r) + numToNByteStr(this.s);\n      }\n    }], [{\n      key: \"fromCompact\",\n      value: function fromCompact(hex) {\n        var l = CURVE.nByteLength;\n        hex = ensureBytes('compactSignature', hex, l * 2);\n        return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n      }\n      // DER encoded ECDSA signature\n      // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    }, {\n      key: \"fromDER\",\n      value: function fromDER(hex) {\n        var _DER$toSig = DER.toSig(ensureBytes('DER', hex)),\n          r = _DER$toSig.r,\n          s = _DER$toSig.s;\n        return new Signature(r, s);\n      }\n    }]);\n    return Signature;\n  }();\n  var utils = {\n    isValidPrivateKey: function isValidPrivateKey(privateKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: function randomPrivateKey() {\n      var rand = CURVE.randomBytes(Fp.BYTES + 8);\n      var num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute: function precompute() {\n      var windowSize = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 8;\n      var point = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : Point.BASE;\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    }\n  };\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey) {\n    var isCompressed = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item) {\n    var arr = item instanceof Uint8Array;\n    var str = typeof item === 'string';\n    var len = (arr || str) && item.length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA, publicB) {\n    var isCompressed = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    var b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  var bits2int = CURVE.bits2int || function (bytes) {\n    // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n    // for some cases, since bytes.length * 8 is not actual bitLength.\n    var num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n    var delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n    return delta > 0 ? num >> BigInt(delta) : num;\n  };\n  var bits2int_modN = CURVE.bits2int_modN || function (bytes) {\n    return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n  };\n  // NOTE: pads output with zero as per spec\n  var ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num) {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK)) throw new Error(\"bigint expected < 2^\".concat(CURVE.nBitLength));\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash, privateKey) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    if (['recovered', 'canonical'].some(function (k) {\n      return k in opts;\n    })) throw new Error('sign() legacy options not supported');\n    var hash = CURVE.hash,\n      randomBytes = CURVE.randomBytes;\n    var lowS = opts.lowS,\n      prehash = opts.prehash,\n      ent = opts.extraEntropy; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    var h1int = bits2int_modN(msgHash);\n    var d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    var seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      var e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n\n    var seed = ut.concatBytes.apply(ut, seedArgs); // Step D of RFC6979 3.2\n    var m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes) {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      var k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      var ik = invN(k); // k^-1 mod n\n      var q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      var r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      var s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      var recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      var normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n\n      return new Signature(r, normS, recovery); // use normS, not s\n    }\n\n    return {\n      seed: seed,\n      k2sig: k2sig\n    };\n  }\n  var defaultSigOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  var defaultVerOpts = {\n    lowS: CURVE.lowS,\n    prehash: false\n  };\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash, privKey) {\n    var opts = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : defaultSigOpts;\n    var _prepSig = prepSig(msgHash, privKey, opts),\n      seed = _prepSig.seed,\n      k2sig = _prepSig.k2sig; // Steps A, D of RFC6979 3.2.\n    var C = CURVE;\n    var drbg = ut.createHmacDrbg(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(signature, msgHash, publicKey) {\n    var _Point$BASE$multiplyA;\n    var opts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : defaultVerOpts;\n    var sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    var lowS = opts.lowS,\n      prehash = opts.prehash;\n    var _sig = undefined;\n    var P;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        var _r = sg.r,\n          _s = sg.s;\n        _sig = new Signature(_r, _s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if (error.message === 'PARSE') throw new Error(\"signature must be Signature instance, Uint8Array or hex string\");\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    var _sig2 = _sig,\n      r = _sig2.r,\n      s = _sig2.s;\n    var h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    var is = invN(s); // s^-1\n    var u1 = modN(h * is); // u1 = hs^-1 mod n\n    var u2 = modN(r * is); // u2 = rs^-1 mod n\n    var R = (_Point$BASE$multiplyA = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)) === null || _Point$BASE$multiplyA === void 0 ? void 0 : _Point$BASE$multiplyA.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    var v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE: CURVE,\n    getPublicKey: getPublicKey,\n    getSharedSecret: getSharedSecret,\n    sign: sign,\n    verify: verify,\n    ProjectivePoint: Point,\n    Signature: Signature,\n    utils: utils\n  };\n}\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio(Fp, Z) {\n  // Generic implementation\n  var q = Fp.ORDER;\n  var l = _0n;\n  for (var o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  var c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  var _2n_pow_c1_1 = _2n << c1 - _1n - _1n;\n  var _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  var c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  var c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  var c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  var c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  var c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  var c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  var sqrtRatio = function sqrtRatio(u, v) {\n    var tv1 = c6; // 1. tv1 = c6\n    var tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    var tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    var tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    var tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    var isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (var i = c1; i > _1n; i--) {\n      var _tv = i - _2n; // 18.    tv5 = i - 2\n      _tv = _2n << _tv - _1n; // 19.    tv5 = 2^tv5\n      var tvv5 = Fp.pow(tv4, _tv); // 20.    tv5 = tv4^tv5\n      var e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n\n    return {\n      isValid: isQR,\n      value: tv3\n    };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    var _c = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    var _c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = function sqrtRatio(u, v) {\n      var tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      var tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      var y1 = Fp.pow(tv1, _c); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      var y2 = Fp.mul(y1, _c2); // 6. y2 = y1 * c2\n      var tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      var isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      var y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return {\n        isValid: isQR,\n        value: y\n      }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nexport function mapToCurveSimpleSWU(Fp, opts) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z)) throw new Error('mapToCurveSimpleSWU: invalid opts');\n  var sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return function (u) {\n    // prettier-ignore\n    var tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    var _sqrtRatio = sqrtRatio(tv2, tv6),\n      isValid = _sqrtRatio.isValid,\n      value = _sqrtRatio.value; // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    var e1 = Fp.isOdd(u) === Fp.isOdd(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return {\n      x: x,\n      y: y\n    };\n  };\n}","map":{"version":3,"names":["mod","ut","ensureBytes","wNAF","validateBasic","validatePointOpts","curve","opts","validateObject","a","b","allowedPrivateKeyLengths","wrapPrivateKey","isTorsionFree","clearCofactor","allowInfinityPoint","fromBytes","toBytes","endo","Fp","eql","ZERO","Error","beta","splitScalar","Object","freeze","_objectSpread","b2n","bytesToNumberBE","h2b","hexToBytes","DER","Err","_Error","_inherits","DERErr","_super","_createSuper","m","arguments","length","undefined","_classCallCheck","call","_createClass","_wrapNativeSuper","_parseInt","data","E","len","res","subarray","d","l","toSig","hex","Uint8Array","_DER$_parseInt","r","sBytes","_DER$_parseInt2","s","rBytesLeft","hexFromSig","sig","slice","Number","parseInt","h","num","toString","concat","shl","rhl","sl","rl","_0n","BigInt","_1n","_2n","_3n","_4n","weierstrassPoints","CURVE","c","point","isCompressed","toAffine","concatBytes","from","x","y","bytes","tail","BYTES","weierstrassEquation","x2","sqr","x3","mul","add","Gy","Gx","isWithinCurveOrder","n","assertGE","normPrivateKeyToScalar","key","lengths","nByteLength","bytesToHex","includes","padStart","error","pointPrecomputes","Map","assertPrjPoint","other","Point","px","py","pz","isValid","get","value","_setWindowSize","windowSize","_WINDOW_SIZE","delete","assertValidity","is0","_this$toAffine","left","right","hasEvenY","_this$toAffine2","isOdd","equals","X1","Y1","Z1","X2","Y2","Z2","U1","U2","negate","neg","double","b3","X3","Y3","Z3","t0","t1","t2","t3","sub","t4","t5","subtract","wnaf","wNAFCached","comp","toInv","invertBatch","map","p","i","fromAffine","multiplyUnsafe","I","unsafeLadder","_endo$splitScalar","k1neg","k1","k2neg","k2","k1p","k2p","multiply","scalar","fake","_endo$splitScalar2","_this$wNAF","f1p","f","_this$wNAF2","f2p","constTimeNegate","_this$wNAF3","normalizeZ","multiplyAndAddUnsafe","Q","G","BASE","P","sum","iz","z","ONE","inv","ax","ay","zz","cofactor","toRawBytes","toHex","_ref","points","fromHex","fromPrivateKey","privateKey","_bits","nBitLength","Math","ceil","ProjectivePoint","validateOpts","hash","hmac","randomBytes","bits2int","bits2int_modN","lowS","weierstrass","curveDef","CURVE_ORDER","compressedLen","uncompressedLen","isValidFieldElement","ORDER","modN","invN","invert","_weierstrassPoints","cat","head","y2","sqrt","isYOdd","isHeadOdd","numToNByteStr","numberToBytesBE","isBiggerThanHalfOrder","number","HALF","normalizeS","slcNum","to","Signature","recovery","addRecoveryBit","recoverPublicKey","msgHash","rec","radj","prefix","R","ir","u1","u2","hasHighS","toDERRawBytes","toDERHex","toCompactRawBytes","toCompactHex","fromCompact","fromDER","_DER$toSig","utils","isValidPrivateKey","randomPrivateKey","rand","hashToPrivateScalar","precompute","getPublicKey","isProbPub","item","arr","str","getSharedSecret","privateA","publicB","delta","ORDER_MASK","bitMask","int2octets","prepSig","defaultSigOpts","some","k","prehash","ent","extraEntropy","h1int","seedArgs","e","push","seed","apply","k2sig","kBytes","ik","q","normS","defaultVerOpts","sign","privKey","_prepSig","C","drbg","createHmacDrbg","outputLen","verify","signature","publicKey","_Point$BASE$multiplyA","sg","_sig","derError","message","_sig2","is","v","SWUFpSqrtRatio","Z","o","c1","_2n_pow_c1_1","_2n_pow_c1","c2","c3","c4","c5","c6","pow","c7","sqrtRatio","u","tv1","tv2","tv3","tv5","tv4","isQR","cmov","tvv5","e1","y1","mapToCurveSimpleSWU","validateField","A","B","tv6","_sqrtRatio","div"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\@noble\\curves\\src\\abstract\\weierstrass.ts"],"sourcesContent":["/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// Short Weierstrass curve. The formula is: y² = x³ + ax + b\nimport * as mod from './modular.js';\nimport * as ut from './utils.js';\nimport { CHash, Hex, PrivKey, ensureBytes } from './utils.js';\nimport { Group, GroupConstructor, wNAF, BasicCurve, validateBasic, AffinePoint } from './curve.js';\n\nexport type { AffinePoint };\ntype HmacFnSync = (key: Uint8Array, ...messages: Uint8Array[]) => Uint8Array;\ntype EndomorphismOpts = {\n  beta: bigint;\n  splitScalar: (k: bigint) => { k1neg: boolean; k1: bigint; k2neg: boolean; k2: bigint };\n};\nexport type BasicWCurve<T> = BasicCurve<T> & {\n  // Params: a, b\n  a: T;\n  b: T;\n\n  // Optional params\n  allowedPrivateKeyLengths?: readonly number[]; // for P521\n  wrapPrivateKey?: boolean; // bls12-381 requires mod(n) instead of rejecting keys >= n\n  endo?: EndomorphismOpts; // Endomorphism options for Koblitz curves\n  // When a cofactor != 1, there can be an effective methods to:\n  // 1. Determine whether a point is torsion-free\n  isTorsionFree?: (c: ProjConstructor<T>, point: ProjPointType<T>) => boolean;\n  // 2. Clear torsion component\n  clearCofactor?: (c: ProjConstructor<T>, point: ProjPointType<T>) => ProjPointType<T>;\n};\n\ntype Entropy = Hex | true;\nexport type SignOpts = { lowS?: boolean; extraEntropy?: Entropy; prehash?: boolean };\nexport type VerOpts = { lowS?: boolean; prehash?: boolean };\n\n/**\n * ### Design rationale for types\n *\n * * Interaction between classes from different curves should fail:\n *   `k256.Point.BASE.add(p256.Point.BASE)`\n * * For this purpose we want to use `instanceof` operator, which is fast and works during runtime\n * * Different calls of `curve()` would return different classes -\n *   `curve(params) !== curve(params)`: if somebody decided to monkey-patch their curve,\n *   it won't affect others\n *\n * TypeScript can't infer types for classes created inside a function. Classes is one instance of nominative types in TypeScript and interfaces only check for shape, so it's hard to create unique type for every function call.\n *\n * We can use generic types via some param, like curve opts, but that would:\n *     1. Enable interaction between `curve(params)` and `curve(params)` (curves of same params)\n *     which is hard to debug.\n *     2. Params can be generic and we can't enforce them to be constant value:\n *     if somebody creates curve from non-constant params,\n *     it would be allowed to interact with other curves with non-constant params\n *\n * TODO: https://www.typescriptlang.org/docs/handbook/release-notes/typescript-2-7.html#unique-symbol\n */\n\n// Instance for 3d XYZ points\nexport interface ProjPointType<T> extends Group<ProjPointType<T>> {\n  readonly px: T;\n  readonly py: T;\n  readonly pz: T;\n  get x(): T;\n  get y(): T;\n  multiply(scalar: bigint): ProjPointType<T>;\n  toAffine(iz?: T): AffinePoint<T>;\n  isTorsionFree(): boolean;\n  clearCofactor(): ProjPointType<T>;\n  assertValidity(): void;\n  hasEvenY(): boolean;\n  toRawBytes(isCompressed?: boolean): Uint8Array;\n  toHex(isCompressed?: boolean): string;\n\n  multiplyUnsafe(scalar: bigint): ProjPointType<T>;\n  multiplyAndAddUnsafe(Q: ProjPointType<T>, a: bigint, b: bigint): ProjPointType<T> | undefined;\n  _setWindowSize(windowSize: number): void;\n}\n// Static methods for 3d XYZ points\nexport interface ProjConstructor<T> extends GroupConstructor<ProjPointType<T>> {\n  new (x: T, y: T, z: T): ProjPointType<T>;\n  fromAffine(p: AffinePoint<T>): ProjPointType<T>;\n  fromHex(hex: Hex): ProjPointType<T>;\n  fromPrivateKey(privateKey: PrivKey): ProjPointType<T>;\n  normalizeZ(points: ProjPointType<T>[]): ProjPointType<T>[];\n}\n\nexport type CurvePointsType<T> = BasicWCurve<T> & {\n  // Bytes\n  fromBytes?: (bytes: Uint8Array) => AffinePoint<T>;\n  toBytes?: (c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => Uint8Array;\n};\n\nfunction validatePointOpts<T>(curve: CurvePointsType<T>) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      a: 'field',\n      b: 'field',\n    },\n    {\n      allowedPrivateKeyLengths: 'array',\n      wrapPrivateKey: 'boolean',\n      isTorsionFree: 'function',\n      clearCofactor: 'function',\n      allowInfinityPoint: 'boolean',\n      fromBytes: 'function',\n      toBytes: 'function',\n    }\n  );\n  const { endo, Fp, a } = opts;\n  if (endo) {\n    if (!Fp.eql(a, Fp.ZERO)) {\n      throw new Error('Endomorphism can only be defined for Koblitz curves that have a=0');\n    }\n    if (\n      typeof endo !== 'object' ||\n      typeof endo.beta !== 'bigint' ||\n      typeof endo.splitScalar !== 'function'\n    ) {\n      throw new Error('Expected endomorphism with beta: bigint and splitScalar: function');\n    }\n  }\n  return Object.freeze({ ...opts } as const);\n}\n\nexport type CurvePointsRes<T> = {\n  ProjectivePoint: ProjConstructor<T>;\n  normPrivateKeyToScalar: (key: PrivKey) => bigint;\n  weierstrassEquation: (x: T) => T;\n  isWithinCurveOrder: (num: bigint) => boolean;\n};\n\n// ASN.1 DER encoding utilities\nconst { bytesToNumberBE: b2n, hexToBytes: h2b } = ut;\nexport const DER = {\n  // asn.1 DER encoding utils\n  Err: class DERErr extends Error {\n    constructor(m = '') {\n      super(m);\n    }\n  },\n  _parseInt(data: Uint8Array): { d: bigint; l: Uint8Array } {\n    const { Err: E } = DER;\n    if (data.length < 2 || data[0] !== 0x02) throw new E('Invalid signature integer tag');\n    const len = data[1];\n    const res = data.subarray(2, len + 2);\n    if (!len || res.length !== len) throw new E('Invalid signature integer: wrong length');\n    // https://crypto.stackexchange.com/a/57734 Leftmost bit of first byte is 'negative' flag,\n    // since we always use positive integers here. It must always be empty:\n    // - add zero byte if exists\n    // - if next byte doesn't have a flag, leading zero is not allowed (minimal encoding)\n    if (res[0] & 0b10000000) throw new E('Invalid signature integer: negative');\n    if (res[0] === 0x00 && !(res[1] & 0b10000000))\n      throw new E('Invalid signature integer: unnecessary leading zero');\n    return { d: b2n(res), l: data.subarray(len + 2) }; // d is data, l is left\n  },\n  toSig(hex: string | Uint8Array): { r: bigint; s: bigint } {\n    // parse DER signature\n    const { Err: E } = DER;\n    const data = typeof hex === 'string' ? h2b(hex) : hex;\n    if (!(data instanceof Uint8Array)) throw new Error('ui8a expected');\n    let l = data.length;\n    if (l < 2 || data[0] != 0x30) throw new E('Invalid signature tag');\n    if (data[1] !== l - 2) throw new E('Invalid signature: incorrect length');\n    const { d: r, l: sBytes } = DER._parseInt(data.subarray(2));\n    const { d: s, l: rBytesLeft } = DER._parseInt(sBytes);\n    if (rBytesLeft.length) throw new E('Invalid signature: left bytes after parsing');\n    return { r, s };\n  },\n  hexFromSig(sig: { r: bigint; s: bigint }): string {\n    // Add leading zero if first byte has negative bit enabled. More details in '_parseInt'\n    const slice = (s: string): string => (Number.parseInt(s[0], 16) & 0b1000 ? '00' + s : s);\n    const h = (num: number | bigint) => {\n      const hex = num.toString(16);\n      return hex.length & 1 ? `0${hex}` : hex;\n    };\n    const s = slice(h(sig.s));\n    const r = slice(h(sig.r));\n    const shl = s.length / 2;\n    const rhl = r.length / 2;\n    const sl = h(shl);\n    const rl = h(rhl);\n    return `30${h(rhl + shl + 4)}02${rl}${r}02${sl}${s}`;\n  },\n};\n\n// Be friendly to bad ECMAScript parsers by not using bigint literals\n// prettier-ignore\nconst _0n = BigInt(0), _1n = BigInt(1), _2n = BigInt(2), _3n = BigInt(3), _4n = BigInt(4);\n\nexport function weierstrassPoints<T>(opts: CurvePointsType<T>) {\n  const CURVE = validatePointOpts(opts);\n  const { Fp } = CURVE; // All curves has same field / group length as for now, but they can differ\n\n  const toBytes =\n    CURVE.toBytes ||\n    ((c: ProjConstructor<T>, point: ProjPointType<T>, isCompressed: boolean) => {\n      const a = point.toAffine();\n      return ut.concatBytes(Uint8Array.from([0x04]), Fp.toBytes(a.x), Fp.toBytes(a.y));\n    });\n  const fromBytes =\n    CURVE.fromBytes ||\n    ((bytes: Uint8Array) => {\n      // const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // if (head !== 0x04) throw new Error('Only non-compressed encoding is supported');\n      const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n      const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n      return { x, y };\n    });\n\n  /**\n   * y² = x³ + ax + b: Short weierstrass curve formula\n   * @returns y²\n   */\n  function weierstrassEquation(x: T): T {\n    const { a, b } = CURVE;\n    const x2 = Fp.sqr(x); // x * x\n    const x3 = Fp.mul(x2, x); // x2 * x\n    return Fp.add(Fp.add(x3, Fp.mul(x, a)), b); // x3 + a * x + b\n  }\n  // Validate whether the passed curve params are valid.\n  // We check if curve equation works for generator point.\n  // `assertValidity()` won't work: `isTorsionFree()` is not available at this point in bls12-381.\n  // ProjectivePoint class has not been initialized yet.\n  if (!Fp.eql(Fp.sqr(CURVE.Gy), weierstrassEquation(CURVE.Gx)))\n    throw new Error('bad generator point: equation left != right');\n\n  // Valid group elements reside in range 1..n-1\n  function isWithinCurveOrder(num: bigint): boolean {\n    return typeof num === 'bigint' && _0n < num && num < CURVE.n;\n  }\n  function assertGE(num: bigint) {\n    if (!isWithinCurveOrder(num)) throw new Error('Expected valid bigint: 0 < bigint < curve.n');\n  }\n  // Validates if priv key is valid and converts it to bigint.\n  // Supports options allowedPrivateKeyLengths and wrapPrivateKey.\n  function normPrivateKeyToScalar(key: PrivKey): bigint {\n    const { allowedPrivateKeyLengths: lengths, nByteLength, wrapPrivateKey, n } = CURVE;\n    if (lengths && typeof key !== 'bigint') {\n      if (key instanceof Uint8Array) key = ut.bytesToHex(key);\n      // Normalize to hex string, pad. E.g. P521 would norm 130-132 char hex to 132-char bytes\n      if (typeof key !== 'string' || !lengths.includes(key.length)) throw new Error('Invalid key');\n      key = key.padStart(nByteLength * 2, '0');\n    }\n    let num: bigint;\n    try {\n      num =\n        typeof key === 'bigint'\n          ? key\n          : ut.bytesToNumberBE(ensureBytes('private key', key, nByteLength));\n    } catch (error) {\n      throw new Error(`private key must be ${nByteLength} bytes, hex or bigint, not ${typeof key}`);\n    }\n    if (wrapPrivateKey) num = mod.mod(num, n); // disabled by default, enabled for BLS\n    assertGE(num); // num in range [1..N-1]\n    return num;\n  }\n\n  const pointPrecomputes = new Map<Point, Point[]>();\n  function assertPrjPoint(other: unknown) {\n    if (!(other instanceof Point)) throw new Error('ProjectivePoint expected');\n  }\n  /**\n   * Projective Point works in 3d / projective (homogeneous) coordinates: (x, y, z) ∋ (x=x/z, y=y/z)\n   * Default Point works in 2d / affine coordinates: (x, y)\n   * We're doing calculations in projective, because its operations don't require costly inversion.\n   */\n  class Point implements ProjPointType<T> {\n    static readonly BASE = new Point(CURVE.Gx, CURVE.Gy, Fp.ONE);\n    static readonly ZERO = new Point(Fp.ZERO, Fp.ONE, Fp.ZERO);\n\n    constructor(readonly px: T, readonly py: T, readonly pz: T) {\n      if (px == null || !Fp.isValid(px)) throw new Error('x required');\n      if (py == null || !Fp.isValid(py)) throw new Error('y required');\n      if (pz == null || !Fp.isValid(pz)) throw new Error('z required');\n    }\n\n    // Does not validate if the point is on-curve.\n    // Use fromHex instead, or call assertValidity() later.\n    static fromAffine(p: AffinePoint<T>): Point {\n      const { x, y } = p || {};\n      if (!p || !Fp.isValid(x) || !Fp.isValid(y)) throw new Error('invalid affine point');\n      if (p instanceof Point) throw new Error('projective point not allowed');\n      const is0 = (i: T) => Fp.eql(i, Fp.ZERO);\n      // fromAffine(x:0, y:0) would produce (x:0, y:0, z:1), but we need (x:0, y:1, z:0)\n      if (is0(x) && is0(y)) return Point.ZERO;\n      return new Point(x, y, Fp.ONE);\n    }\n\n    get x(): T {\n      return this.toAffine().x;\n    }\n    get y(): T {\n      return this.toAffine().y;\n    }\n\n    /**\n     * Takes a bunch of Projective Points but executes only one\n     * inversion on all of them. Inversion is very slow operation,\n     * so this improves performance massively.\n     * Optimization: converts a list of projective points to a list of identical points with Z=1.\n     */\n    static normalizeZ(points: Point[]): Point[] {\n      const toInv = Fp.invertBatch(points.map((p) => p.pz));\n      return points.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n    }\n\n    /**\n     * Converts hash string or Uint8Array to Point.\n     * @param hex short/long ECDSA hex\n     */\n    static fromHex(hex: Hex): Point {\n      const P = Point.fromAffine(fromBytes(ensureBytes('pointHex', hex)));\n      P.assertValidity();\n      return P;\n    }\n\n    // Multiplies generator point by privateKey.\n    static fromPrivateKey(privateKey: PrivKey) {\n      return Point.BASE.multiply(normPrivateKeyToScalar(privateKey));\n    }\n\n    // We calculate precomputes for elliptic curve point multiplication\n    // using windowed method. This specifies window size and\n    // stores precomputed values. Usually only base point would be precomputed.\n    _WINDOW_SIZE?: number;\n\n    // \"Private method\", don't use it directly\n    _setWindowSize(windowSize: number) {\n      this._WINDOW_SIZE = windowSize;\n      pointPrecomputes.delete(this);\n    }\n\n    // A point on curve is valid if it conforms to equation.\n    assertValidity(): void {\n      // Zero is valid point too!\n      if (this.is0()) {\n        if (CURVE.allowInfinityPoint) return;\n        throw new Error('bad point: ZERO');\n      }\n      // Some 3rd-party test vectors require different wording between here & `fromCompressedHex`\n      const { x, y } = this.toAffine();\n      // Check if x, y are valid field elements\n      if (!Fp.isValid(x) || !Fp.isValid(y)) throw new Error('bad point: x or y not FE');\n      const left = Fp.sqr(y); // y²\n      const right = weierstrassEquation(x); // x³ + ax + b\n      if (!Fp.eql(left, right)) throw new Error('bad point: equation left != right');\n      if (!this.isTorsionFree()) throw new Error('bad point: not in prime-order subgroup');\n    }\n    hasEvenY(): boolean {\n      const { y } = this.toAffine();\n      if (Fp.isOdd) return !Fp.isOdd(y);\n      throw new Error(\"Field doesn't support isOdd\");\n    }\n\n    /**\n     * Compare one point to another.\n     */\n    equals(other: Point): boolean {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      const U1 = Fp.eql(Fp.mul(X1, Z2), Fp.mul(X2, Z1));\n      const U2 = Fp.eql(Fp.mul(Y1, Z2), Fp.mul(Y2, Z1));\n      return U1 && U2;\n    }\n\n    /**\n     * Flips point to one corresponding to (x, -y) in Affine coordinates.\n     */\n    negate(): Point {\n      return new Point(this.px, Fp.neg(this.py), this.pz);\n    }\n\n    // Renes-Costello-Batina exception-free doubling formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 3\n    // Cost: 8M + 3S + 3*a + 2*b3 + 15add.\n    double() {\n      const { a, b } = CURVE;\n      const b3 = Fp.mul(b, _3n);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      let t0 = Fp.mul(X1, X1); // step 1\n      let t1 = Fp.mul(Y1, Y1);\n      let t2 = Fp.mul(Z1, Z1);\n      let t3 = Fp.mul(X1, Y1);\n      t3 = Fp.add(t3, t3); // step 5\n      Z3 = Fp.mul(X1, Z1);\n      Z3 = Fp.add(Z3, Z3);\n      X3 = Fp.mul(a, Z3);\n      Y3 = Fp.mul(b3, t2);\n      Y3 = Fp.add(X3, Y3); // step 10\n      X3 = Fp.sub(t1, Y3);\n      Y3 = Fp.add(t1, Y3);\n      Y3 = Fp.mul(X3, Y3);\n      X3 = Fp.mul(t3, X3);\n      Z3 = Fp.mul(b3, Z3); // step 15\n      t2 = Fp.mul(a, t2);\n      t3 = Fp.sub(t0, t2);\n      t3 = Fp.mul(a, t3);\n      t3 = Fp.add(t3, Z3);\n      Z3 = Fp.add(t0, t0); // step 20\n      t0 = Fp.add(Z3, t0);\n      t0 = Fp.add(t0, t2);\n      t0 = Fp.mul(t0, t3);\n      Y3 = Fp.add(Y3, t0);\n      t2 = Fp.mul(Y1, Z1); // step 25\n      t2 = Fp.add(t2, t2);\n      t0 = Fp.mul(t2, t3);\n      X3 = Fp.sub(X3, t0);\n      Z3 = Fp.mul(t2, t1);\n      Z3 = Fp.add(Z3, Z3); // step 30\n      Z3 = Fp.add(Z3, Z3);\n      return new Point(X3, Y3, Z3);\n    }\n\n    // Renes-Costello-Batina exception-free addition formula.\n    // There is 30% faster Jacobian formula, but it is not complete.\n    // https://eprint.iacr.org/2015/1060, algorithm 1\n    // Cost: 12M + 0S + 3*a + 3*b3 + 23add.\n    add(other: Point): Point {\n      assertPrjPoint(other);\n      const { px: X1, py: Y1, pz: Z1 } = this;\n      const { px: X2, py: Y2, pz: Z2 } = other;\n      let X3 = Fp.ZERO, Y3 = Fp.ZERO, Z3 = Fp.ZERO; // prettier-ignore\n      const a = CURVE.a;\n      const b3 = Fp.mul(CURVE.b, _3n);\n      let t0 = Fp.mul(X1, X2); // step 1\n      let t1 = Fp.mul(Y1, Y2);\n      let t2 = Fp.mul(Z1, Z2);\n      let t3 = Fp.add(X1, Y1);\n      let t4 = Fp.add(X2, Y2); // step 5\n      t3 = Fp.mul(t3, t4);\n      t4 = Fp.add(t0, t1);\n      t3 = Fp.sub(t3, t4);\n      t4 = Fp.add(X1, Z1);\n      let t5 = Fp.add(X2, Z2); // step 10\n      t4 = Fp.mul(t4, t5);\n      t5 = Fp.add(t0, t2);\n      t4 = Fp.sub(t4, t5);\n      t5 = Fp.add(Y1, Z1);\n      X3 = Fp.add(Y2, Z2); // step 15\n      t5 = Fp.mul(t5, X3);\n      X3 = Fp.add(t1, t2);\n      t5 = Fp.sub(t5, X3);\n      Z3 = Fp.mul(a, t4);\n      X3 = Fp.mul(b3, t2); // step 20\n      Z3 = Fp.add(X3, Z3);\n      X3 = Fp.sub(t1, Z3);\n      Z3 = Fp.add(t1, Z3);\n      Y3 = Fp.mul(X3, Z3);\n      t1 = Fp.add(t0, t0); // step 25\n      t1 = Fp.add(t1, t0);\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.mul(b3, t4);\n      t1 = Fp.add(t1, t2);\n      t2 = Fp.sub(t0, t2); // step 30\n      t2 = Fp.mul(a, t2);\n      t4 = Fp.add(t4, t2);\n      t0 = Fp.mul(t1, t4);\n      Y3 = Fp.add(Y3, t0);\n      t0 = Fp.mul(t5, t4); // step 35\n      X3 = Fp.mul(t3, X3);\n      X3 = Fp.sub(X3, t0);\n      t0 = Fp.mul(t3, t1);\n      Z3 = Fp.mul(t5, Z3);\n      Z3 = Fp.add(Z3, t0); // step 40\n      return new Point(X3, Y3, Z3);\n    }\n\n    subtract(other: Point) {\n      return this.add(other.negate());\n    }\n\n    private is0() {\n      return this.equals(Point.ZERO);\n    }\n    private wNAF(n: bigint): { p: Point; f: Point } {\n      return wnaf.wNAFCached(this, pointPrecomputes, n, (comp: Point[]) => {\n        const toInv = Fp.invertBatch(comp.map((p) => p.pz));\n        return comp.map((p, i) => p.toAffine(toInv[i])).map(Point.fromAffine);\n      });\n    }\n\n    /**\n     * Non-constant-time multiplication. Uses double-and-add algorithm.\n     * It's faster, but should only be used when you don't care about\n     * an exposed private key e.g. sig verification, which works over *public* keys.\n     */\n    multiplyUnsafe(n: bigint): Point {\n      const I = Point.ZERO;\n      if (n === _0n) return I;\n      assertGE(n); // Will throw on 0\n      if (n === _1n) return this;\n      const { endo } = CURVE;\n      if (!endo) return wnaf.unsafeLadder(this, n);\n\n      // Apply endomorphism\n      let { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n      let k1p = I;\n      let k2p = I;\n      let d: Point = this;\n      while (k1 > _0n || k2 > _0n) {\n        if (k1 & _1n) k1p = k1p.add(d);\n        if (k2 & _1n) k2p = k2p.add(d);\n        d = d.double();\n        k1 >>= _1n;\n        k2 >>= _1n;\n      }\n      if (k1neg) k1p = k1p.negate();\n      if (k2neg) k2p = k2p.negate();\n      k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n      return k1p.add(k2p);\n    }\n\n    /**\n     * Constant time multiplication.\n     * Uses wNAF method. Windowed method may be 10% faster,\n     * but takes 2x longer to generate and consumes 2x memory.\n     * Uses precomputes when available.\n     * Uses endomorphism for Koblitz curves.\n     * @param scalar by which the point would be multiplied\n     * @returns New point\n     */\n    multiply(scalar: bigint): Point {\n      assertGE(scalar);\n      let n = scalar;\n      let point: Point, fake: Point; // Fake point is used to const-time mult\n      const { endo } = CURVE;\n      if (endo) {\n        const { k1neg, k1, k2neg, k2 } = endo.splitScalar(n);\n        let { p: k1p, f: f1p } = this.wNAF(k1);\n        let { p: k2p, f: f2p } = this.wNAF(k2);\n        k1p = wnaf.constTimeNegate(k1neg, k1p);\n        k2p = wnaf.constTimeNegate(k2neg, k2p);\n        k2p = new Point(Fp.mul(k2p.px, endo.beta), k2p.py, k2p.pz);\n        point = k1p.add(k2p);\n        fake = f1p.add(f2p);\n      } else {\n        const { p, f } = this.wNAF(n);\n        point = p;\n        fake = f;\n      }\n      // Normalize `z` for both points, but return only real one\n      return Point.normalizeZ([point, fake])[0];\n    }\n\n    /**\n     * Efficiently calculate `aP + bQ`. Unsafe, can expose private key, if used incorrectly.\n     * Not using Strauss-Shamir trick: precomputation tables are faster.\n     * The trick could be useful if both P and Q are not G (not in our case).\n     * @returns non-zero affine point\n     */\n    multiplyAndAddUnsafe(Q: Point, a: bigint, b: bigint): Point | undefined {\n      const G = Point.BASE; // No Strauss-Shamir trick: we have 10% faster G precomputes\n      const mul = (\n        P: Point,\n        a: bigint // Select faster multiply() method\n      ) => (a === _0n || a === _1n || !P.equals(G) ? P.multiplyUnsafe(a) : P.multiply(a));\n      const sum = mul(this, a).add(mul(Q, b));\n      return sum.is0() ? undefined : sum;\n    }\n\n    // Converts Projective point to affine (x, y) coordinates.\n    // Can accept precomputed Z^-1 - for example, from invertBatch.\n    // (x, y, z) ∋ (x=x/z, y=y/z)\n    toAffine(iz?: T): AffinePoint<T> {\n      const { px: x, py: y, pz: z } = this;\n      const is0 = this.is0();\n      // If invZ was 0, we return zero point. However we still want to execute\n      // all operations, so we replace invZ with a random number, 1.\n      if (iz == null) iz = is0 ? Fp.ONE : Fp.inv(z);\n      const ax = Fp.mul(x, iz);\n      const ay = Fp.mul(y, iz);\n      const zz = Fp.mul(z, iz);\n      if (is0) return { x: Fp.ZERO, y: Fp.ZERO };\n      if (!Fp.eql(zz, Fp.ONE)) throw new Error('invZ was invalid');\n      return { x: ax, y: ay };\n    }\n    isTorsionFree(): boolean {\n      const { h: cofactor, isTorsionFree } = CURVE;\n      if (cofactor === _1n) return true; // No subgroups, always torsion-free\n      if (isTorsionFree) return isTorsionFree(Point, this);\n      throw new Error('isTorsionFree() has not been declared for the elliptic curve');\n    }\n    clearCofactor(): Point {\n      const { h: cofactor, clearCofactor } = CURVE;\n      if (cofactor === _1n) return this; // Fast-path\n      if (clearCofactor) return clearCofactor(Point, this) as Point;\n      return this.multiplyUnsafe(CURVE.h);\n    }\n\n    toRawBytes(isCompressed = true): Uint8Array {\n      this.assertValidity();\n      return toBytes(Point, this, isCompressed);\n    }\n\n    toHex(isCompressed = true): string {\n      return ut.bytesToHex(this.toRawBytes(isCompressed));\n    }\n  }\n  const _bits = CURVE.nBitLength;\n  const wnaf = wNAF(Point, CURVE.endo ? Math.ceil(_bits / 2) : _bits);\n  // Validate if generator point is on curve\n  return {\n    CURVE,\n    ProjectivePoint: Point as ProjConstructor<T>,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  };\n}\n\n// Instance\nexport interface SignatureType {\n  readonly r: bigint;\n  readonly s: bigint;\n  readonly recovery?: number;\n  assertValidity(): void;\n  addRecoveryBit(recovery: number): RecoveredSignatureType;\n  hasHighS(): boolean;\n  normalizeS(): SignatureType;\n  recoverPublicKey(msgHash: Hex): ProjPointType<bigint>;\n  toCompactRawBytes(): Uint8Array;\n  toCompactHex(): string;\n  // DER-encoded\n  toDERRawBytes(isCompressed?: boolean): Uint8Array;\n  toDERHex(isCompressed?: boolean): string;\n}\nexport type RecoveredSignatureType = SignatureType & {\n  readonly recovery: number;\n};\n// Static methods\nexport type SignatureConstructor = {\n  new (r: bigint, s: bigint): SignatureType;\n  fromCompact(hex: Hex): SignatureType;\n  fromDER(hex: Hex): SignatureType;\n};\ntype SignatureLike = { r: bigint; s: bigint };\n\nexport type PubKey = Hex | ProjPointType<bigint>;\n\nexport type CurveType = BasicWCurve<bigint> & {\n  hash: CHash; // CHash not FHash because we need outputLen for DRBG\n  hmac: HmacFnSync;\n  randomBytes: (bytesLength?: number) => Uint8Array;\n  lowS?: boolean;\n  bits2int?: (bytes: Uint8Array) => bigint;\n  bits2int_modN?: (bytes: Uint8Array) => bigint;\n};\n\nfunction validateOpts(curve: CurveType) {\n  const opts = validateBasic(curve);\n  ut.validateObject(\n    opts,\n    {\n      hash: 'hash',\n      hmac: 'function',\n      randomBytes: 'function',\n    },\n    {\n      bits2int: 'function',\n      bits2int_modN: 'function',\n      lowS: 'boolean',\n    }\n  );\n  return Object.freeze({ lowS: true, ...opts } as const);\n}\n\nexport type CurveFn = {\n  CURVE: ReturnType<typeof validateOpts>;\n  getPublicKey: (privateKey: PrivKey, isCompressed?: boolean) => Uint8Array;\n  getSharedSecret: (privateA: PrivKey, publicB: Hex, isCompressed?: boolean) => Uint8Array;\n  sign: (msgHash: Hex, privKey: PrivKey, opts?: SignOpts) => RecoveredSignatureType;\n  verify: (signature: Hex | SignatureLike, msgHash: Hex, publicKey: Hex, opts?: VerOpts) => boolean;\n  ProjectivePoint: ProjConstructor<bigint>;\n  Signature: SignatureConstructor;\n  utils: {\n    normPrivateKeyToScalar: (key: PrivKey) => bigint;\n    isValidPrivateKey(privateKey: PrivKey): boolean;\n    randomPrivateKey: () => Uint8Array;\n    precompute: (windowSize?: number, point?: ProjPointType<bigint>) => ProjPointType<bigint>;\n  };\n};\n\nexport function weierstrass(curveDef: CurveType): CurveFn {\n  const CURVE = validateOpts(curveDef) as ReturnType<typeof validateOpts>;\n  const { Fp, n: CURVE_ORDER } = CURVE;\n  const compressedLen = Fp.BYTES + 1; // e.g. 33 for 32\n  const uncompressedLen = 2 * Fp.BYTES + 1; // e.g. 65 for 32\n\n  function isValidFieldElement(num: bigint): boolean {\n    return _0n < num && num < Fp.ORDER; // 0 is banned since it's not invertible FE\n  }\n  function modN(a: bigint) {\n    return mod.mod(a, CURVE_ORDER);\n  }\n  function invN(a: bigint) {\n    return mod.invert(a, CURVE_ORDER);\n  }\n\n  const {\n    ProjectivePoint: Point,\n    normPrivateKeyToScalar,\n    weierstrassEquation,\n    isWithinCurveOrder,\n  } = weierstrassPoints({\n    ...CURVE,\n    toBytes(c, point, isCompressed: boolean): Uint8Array {\n      const a = point.toAffine();\n      const x = Fp.toBytes(a.x);\n      const cat = ut.concatBytes;\n      if (isCompressed) {\n        return cat(Uint8Array.from([point.hasEvenY() ? 0x02 : 0x03]), x);\n      } else {\n        return cat(Uint8Array.from([0x04]), x, Fp.toBytes(a.y));\n      }\n    },\n    fromBytes(bytes: Uint8Array) {\n      const len = bytes.length;\n      const head = bytes[0];\n      const tail = bytes.subarray(1);\n      // this.assertValidity() is done inside of fromHex\n      if (len === compressedLen && (head === 0x02 || head === 0x03)) {\n        const x = ut.bytesToNumberBE(tail);\n        if (!isValidFieldElement(x)) throw new Error('Point is not on curve');\n        const y2 = weierstrassEquation(x); // y² = x³ + ax + b\n        let y = Fp.sqrt(y2); // y = y² ^ (p+1)/4\n        const isYOdd = (y & _1n) === _1n;\n        // ECDSA\n        const isHeadOdd = (head & 1) === 1;\n        if (isHeadOdd !== isYOdd) y = Fp.neg(y);\n        return { x, y };\n      } else if (len === uncompressedLen && head === 0x04) {\n        const x = Fp.fromBytes(tail.subarray(0, Fp.BYTES));\n        const y = Fp.fromBytes(tail.subarray(Fp.BYTES, 2 * Fp.BYTES));\n        return { x, y };\n      } else {\n        throw new Error(\n          `Point of length ${len} was invalid. Expected ${compressedLen} compressed bytes or ${uncompressedLen} uncompressed bytes`\n        );\n      }\n    },\n  });\n  const numToNByteStr = (num: bigint): string =>\n    ut.bytesToHex(ut.numberToBytesBE(num, CURVE.nByteLength));\n\n  function isBiggerThanHalfOrder(number: bigint) {\n    const HALF = CURVE_ORDER >> _1n;\n    return number > HALF;\n  }\n\n  function normalizeS(s: bigint) {\n    return isBiggerThanHalfOrder(s) ? modN(-s) : s;\n  }\n  // slice bytes num\n  const slcNum = (b: Uint8Array, from: number, to: number) => ut.bytesToNumberBE(b.slice(from, to));\n\n  /**\n   * ECDSA signature with its (r, s) properties. Supports DER & compact representations.\n   */\n  class Signature implements SignatureType {\n    constructor(readonly r: bigint, readonly s: bigint, readonly recovery?: number) {\n      this.assertValidity();\n    }\n\n    // pair (bytes of r, bytes of s)\n    static fromCompact(hex: Hex) {\n      const l = CURVE.nByteLength;\n      hex = ensureBytes('compactSignature', hex, l * 2);\n      return new Signature(slcNum(hex, 0, l), slcNum(hex, l, 2 * l));\n    }\n\n    // DER encoded ECDSA signature\n    // https://bitcoin.stackexchange.com/questions/57644/what-are-the-parts-of-a-bitcoin-transaction-input-script\n    static fromDER(hex: Hex) {\n      const { r, s } = DER.toSig(ensureBytes('DER', hex));\n      return new Signature(r, s);\n    }\n\n    assertValidity(): void {\n      // can use assertGE here\n      if (!isWithinCurveOrder(this.r)) throw new Error('r must be 0 < r < CURVE.n');\n      if (!isWithinCurveOrder(this.s)) throw new Error('s must be 0 < s < CURVE.n');\n    }\n\n    addRecoveryBit(recovery: number): RecoveredSignature {\n      return new Signature(this.r, this.s, recovery) as RecoveredSignature;\n    }\n\n    recoverPublicKey(msgHash: Hex): typeof Point.BASE {\n      const { r, s, recovery: rec } = this;\n      const h = bits2int_modN(ensureBytes('msgHash', msgHash)); // Truncate hash\n      if (rec == null || ![0, 1, 2, 3].includes(rec)) throw new Error('recovery id invalid');\n      const radj = rec === 2 || rec === 3 ? r + CURVE.n : r;\n      if (radj >= Fp.ORDER) throw new Error('recovery id 2 or 3 invalid');\n      const prefix = (rec & 1) === 0 ? '02' : '03';\n      const R = Point.fromHex(prefix + numToNByteStr(radj));\n      const ir = invN(radj); // r^-1\n      const u1 = modN(-h * ir); // -hr^-1\n      const u2 = modN(s * ir); // sr^-1\n      const Q = Point.BASE.multiplyAndAddUnsafe(R, u1, u2); // (sr^-1)R-(hr^-1)G = -(hr^-1)G + (sr^-1)\n      if (!Q) throw new Error('point at infinify'); // unsafe is fine: no priv data leaked\n      Q.assertValidity();\n      return Q;\n    }\n\n    // Signatures should be low-s, to prevent malleability.\n    hasHighS(): boolean {\n      return isBiggerThanHalfOrder(this.s);\n    }\n\n    normalizeS() {\n      return this.hasHighS() ? new Signature(this.r, modN(-this.s), this.recovery) : this;\n    }\n\n    // DER-encoded\n    toDERRawBytes() {\n      return ut.hexToBytes(this.toDERHex());\n    }\n    toDERHex() {\n      return DER.hexFromSig({ r: this.r, s: this.s });\n    }\n\n    // padded bytes of r, then padded bytes of s\n    toCompactRawBytes() {\n      return ut.hexToBytes(this.toCompactHex());\n    }\n    toCompactHex() {\n      return numToNByteStr(this.r) + numToNByteStr(this.s);\n    }\n  }\n  type RecoveredSignature = Signature & { recovery: number };\n\n  const utils = {\n    isValidPrivateKey(privateKey: PrivKey) {\n      try {\n        normPrivateKeyToScalar(privateKey);\n        return true;\n      } catch (error) {\n        return false;\n      }\n    },\n    normPrivateKeyToScalar: normPrivateKeyToScalar,\n\n    /**\n     * Produces cryptographically secure private key from random of size (nBitLength+64)\n     * as per FIPS 186 B.4.1 with modulo bias being neglible.\n     */\n    randomPrivateKey: (): Uint8Array => {\n      const rand = CURVE.randomBytes(Fp.BYTES + 8);\n      const num = mod.hashToPrivateScalar(rand, CURVE_ORDER);\n      return ut.numberToBytesBE(num, CURVE.nByteLength);\n    },\n\n    /**\n     * Creates precompute table for an arbitrary EC point. Makes point \"cached\".\n     * Allows to massively speed-up `point.multiply(scalar)`.\n     * @returns cached point\n     * @example\n     * const fast = utils.precompute(8, ProjectivePoint.fromHex(someonesPubKey));\n     * fast.multiply(privKey); // much faster ECDH now\n     */\n    precompute(windowSize = 8, point = Point.BASE): typeof Point.BASE {\n      point._setWindowSize(windowSize);\n      point.multiply(BigInt(3)); // 3 is arbitrary, just need any number here\n      return point;\n    },\n  };\n\n  /**\n   * Computes public key for a private key. Checks for validity of the private key.\n   * @param privateKey private key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns Public key, full when isCompressed=false; short when isCompressed=true\n   */\n  function getPublicKey(privateKey: PrivKey, isCompressed = true): Uint8Array {\n    return Point.fromPrivateKey(privateKey).toRawBytes(isCompressed);\n  }\n\n  /**\n   * Quick and dirty check for item being public key. Does not validate hex, or being on-curve.\n   */\n  function isProbPub(item: PrivKey | PubKey): boolean {\n    const arr = item instanceof Uint8Array;\n    const str = typeof item === 'string';\n    const len = (arr || str) && (item as Hex).length;\n    if (arr) return len === compressedLen || len === uncompressedLen;\n    if (str) return len === 2 * compressedLen || len === 2 * uncompressedLen;\n    if (item instanceof Point) return true;\n    return false;\n  }\n\n  /**\n   * ECDH (Elliptic Curve Diffie Hellman).\n   * Computes shared public key from private key and public key.\n   * Checks: 1) private key validity 2) shared key is on-curve.\n   * Does NOT hash the result.\n   * @param privateA private key\n   * @param publicB different public key\n   * @param isCompressed whether to return compact (default), or full key\n   * @returns shared public key\n   */\n  function getSharedSecret(privateA: PrivKey, publicB: Hex, isCompressed = true): Uint8Array {\n    if (isProbPub(privateA)) throw new Error('first arg must be private key');\n    if (!isProbPub(publicB)) throw new Error('second arg must be public key');\n    const b = Point.fromHex(publicB); // check for being on-curve\n    return b.multiply(normPrivateKeyToScalar(privateA)).toRawBytes(isCompressed);\n  }\n\n  // RFC6979: ensure ECDSA msg is X bytes and < N. RFC suggests optional truncating via bits2octets.\n  // FIPS 186-4 4.6 suggests the leftmost min(nBitLen, outLen) bits, which matches bits2int.\n  // bits2int can produce res>N, we can do mod(res, N) since the bitLen is the same.\n  // int2octets can't be used; pads small msgs with 0: unacceptatble for trunc as per RFC vectors\n  const bits2int =\n    CURVE.bits2int ||\n    function (bytes: Uint8Array): bigint {\n      // For curves with nBitLength % 8 !== 0: bits2octets(bits2octets(m)) !== bits2octets(m)\n      // for some cases, since bytes.length * 8 is not actual bitLength.\n      const num = ut.bytesToNumberBE(bytes); // check for == u8 done here\n      const delta = bytes.length * 8 - CURVE.nBitLength; // truncate to nBitLength leftmost bits\n      return delta > 0 ? num >> BigInt(delta) : num;\n    };\n  const bits2int_modN =\n    CURVE.bits2int_modN ||\n    function (bytes: Uint8Array): bigint {\n      return modN(bits2int(bytes)); // can't use bytesToNumberBE here\n    };\n  // NOTE: pads output with zero as per spec\n  const ORDER_MASK = ut.bitMask(CURVE.nBitLength);\n  /**\n   * Converts to bytes. Checks if num in `[0..ORDER_MASK-1]` e.g.: `[0..2^256-1]`.\n   */\n  function int2octets(num: bigint): Uint8Array {\n    if (typeof num !== 'bigint') throw new Error('bigint expected');\n    if (!(_0n <= num && num < ORDER_MASK))\n      throw new Error(`bigint expected < 2^${CURVE.nBitLength}`);\n    // works with order, can have different size than numToField!\n    return ut.numberToBytesBE(num, CURVE.nByteLength);\n  }\n\n  // Steps A, D of RFC6979 3.2\n  // Creates RFC6979 seed; converts msg/privKey to numbers.\n  // Used only in sign, not in verify.\n  // NOTE: we cannot assume here that msgHash has same amount of bytes as curve order, this will be wrong at least for P521.\n  // Also it can be bigger for P224 + SHA256\n  function prepSig(msgHash: Hex, privateKey: PrivKey, opts = defaultSigOpts) {\n    if (['recovered', 'canonical'].some((k) => k in opts))\n      throw new Error('sign() legacy options not supported');\n    const { hash, randomBytes } = CURVE;\n    let { lowS, prehash, extraEntropy: ent } = opts; // generates low-s sigs by default\n    if (lowS == null) lowS = true; // RFC6979 3.2: we skip step A, because we already provide hash\n    msgHash = ensureBytes('msgHash', msgHash);\n    if (prehash) msgHash = ensureBytes('prehashed msgHash', hash(msgHash));\n\n    // We can't later call bits2octets, since nested bits2int is broken for curves\n    // with nBitLength % 8 !== 0. Because of that, we unwrap it here as int2octets call.\n    // const bits2octets = (bits) => int2octets(bits2int_modN(bits))\n    const h1int = bits2int_modN(msgHash);\n    const d = normPrivateKeyToScalar(privateKey); // validate private key, convert to bigint\n    const seedArgs = [int2octets(d), int2octets(h1int)];\n    // extraEntropy. RFC6979 3.6: additional k' (optional).\n    if (ent != null) {\n      // K = HMAC_K(V || 0x00 || int2octets(x) || bits2octets(h1) || k')\n      const e = ent === true ? randomBytes(Fp.BYTES) : ent; // generate random bytes OR pass as-is\n      seedArgs.push(ensureBytes('extraEntropy', e, Fp.BYTES)); // check for being of size BYTES\n    }\n    const seed = ut.concatBytes(...seedArgs); // Step D of RFC6979 3.2\n    const m = h1int; // NOTE: no need to call bits2int second time here, it is inside truncateHash!\n    // Converts signature params into point w r/s, checks result for validity.\n    function k2sig(kBytes: Uint8Array): RecoveredSignature | undefined {\n      // RFC 6979 Section 3.2, step 3: k = bits2int(T)\n      const k = bits2int(kBytes); // Cannot use fields methods, since it is group element\n      if (!isWithinCurveOrder(k)) return; // Important: all mod() calls here must be done over N\n      const ik = invN(k); // k^-1 mod n\n      const q = Point.BASE.multiply(k).toAffine(); // q = Gk\n      const r = modN(q.x); // r = q.x mod n\n      if (r === _0n) return;\n      // Can use scalar blinding b^-1(bm + bdr) where b ∈ [1,q−1] according to\n      // https://tches.iacr.org/index.php/TCHES/article/view/7337/6509. We've decided against it:\n      // a) dependency on CSPRNG b) 15% slowdown c) doesn't really help since bigints are not CT\n      const s = modN(ik * modN(m + r * d)); // Not using blinding here\n      if (s === _0n) return;\n      let recovery = (q.x === r ? 0 : 2) | Number(q.y & _1n); // recovery bit (2 or 3, when q.x > n)\n      let normS = s;\n      if (lowS && isBiggerThanHalfOrder(s)) {\n        normS = normalizeS(s); // if lowS was passed, ensure s is always\n        recovery ^= 1; // // in the bottom half of N\n      }\n      return new Signature(r, normS, recovery) as RecoveredSignature; // use normS, not s\n    }\n    return { seed, k2sig };\n  }\n  const defaultSigOpts: SignOpts = { lowS: CURVE.lowS, prehash: false };\n  const defaultVerOpts: VerOpts = { lowS: CURVE.lowS, prehash: false };\n\n  /**\n   * Signs message hash with a private key.\n   * ```\n   * sign(m, d, k) where\n   *   (x, y) = G × k\n   *   r = x mod n\n   *   s = (m + dr)/k mod n\n   * ```\n   * @param msgHash NOT message. msg needs to be hashed to `msgHash`, or use `prehash`.\n   * @param privKey private key\n   * @param opts lowS for non-malleable sigs. extraEntropy for mixing randomness into k. prehash will hash first arg.\n   * @returns signature with recovery param\n   */\n  function sign(msgHash: Hex, privKey: PrivKey, opts = defaultSigOpts): RecoveredSignature {\n    const { seed, k2sig } = prepSig(msgHash, privKey, opts); // Steps A, D of RFC6979 3.2.\n    const C = CURVE;\n    const drbg = ut.createHmacDrbg<RecoveredSignature>(C.hash.outputLen, C.nByteLength, C.hmac);\n    return drbg(seed, k2sig); // Steps B, C, D, E, F, G\n  }\n\n  // Enable precomputes. Slows down first publicKey computation by 20ms.\n  Point.BASE._setWindowSize(8);\n  // utils.precompute(8, ProjectivePoint.BASE)\n\n  /**\n   * Verifies a signature against message hash and public key.\n   * Rejects lowS signatures by default: to override,\n   * specify option `{lowS: false}`. Implements section 4.1.4 from https://www.secg.org/sec1-v2.pdf:\n   *\n   * ```\n   * verify(r, s, h, P) where\n   *   U1 = hs^-1 mod n\n   *   U2 = rs^-1 mod n\n   *   R = U1⋅G - U2⋅P\n   *   mod(R.x, n) == r\n   * ```\n   */\n  function verify(\n    signature: Hex | SignatureLike,\n    msgHash: Hex,\n    publicKey: Hex,\n    opts = defaultVerOpts\n  ): boolean {\n    const sg = signature;\n    msgHash = ensureBytes('msgHash', msgHash);\n    publicKey = ensureBytes('publicKey', publicKey);\n    if ('strict' in opts) throw new Error('options.strict was renamed to lowS');\n    const { lowS, prehash } = opts;\n\n    let _sig: Signature | undefined = undefined;\n    let P: ProjPointType<bigint>;\n    try {\n      if (typeof sg === 'string' || sg instanceof Uint8Array) {\n        // Signature can be represented in 2 ways: compact (2*nByteLength) & DER (variable-length).\n        // Since DER can also be 2*nByteLength bytes, we check for it first.\n        try {\n          _sig = Signature.fromDER(sg);\n        } catch (derError) {\n          if (!(derError instanceof DER.Err)) throw derError;\n          _sig = Signature.fromCompact(sg);\n        }\n      } else if (typeof sg === 'object' && typeof sg.r === 'bigint' && typeof sg.s === 'bigint') {\n        const { r, s } = sg;\n        _sig = new Signature(r, s);\n      } else {\n        throw new Error('PARSE');\n      }\n      P = Point.fromHex(publicKey);\n    } catch (error) {\n      if ((error as Error).message === 'PARSE')\n        throw new Error(`signature must be Signature instance, Uint8Array or hex string`);\n      return false;\n    }\n    if (lowS && _sig.hasHighS()) return false;\n    if (prehash) msgHash = CURVE.hash(msgHash);\n    const { r, s } = _sig;\n    const h = bits2int_modN(msgHash); // Cannot use fields methods, since it is group element\n    const is = invN(s); // s^-1\n    const u1 = modN(h * is); // u1 = hs^-1 mod n\n    const u2 = modN(r * is); // u2 = rs^-1 mod n\n    const R = Point.BASE.multiplyAndAddUnsafe(P, u1, u2)?.toAffine(); // R = u1⋅G + u2⋅P\n    if (!R) return false;\n    const v = modN(R.x);\n    return v === r;\n  }\n  return {\n    CURVE,\n    getPublicKey,\n    getSharedSecret,\n    sign,\n    verify,\n    ProjectivePoint: Point,\n    Signature,\n    utils,\n  };\n}\n\n/**\n * Implementation of the Shallue and van de Woestijne method for any weierstrass curve.\n * TODO: check if there is a way to merge this with uvRatio in Edwards; move to modular.\n * b = True and y = sqrt(u / v) if (u / v) is square in F, and\n * b = False and y = sqrt(Z * (u / v)) otherwise.\n * @param Fp\n * @param Z\n * @returns\n */\nexport function SWUFpSqrtRatio<T>(Fp: mod.IField<T>, Z: T) {\n  // Generic implementation\n  const q = Fp.ORDER;\n  let l = _0n;\n  for (let o = q - _1n; o % _2n === _0n; o /= _2n) l += _1n;\n  const c1 = l; // 1. c1, the largest integer such that 2^c1 divides q - 1.\n  // We need 2n ** c1 and 2n ** (c1-1). We can't use **; but we can use <<.\n  // 2n ** c1 == 2n << (c1-1)\n  const _2n_pow_c1_1 = _2n << (c1 - _1n - _1n);\n  const _2n_pow_c1 = _2n_pow_c1_1 * _2n;\n  const c2 = (q - _1n) / _2n_pow_c1; // 2. c2 = (q - 1) / (2^c1)  # Integer arithmetic\n  const c3 = (c2 - _1n) / _2n; // 3. c3 = (c2 - 1) / 2            # Integer arithmetic\n  const c4 = _2n_pow_c1 - _1n; // 4. c4 = 2^c1 - 1                # Integer arithmetic\n  const c5 = _2n_pow_c1_1; // 5. c5 = 2^(c1 - 1)                  # Integer arithmetic\n  const c6 = Fp.pow(Z, c2); // 6. c6 = Z^c2\n  const c7 = Fp.pow(Z, (c2 + _1n) / _2n); // 7. c7 = Z^((c2 + 1) / 2)\n  let sqrtRatio = (u: T, v: T): { isValid: boolean; value: T } => {\n    let tv1 = c6; // 1. tv1 = c6\n    let tv2 = Fp.pow(v, c4); // 2. tv2 = v^c4\n    let tv3 = Fp.sqr(tv2); // 3. tv3 = tv2^2\n    tv3 = Fp.mul(tv3, v); // 4. tv3 = tv3 * v\n    let tv5 = Fp.mul(u, tv3); // 5. tv5 = u * tv3\n    tv5 = Fp.pow(tv5, c3); // 6. tv5 = tv5^c3\n    tv5 = Fp.mul(tv5, tv2); // 7. tv5 = tv5 * tv2\n    tv2 = Fp.mul(tv5, v); // 8. tv2 = tv5 * v\n    tv3 = Fp.mul(tv5, u); // 9. tv3 = tv5 * u\n    let tv4 = Fp.mul(tv3, tv2); // 10. tv4 = tv3 * tv2\n    tv5 = Fp.pow(tv4, c5); // 11. tv5 = tv4^c5\n    let isQR = Fp.eql(tv5, Fp.ONE); // 12. isQR = tv5 == 1\n    tv2 = Fp.mul(tv3, c7); // 13. tv2 = tv3 * c7\n    tv5 = Fp.mul(tv4, tv1); // 14. tv5 = tv4 * tv1\n    tv3 = Fp.cmov(tv2, tv3, isQR); // 15. tv3 = CMOV(tv2, tv3, isQR)\n    tv4 = Fp.cmov(tv5, tv4, isQR); // 16. tv4 = CMOV(tv5, tv4, isQR)\n    // 17. for i in (c1, c1 - 1, ..., 2):\n    for (let i = c1; i > _1n; i--) {\n      let tv5 = i - _2n; // 18.    tv5 = i - 2\n      tv5 = _2n << (tv5 - _1n); // 19.    tv5 = 2^tv5\n      let tvv5 = Fp.pow(tv4, tv5); // 20.    tv5 = tv4^tv5\n      const e1 = Fp.eql(tvv5, Fp.ONE); // 21.    e1 = tv5 == 1\n      tv2 = Fp.mul(tv3, tv1); // 22.    tv2 = tv3 * tv1\n      tv1 = Fp.mul(tv1, tv1); // 23.    tv1 = tv1 * tv1\n      tvv5 = Fp.mul(tv4, tv1); // 24.    tv5 = tv4 * tv1\n      tv3 = Fp.cmov(tv2, tv3, e1); // 25.    tv3 = CMOV(tv2, tv3, e1)\n      tv4 = Fp.cmov(tvv5, tv4, e1); // 26.    tv4 = CMOV(tv5, tv4, e1)\n    }\n    return { isValid: isQR, value: tv3 };\n  };\n  if (Fp.ORDER % _4n === _3n) {\n    // sqrt_ratio_3mod4(u, v)\n    const c1 = (Fp.ORDER - _3n) / _4n; // 1. c1 = (q - 3) / 4     # Integer arithmetic\n    const c2 = Fp.sqrt(Fp.neg(Z)); // 2. c2 = sqrt(-Z)\n    sqrtRatio = (u: T, v: T) => {\n      let tv1 = Fp.sqr(v); // 1. tv1 = v^2\n      const tv2 = Fp.mul(u, v); // 2. tv2 = u * v\n      tv1 = Fp.mul(tv1, tv2); // 3. tv1 = tv1 * tv2\n      let y1 = Fp.pow(tv1, c1); // 4. y1 = tv1^c1\n      y1 = Fp.mul(y1, tv2); // 5. y1 = y1 * tv2\n      const y2 = Fp.mul(y1, c2); // 6. y2 = y1 * c2\n      const tv3 = Fp.mul(Fp.sqr(y1), v); // 7. tv3 = y1^2; 8. tv3 = tv3 * v\n      const isQR = Fp.eql(tv3, u); // 9. isQR = tv3 == u\n      let y = Fp.cmov(y2, y1, isQR); // 10. y = CMOV(y2, y1, isQR)\n      return { isValid: isQR, value: y }; // 11. return (isQR, y) isQR ? y : y*c2\n    };\n  }\n  // No curves uses that\n  // if (Fp.ORDER % _8n === _5n) // sqrt_ratio_5mod8\n  return sqrtRatio;\n}\n/**\n * From draft-irtf-cfrg-hash-to-curve-16\n */\nexport function mapToCurveSimpleSWU<T>(\n  Fp: mod.IField<T>,\n  opts: {\n    A: T;\n    B: T;\n    Z: T;\n  }\n) {\n  mod.validateField(Fp);\n  if (!Fp.isValid(opts.A) || !Fp.isValid(opts.B) || !Fp.isValid(opts.Z))\n    throw new Error('mapToCurveSimpleSWU: invalid opts');\n  const sqrtRatio = SWUFpSqrtRatio(Fp, opts.Z);\n  if (!Fp.isOdd) throw new Error('Fp.isOdd is not implemented!');\n  // Input: u, an element of F.\n  // Output: (x, y), a point on E.\n  return (u: T): { x: T; y: T } => {\n    // prettier-ignore\n    let tv1, tv2, tv3, tv4, tv5, tv6, x, y;\n    tv1 = Fp.sqr(u); // 1.  tv1 = u^2\n    tv1 = Fp.mul(tv1, opts.Z); // 2.  tv1 = Z * tv1\n    tv2 = Fp.sqr(tv1); // 3.  tv2 = tv1^2\n    tv2 = Fp.add(tv2, tv1); // 4.  tv2 = tv2 + tv1\n    tv3 = Fp.add(tv2, Fp.ONE); // 5.  tv3 = tv2 + 1\n    tv3 = Fp.mul(tv3, opts.B); // 6.  tv3 = B * tv3\n    tv4 = Fp.cmov(opts.Z, Fp.neg(tv2), !Fp.eql(tv2, Fp.ZERO)); // 7.  tv4 = CMOV(Z, -tv2, tv2 != 0)\n    tv4 = Fp.mul(tv4, opts.A); // 8.  tv4 = A * tv4\n    tv2 = Fp.sqr(tv3); // 9.  tv2 = tv3^2\n    tv6 = Fp.sqr(tv4); // 10. tv6 = tv4^2\n    tv5 = Fp.mul(tv6, opts.A); // 11. tv5 = A * tv6\n    tv2 = Fp.add(tv2, tv5); // 12. tv2 = tv2 + tv5\n    tv2 = Fp.mul(tv2, tv3); // 13. tv2 = tv2 * tv3\n    tv6 = Fp.mul(tv6, tv4); // 14. tv6 = tv6 * tv4\n    tv5 = Fp.mul(tv6, opts.B); // 15. tv5 = B * tv6\n    tv2 = Fp.add(tv2, tv5); // 16. tv2 = tv2 + tv5\n    x = Fp.mul(tv1, tv3); // 17.   x = tv1 * tv3\n    const { isValid, value } = sqrtRatio(tv2, tv6); // 18. (is_gx1_square, y1) = sqrt_ratio(tv2, tv6)\n    y = Fp.mul(tv1, u); // 19.   y = tv1 * u  -> Z * u^3 * y1\n    y = Fp.mul(y, value); // 20.   y = y * y1\n    x = Fp.cmov(x, tv3, isValid); // 21.   x = CMOV(x, tv3, is_gx1_square)\n    y = Fp.cmov(y, value, isValid); // 22.   y = CMOV(y, y1, is_gx1_square)\n    const e1 = Fp.isOdd!(u) === Fp.isOdd!(y); // 23.  e1 = sgn0(u) == sgn0(y)\n    y = Fp.cmov(Fp.neg(y), y, e1); // 24.   y = CMOV(-y, y, e1)\n    x = Fp.div(x, tv4); // 25.   x = x / tv4\n    return { x, y };\n  };\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}