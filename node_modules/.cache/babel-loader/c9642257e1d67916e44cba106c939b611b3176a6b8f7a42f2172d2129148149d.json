{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ConnectionError, ConnectionNotOpenError, InvalidClientError, MaxAttemptsReachedOnReconnectingError, PendingRequestsOnReconnectingError, RequestAlreadySentError, Web3WSProviderError } from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\nvar DEFAULT_RECONNECTION_OPTIONS = {\n  autoReconnect: true,\n  delay: 5000,\n  maxAttempts: 5\n};\nvar NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\nexport var SocketProvider = /*#__PURE__*/function (_Eip1193Provider) {\n  _inherits(SocketProvider, _Eip1193Provider);\n  var _super = _createSuper(SocketProvider);\n  /**\n   * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n   * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n   * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n   * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n   */\n  function SocketProvider(socketPath, socketOptions, reconnectOptions) {\n    var _this;\n    _classCallCheck(this, SocketProvider);\n    _this = _super.call(this);\n    _this._connectionStatus = 'connecting';\n    // Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n    _this._onMessageHandler = _this._onMessage.bind(_assertThisInitialized(_this));\n    _this._onOpenHandler = _this._onConnect.bind(_assertThisInitialized(_this));\n    _this._onCloseHandler = _this._onCloseEvent.bind(_assertThisInitialized(_this));\n    _this._onErrorHandler = _this._onError.bind(_assertThisInitialized(_this));\n    if (!_this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n    _this._socketPath = socketPath;\n    _this._socketOptions = socketOptions;\n    _this._reconnectOptions = Object.assign(Object.assign({}, DEFAULT_RECONNECTION_OPTIONS), reconnectOptions !== null && reconnectOptions !== void 0 ? reconnectOptions : {});\n    _this._pendingRequestsQueue = new Map();\n    _this._sentRequestsQueue = new Map();\n    _this._init();\n    _this.connect();\n    _this.chunkResponseParser = new ChunkResponseParser(_this._eventEmitter, _this._reconnectOptions.autoReconnect);\n    _this.chunkResponseParser.onError(function () {\n      _this._clearQueues();\n    });\n    _this.isReconnecting = false;\n    return _this;\n  }\n  _createClass(SocketProvider, [{\n    key: \"SocketConnection\",\n    get: function get() {\n      return this._socketConnection;\n    }\n  }, {\n    key: \"_init\",\n    value: function _init() {\n      this._reconnectAttempts = 0;\n    }\n    /**\n     * Try to establish a connection to the socket\n     */\n  }, {\n    key: \"connect\",\n    value: function connect() {\n      var _this2 = this;\n      try {\n        this._openSocketConnection();\n        this._connectionStatus = 'connecting';\n        this._addSocketListeners();\n      } catch (e) {\n        if (!this.isReconnecting) {\n          this._connectionStatus = 'disconnected';\n          if (e && e.message) {\n            throw new ConnectionError(\"Error while connecting to \".concat(this._socketPath, \". Reason: \").concat(e.message));\n          } else {\n            throw new InvalidClientError(this._socketPath);\n          }\n        } else {\n          setImmediate(function () {\n            _this2._reconnect();\n          });\n        }\n      }\n    }\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"_validateProviderPath\",\n    value: function _validateProviderPath(path) {\n      return !!path;\n    }\n    /**\n     *\n     * @returns `true` if the socket supports subscriptions\n     */\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"supportsSubscriptions\",\n    value: function supportsSubscriptions() {\n      return true;\n    }\n  }, {\n    key: \"on\",\n    value: function on(type, listener) {\n      this._eventEmitter.on(type, listener);\n    }\n  }, {\n    key: \"once\",\n    value: function once(type, listener) {\n      this._eventEmitter.once(type, listener);\n    }\n  }, {\n    key: \"removeListener\",\n    value: function removeListener(type, listener) {\n      this._eventEmitter.removeListener(type, listener);\n    }\n  }, {\n    key: \"_onDisconnect\",\n    value: function _onDisconnect(code, data) {\n      this._connectionStatus = 'disconnected';\n      _get(_getPrototypeOf(SocketProvider.prototype), \"_onDisconnect\", this).call(this, code, data);\n    }\n    /**\n     * Disconnects the socket\n     * @param code - The code to be sent to the server\n     * @param data - The data to be sent to the server\n     */\n  }, {\n    key: \"disconnect\",\n    value: function disconnect(code, data) {\n      var disconnectCode = code !== null && code !== void 0 ? code : NORMAL_CLOSE_CODE;\n      this._removeSocketListeners();\n      if (this.getStatus() !== 'disconnected') {\n        this._closeSocketConnection(disconnectCode, data);\n      }\n      this._onDisconnect(disconnectCode, data);\n    }\n    /**\n     * Removes all listeners for the specified event type.\n     * @param type - The event type to remove the listeners for\n     */\n  }, {\n    key: \"removeAllListeners\",\n    value: function removeAllListeners(type) {\n      this._eventEmitter.removeAllListeners(type);\n    }\n  }, {\n    key: \"_onError\",\n    value: function _onError(event) {\n      // do not emit error while trying to reconnect\n      if (this.isReconnecting) {\n        this._reconnect();\n      } else {\n        this._eventEmitter.emit('error', event);\n      }\n    }\n    /**\n     * Resets the socket, removing all listeners and pending requests\n     */\n  }, {\n    key: \"reset\",\n    value: function reset() {\n      this._sentRequestsQueue.clear();\n      this._pendingRequestsQueue.clear();\n      this._init();\n      this._removeSocketListeners();\n      this._addSocketListeners();\n    }\n  }, {\n    key: \"_reconnect\",\n    value: function _reconnect() {\n      var _this3 = this;\n      if (this.isReconnecting) {\n        return;\n      }\n      this.isReconnecting = true;\n      if (this._sentRequestsQueue.size > 0) {\n        this._sentRequestsQueue.forEach(function (request, key) {\n          request.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n          _this3._sentRequestsQueue.delete(key);\n        });\n      }\n      if (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n        this._reconnectAttempts += 1;\n        setTimeout(function () {\n          _this3._removeSocketListeners();\n          _this3.connect();\n          _this3.isReconnecting = false;\n        }, this._reconnectOptions.delay);\n      } else {\n        this.isReconnecting = false;\n        this._clearQueues();\n        this._removeSocketListeners();\n        this._eventEmitter.emit('error', new MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts));\n      }\n    }\n    /**\n     *  Creates a request object to be sent to the server\n     */\n  }, {\n    key: \"request\",\n    value: function request(_request) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        var _this4 = this;\n        var requestId, deferredPromise, reqItem;\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              if (!isNullish(this._socketConnection)) {\n                _context.next = 2;\n                break;\n              }\n              throw new Error('Connection is undefined');\n            case 2:\n              // if socket disconnected - open connection\n              if (this.getStatus() === 'disconnected') {\n                this.connect();\n              }\n              requestId = jsonRpc.isBatchRequest(_request) ? _request[0].id : _request.id;\n              if (requestId) {\n                _context.next = 6;\n                break;\n              }\n              throw new Web3WSProviderError('Request Id not defined');\n            case 6:\n              if (!this._sentRequestsQueue.has(requestId)) {\n                _context.next = 8;\n                break;\n              }\n              throw new RequestAlreadySentError(requestId);\n            case 8:\n              deferredPromise = new Web3DeferredPromise();\n              deferredPromise.catch(function (error) {\n                _this4._eventEmitter.emit('error', error);\n              });\n              reqItem = {\n                payload: _request,\n                deferredPromise: deferredPromise\n              };\n              if (!(this.getStatus() === 'connecting')) {\n                _context.next = 14;\n                break;\n              }\n              this._pendingRequestsQueue.set(requestId, reqItem);\n              return _context.abrupt(\"return\", reqItem.deferredPromise);\n            case 14:\n              this._sentRequestsQueue.set(requestId, reqItem);\n              try {\n                this._sendToSocket(reqItem.payload);\n              } catch (error) {\n                this._sentRequestsQueue.delete(requestId);\n                this._eventEmitter.emit('error', error);\n              }\n              return _context.abrupt(\"return\", deferredPromise);\n            case 17:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"_onConnect\",\n    value: function _onConnect() {\n      this._connectionStatus = 'connected';\n      this._reconnectAttempts = 0;\n      _get(_getPrototypeOf(SocketProvider.prototype), \"_onConnect\", this).call(this);\n      this._sendPendingRequests();\n    }\n  }, {\n    key: \"_sendPendingRequests\",\n    value: function _sendPendingRequests() {\n      var _iterator = _createForOfIteratorHelper(this._pendingRequestsQueue.entries()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n            id = _step$value[0],\n            value = _step$value[1];\n          this._sendToSocket(value.payload);\n          this._pendingRequestsQueue.delete(id);\n          this._sentRequestsQueue.set(id, value);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"_onMessage\",\n    value: function _onMessage(event) {\n      var responses = this._parseResponses(event);\n      if (responses.length === 0) {\n        // no responses means lost connection, autoreconnect if possible\n        if (this._reconnectOptions.autoReconnect) {\n          this._reconnect();\n        }\n        return;\n      }\n      var _iterator2 = _createForOfIteratorHelper(responses),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var response = _step2.value;\n          if (jsonRpc.isResponseWithNotification(response) && response.method.endsWith('_subscription')) {\n            this._eventEmitter.emit('message', response);\n            return;\n          }\n          var requestId = jsonRpc.isBatchResponse(response) ? response[0].id : response.id;\n          var requestItem = this._sentRequestsQueue.get(requestId);\n          if (!requestItem) {\n            return;\n          }\n          if (jsonRpc.isBatchResponse(response) || jsonRpc.isResponseWithResult(response) || jsonRpc.isResponseWithError(response)) {\n            this._eventEmitter.emit('message', response);\n            requestItem.deferredPromise.resolve(response);\n          }\n          this._sentRequestsQueue.delete(requestId);\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n    }\n  }, {\n    key: \"_clearQueues\",\n    value: function _clearQueues(event) {\n      var _this5 = this;\n      if (this._pendingRequestsQueue.size > 0) {\n        this._pendingRequestsQueue.forEach(function (request, key) {\n          request.deferredPromise.reject(new ConnectionNotOpenError(event));\n          _this5._pendingRequestsQueue.delete(key);\n        });\n      }\n      if (this._sentRequestsQueue.size > 0) {\n        this._sentRequestsQueue.forEach(function (request, key) {\n          request.deferredPromise.reject(new ConnectionNotOpenError(event));\n          _this5._sentRequestsQueue.delete(key);\n        });\n      }\n      this._removeSocketListeners();\n    }\n  }]);\n  return SocketProvider;\n}(Eip1193Provider);","map":{"version":3,"names":["ConnectionError","ConnectionNotOpenError","InvalidClientError","MaxAttemptsReachedOnReconnectingError","PendingRequestsOnReconnectingError","RequestAlreadySentError","Web3WSProviderError","Eip1193Provider","ChunkResponseParser","isNullish","Web3DeferredPromise","jsonRpc","DEFAULT_RECONNECTION_OPTIONS","autoReconnect","delay","maxAttempts","NORMAL_CLOSE_CODE","SocketProvider","_Eip1193Provider","_inherits","_super","_createSuper","socketPath","socketOptions","reconnectOptions","_this","_classCallCheck","call","_connectionStatus","_onMessageHandler","_onMessage","bind","_assertThisInitialized","_onOpenHandler","_onConnect","_onCloseHandler","_onCloseEvent","_onErrorHandler","_onError","_validateProviderPath","_socketPath","_socketOptions","_reconnectOptions","Object","assign","_pendingRequestsQueue","Map","_sentRequestsQueue","_init","connect","chunkResponseParser","_eventEmitter","onError","_clearQueues","isReconnecting","_createClass","key","get","_socketConnection","value","_reconnectAttempts","_this2","_openSocketConnection","_addSocketListeners","e","message","concat","setImmediate","_reconnect","path","supportsSubscriptions","on","type","listener","once","removeListener","_onDisconnect","code","data","_get","_getPrototypeOf","prototype","disconnect","disconnectCode","_removeSocketListeners","getStatus","_closeSocketConnection","removeAllListeners","event","emit","reset","clear","_this3","size","forEach","request","deferredPromise","reject","delete","setTimeout","_context","next","Error","requestId","isBatchRequest","id","has","catch","error","_this4","reqItem","payload","set","abrupt","_sendToSocket","stop","_callee","_sendPendingRequests","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","err","f","responses","_parseResponses","length","_iterator2","_step2","response","isResponseWithNotification","method","endsWith","isBatchResponse","requestItem","isResponseWithResult","isResponseWithError","resolve","_this5"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-utils\\src\\socket_provider.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport {\n\tConnectionEvent,\n\tEip1193EventName,\n\tEthExecutionAPI,\n\tJsonRpcBatchRequest,\n\tJsonRpcBatchResponse,\n\tJsonRpcId,\n\tJsonRpcNotification,\n\tJsonRpcRequest,\n\tJsonRpcResponse,\n\tJsonRpcResponseWithResult,\n\tJsonRpcResult,\n\tProviderConnectInfo,\n\tProviderMessage,\n\tProviderRpcError,\n\tSocketRequestItem,\n\tWeb3APIMethod,\n\tWeb3APIPayload,\n\tWeb3APIReturnType,\n\tWeb3APISpec,\n\tWeb3Eip1193ProviderEventCallback,\n\tWeb3ProviderEventCallback,\n\tWeb3ProviderMessageEventCallback,\n\tWeb3ProviderStatus,\n} from 'web3-types';\nimport {\n\tConnectionError,\n\tConnectionNotOpenError,\n\tInvalidClientError,\n\tMaxAttemptsReachedOnReconnectingError,\n\tPendingRequestsOnReconnectingError,\n\tRequestAlreadySentError,\n\tWeb3WSProviderError,\n} from 'web3-errors';\nimport { Eip1193Provider } from './web3_eip1193_provider.js';\nimport { ChunkResponseParser } from './chunk_response_parser.js';\nimport { isNullish } from './validation.js';\nimport { Web3DeferredPromise } from './web3_deferred_promise.js';\nimport * as jsonRpc from './json_rpc.js';\n\nexport type ReconnectOptions = {\n\tautoReconnect: boolean;\n\tdelay: number;\n\tmaxAttempts: number;\n};\n\nconst DEFAULT_RECONNECTION_OPTIONS = {\n\tautoReconnect: true,\n\tdelay: 5000,\n\tmaxAttempts: 5,\n};\n\nconst NORMAL_CLOSE_CODE = 1000; // https://developer.mozilla.org/en-US/docs/Web/API/WebSocket/close\n\nexport abstract class SocketProvider<\n\tMessageEvent,\n\tCloseEvent,\n\tErrorEvent,\n\tAPI extends Web3APISpec = EthExecutionAPI,\n> extends Eip1193Provider<API> {\n\tprotected isReconnecting: boolean;\n\tprotected readonly _socketPath: string;\n\tprotected readonly chunkResponseParser: ChunkResponseParser;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _pendingRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\t/* eslint-disable @typescript-eslint/no-explicit-any */\n\tprotected readonly _sentRequestsQueue: Map<JsonRpcId, SocketRequestItem<any, any, any>>;\n\tprotected _reconnectAttempts!: number;\n\tprotected readonly _socketOptions?: unknown;\n\tprotected readonly _reconnectOptions: ReconnectOptions;\n\tprotected _socketConnection?: unknown;\n\tpublic get SocketConnection() {\n\t\treturn this._socketConnection;\n\t}\n\tprotected _connectionStatus: Web3ProviderStatus;\n\tprotected readonly _onMessageHandler: (event: MessageEvent) => void;\n\tprotected readonly _onOpenHandler: () => void;\n\tprotected readonly _onCloseHandler: (event: CloseEvent) => void;\n\tprotected readonly _onErrorHandler: (event: ErrorEvent) => void;\n\n\t/**\n\t * This is an abstract class for implementing a socket provider (e.g. WebSocket, IPC). It extends the EIP-1193 provider {@link EIP1193Provider}.\n\t * @param socketPath - The path to the socket (e.g. /ipc/path or ws://localhost:8546)\n\t * @param socketOptions - The options for the socket connection. Its type is supposed to be specified in the inherited classes.\n\t * @param reconnectOptions - The options for the socket reconnection {@link ReconnectOptions}\n\t */\n\tpublic constructor(\n\t\tsocketPath: string,\n\t\tsocketOptions?: unknown,\n\t\treconnectOptions?: Partial<ReconnectOptions>,\n\t) {\n\t\tsuper();\n\t\tthis._connectionStatus = 'connecting';\n\n\t\t// Message handlers. Due to bounding of `this` and removing the listeners we have to keep it's reference.\n\t\tthis._onMessageHandler = this._onMessage.bind(this);\n\t\tthis._onOpenHandler = this._onConnect.bind(this);\n\t\tthis._onCloseHandler = this._onCloseEvent.bind(this);\n\t\tthis._onErrorHandler = this._onError.bind(this);\n\n\t\tif (!this._validateProviderPath(socketPath)) throw new InvalidClientError(socketPath);\n\n\t\tthis._socketPath = socketPath;\n\t\tthis._socketOptions = socketOptions;\n\n\t\tthis._reconnectOptions = {\n\t\t\t...DEFAULT_RECONNECTION_OPTIONS,\n\t\t\t...(reconnectOptions ?? {}),\n\t\t};\n\n\t\tthis._pendingRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\t\tthis._sentRequestsQueue = new Map<JsonRpcId, SocketRequestItem<any, any, any>>();\n\n\t\tthis._init();\n\t\tthis.connect();\n\t\tthis.chunkResponseParser = new ChunkResponseParser(\n\t\t\tthis._eventEmitter,\n\t\t\tthis._reconnectOptions.autoReconnect,\n\t\t);\n\t\tthis.chunkResponseParser.onError(() => {\n\t\t\tthis._clearQueues();\n\t\t});\n\t\tthis.isReconnecting = false;\n\t}\n\n\tprotected _init() {\n\t\tthis._reconnectAttempts = 0;\n\t}\n\n\t/**\n\t * Try to establish a connection to the socket\n\t */\n\tpublic connect(): void {\n\t\ttry {\n\t\t\tthis._openSocketConnection();\n\t\t\tthis._connectionStatus = 'connecting';\n\t\t\tthis._addSocketListeners();\n\t\t} catch (e) {\n\t\t\tif (!this.isReconnecting) {\n\t\t\t\tthis._connectionStatus = 'disconnected';\n\t\t\t\tif (e && (e as Error).message) {\n\t\t\t\t\tthrow new ConnectionError(\n\t\t\t\t\t\t`Error while connecting to ${this._socketPath}. Reason: ${\n\t\t\t\t\t\t\t(e as Error).message\n\t\t\t\t\t\t}`,\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tthrow new InvalidClientError(this._socketPath);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tsetImmediate(() => {\n\t\t\t\t\tthis._reconnect();\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected abstract _openSocketConnection(): void;\n\tprotected abstract _addSocketListeners(): void;\n\n\tprotected abstract _removeSocketListeners(): void;\n\n\tprotected abstract _onCloseEvent(_event: unknown): void;\n\n\tprotected abstract _sendToSocket(_payload: Web3APIPayload<API, any>): void;\n\n\tprotected abstract _parseResponses(_event: MessageEvent): JsonRpcResponse[];\n\n\tprotected abstract _closeSocketConnection(_code?: number, _data?: string): void;\n\n\t// eslint-disable-next-line class-methods-use-this\n\tprotected _validateProviderPath(path: string): boolean {\n\t\treturn !!path;\n\t}\n\n\t/**\n\t *\n\t * @returns `true` if the socket supports subscriptions\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic supportsSubscriptions(): boolean {\n\t\treturn true;\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type.\n\t * @param type - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic on(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic on(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic on(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic on(type: 'accountsChanged', listener: Web3Eip1193ProviderEventCallback<string[]>): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic on<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.on(type, listener);\n\t}\n\n\t/**\n\t * Registers a listener for the specified event type that will be invoked at most once.\n\t * @param type  - The event type to listen for\n\t * @param listener - The callback to be invoked when the event is emitted\n\t */\n\tpublic once(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic once(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic once(type: 'chainChanged', listener: Web3Eip1193ProviderEventCallback<string>): void;\n\tpublic once(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic once<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.once(type, listener);\n\t}\n\n\t/**\n\t *  Removes a listener for the specified event type.\n\t * @param type - The event type to remove the listener for\n\t * @param listener - The callback to be executed\n\t */\n\tpublic removeListener(\n\t\ttype: 'disconnect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderRpcError>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'connect',\n\t\tlistener: Web3Eip1193ProviderEventCallback<ProviderConnectInfo>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'chainChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string>,\n\t): void;\n\tpublic removeListener(\n\t\ttype: 'accountsChanged',\n\t\tlistener: Web3Eip1193ProviderEventCallback<string[]>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: 'message',\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<ProviderMessage>\n\t\t\t| Web3ProviderMessageEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult>(\n\t\ttype: string,\n\t\tlistener: Web3Eip1193ProviderEventCallback<unknown> | Web3ProviderEventCallback<T>,\n\t): void;\n\tpublic removeListener<T = JsonRpcResult, P = unknown>(\n\t\ttype: string | Eip1193EventName,\n\t\tlistener:\n\t\t\t| Web3Eip1193ProviderEventCallback<P>\n\t\t\t| Web3ProviderMessageEventCallback<T>\n\t\t\t| Web3ProviderEventCallback<T>,\n\t): void {\n\t\tthis._eventEmitter.removeListener(type, listener);\n\t}\n\n\tprotected _onDisconnect(code: number, data?: string) {\n\t\tthis._connectionStatus = 'disconnected';\n\t\tsuper._onDisconnect(code, data);\n\t}\n\n\t/**\n\t * Disconnects the socket\n\t * @param code - The code to be sent to the server\n\t * @param data - The data to be sent to the server\n\t */\n\tpublic disconnect(code?: number, data?: string): void {\n\t\tconst disconnectCode = code ?? NORMAL_CLOSE_CODE;\n\t\tthis._removeSocketListeners();\n\t\tif (this.getStatus() !== 'disconnected') {\n\t\t\tthis._closeSocketConnection(disconnectCode, data);\n\t\t}\n\t\tthis._onDisconnect(disconnectCode, data);\n\t}\n\n\t/**\n\t * Removes all listeners for the specified event type.\n\t * @param type - The event type to remove the listeners for\n\t */\n\tpublic removeAllListeners(type: string): void {\n\t\tthis._eventEmitter.removeAllListeners(type);\n\t}\n\n\tprotected _onError(event: ErrorEvent): void {\n\t\t// do not emit error while trying to reconnect\n\t\tif (this.isReconnecting) {\n\t\t\tthis._reconnect();\n\t\t} else {\n\t\t\tthis._eventEmitter.emit('error', event);\n\t\t}\n\t}\n\n\t/**\n\t * Resets the socket, removing all listeners and pending requests\n\t */\n\tpublic reset(): void {\n\t\tthis._sentRequestsQueue.clear();\n\t\tthis._pendingRequestsQueue.clear();\n\n\t\tthis._init();\n\t\tthis._removeSocketListeners();\n\t\tthis._addSocketListeners();\n\t}\n\n\tprotected _reconnect(): void {\n\t\tif (this.isReconnecting) {\n\t\t\treturn;\n\t\t}\n\t\tthis.isReconnecting = true;\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new PendingRequestsOnReconnectingError());\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._reconnectAttempts < this._reconnectOptions.maxAttempts) {\n\t\t\tthis._reconnectAttempts += 1;\n\t\t\tsetTimeout(() => {\n\t\t\t\tthis._removeSocketListeners();\n\t\t\t\tthis.connect();\n\t\t\t\tthis.isReconnecting = false;\n\t\t\t}, this._reconnectOptions.delay);\n\t\t} else {\n\t\t\tthis.isReconnecting = false;\n\t\t\tthis._clearQueues();\n\t\t\tthis._removeSocketListeners();\n\t\t\tthis._eventEmitter.emit(\n\t\t\t\t'error',\n\t\t\t\tnew MaxAttemptsReachedOnReconnectingError(this._reconnectOptions.maxAttempts),\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t *  Creates a request object to be sent to the server\n\t */\n\tpublic async request<\n\t\tMethod extends Web3APIMethod<API>,\n\t\tResultType = Web3APIReturnType<API, Method>,\n\t>(request: Web3APIPayload<API, Method>): Promise<JsonRpcResponseWithResult<ResultType>> {\n\t\tif (isNullish(this._socketConnection)) {\n\t\t\tthrow new Error('Connection is undefined');\n\t\t}\n\t\t// if socket disconnected - open connection\n\t\tif (this.getStatus() === 'disconnected') {\n\t\t\tthis.connect();\n\t\t}\n\n\t\tconst requestId = jsonRpc.isBatchRequest(request)\n\t\t\t? (request as unknown as JsonRpcBatchRequest)[0].id\n\t\t\t: (request as unknown as JsonRpcRequest).id;\n\n\t\tif (!requestId) {\n\t\t\tthrow new Web3WSProviderError('Request Id not defined');\n\t\t}\n\n\t\tif (this._sentRequestsQueue.has(requestId)) {\n\t\t\tthrow new RequestAlreadySentError(requestId);\n\t\t}\n\n\t\tconst deferredPromise = new Web3DeferredPromise<JsonRpcResponseWithResult<ResultType>>();\n\t\tdeferredPromise.catch(error => {\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t});\n\t\tconst reqItem: SocketRequestItem<API, Method, JsonRpcResponseWithResult<ResultType>> = {\n\t\t\tpayload: request,\n\t\t\tdeferredPromise,\n\t\t};\n\n\t\tif (this.getStatus() === 'connecting') {\n\t\t\tthis._pendingRequestsQueue.set(requestId, reqItem);\n\n\t\t\treturn reqItem.deferredPromise;\n\t\t}\n\n\t\tthis._sentRequestsQueue.set(requestId, reqItem);\n\n\t\ttry {\n\t\t\tthis._sendToSocket(reqItem.payload);\n\t\t} catch (error) {\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\n\t\t\tthis._eventEmitter.emit('error', error);\n\t\t}\n\n\t\treturn deferredPromise;\n\t}\n\n\tprotected _onConnect() {\n\t\tthis._connectionStatus = 'connected';\n\t\tthis._reconnectAttempts = 0;\n\t\tsuper._onConnect();\n\t\tthis._sendPendingRequests();\n\t}\n\n\tprivate _sendPendingRequests() {\n\t\tfor (const [id, value] of this._pendingRequestsQueue.entries()) {\n\t\t\tthis._sendToSocket(value.payload as Web3APIPayload<API, any>);\n\t\t\tthis._pendingRequestsQueue.delete(id);\n\t\t\tthis._sentRequestsQueue.set(id, value);\n\t\t}\n\t}\n\n\tprotected _onMessage(event: MessageEvent): void {\n\t\tconst responses = this._parseResponses(event);\n\t\tif (responses.length === 0) {\n\t\t\t// no responses means lost connection, autoreconnect if possible\n\t\t\tif (this._reconnectOptions.autoReconnect) {\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tfor (const response of responses) {\n\t\t\tif (\n\t\t\t\tjsonRpc.isResponseWithNotification(response as JsonRpcNotification) &&\n\t\t\t\t(response as JsonRpcNotification).method.endsWith('_subscription')\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst requestId = jsonRpc.isBatchResponse(response)\n\t\t\t\t? (response as unknown as JsonRpcBatchResponse)[0].id\n\t\t\t\t: (response as unknown as JsonRpcResponseWithResult).id;\n\n\t\t\tconst requestItem = this._sentRequestsQueue.get(requestId);\n\n\t\t\tif (!requestItem) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (\n\t\t\t\tjsonRpc.isBatchResponse(response) ||\n\t\t\t\tjsonRpc.isResponseWithResult(response) ||\n\t\t\t\tjsonRpc.isResponseWithError(response)\n\t\t\t) {\n\t\t\t\tthis._eventEmitter.emit('message', response);\n\t\t\t\trequestItem.deferredPromise.resolve(response);\n\t\t\t}\n\n\t\t\tthis._sentRequestsQueue.delete(requestId);\n\t\t}\n\t}\n\n\tprotected _clearQueues(event?: ConnectionEvent) {\n\t\tif (this._pendingRequestsQueue.size > 0) {\n\t\t\tthis._pendingRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._pendingRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tif (this._sentRequestsQueue.size > 0) {\n\t\t\tthis._sentRequestsQueue.forEach(\n\t\t\t\t(request: SocketRequestItem<any, any, any>, key: JsonRpcId) => {\n\t\t\t\t\trequest.deferredPromise.reject(new ConnectionNotOpenError(event));\n\t\t\t\t\tthis._sentRequestsQueue.delete(key);\n\t\t\t\t},\n\t\t\t);\n\t\t}\n\n\t\tthis._removeSocketListeners();\n\t}\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyCA,SACCA,eAAe,EACfC,sBAAsB,EACtBC,kBAAkB,EAClBC,qCAAqC,EACrCC,kCAAkC,EAClCC,uBAAuB,EACvBC,mBAAmB,QACb,aAAa;AACpB,SAASC,eAAe,QAAQ,4BAA4B;AAC5D,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,SAASC,SAAS,QAAQ,iBAAiB;AAC3C,SAASC,mBAAmB,QAAQ,4BAA4B;AAChE,OAAO,KAAKC,OAAO,MAAM,eAAe;AAQxC,IAAMC,4BAA4B,GAAG;EACpCC,aAAa,EAAE,IAAI;EACnBC,KAAK,EAAE,IAAI;EACXC,WAAW,EAAE;CACb;AAED,IAAMC,iBAAiB,GAAG,IAAI,CAAC,CAAC;AAEhC,WAAsBC,cAKpB,0BAAAC,gBAAA;EAAAC,SAAA,CAAAF,cAAA,EAAAC,gBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,cAAA;EAqBD;;;;;;EAMA,SAAAA,eACCK,UAAkB,EAClBC,aAAuB,EACvBC,gBAA4C;IAAA,IAAAC,KAAA;IAAAC,eAAA,OAAAT,cAAA;IAE5CQ,KAAA,GAAAL,MAAA,CAAAO,IAAA;IACAF,KAAA,CAAKG,iBAAiB,GAAG,YAAY;IAErC;IACAH,KAAA,CAAKI,iBAAiB,GAAGJ,KAAA,CAAKK,UAAU,CAACC,IAAI,CAAAC,sBAAA,CAAAP,KAAA,CAAK,CAAC;IACnDA,KAAA,CAAKQ,cAAc,GAAGR,KAAA,CAAKS,UAAU,CAACH,IAAI,CAAAC,sBAAA,CAAAP,KAAA,CAAK,CAAC;IAChDA,KAAA,CAAKU,eAAe,GAAGV,KAAA,CAAKW,aAAa,CAACL,IAAI,CAAAC,sBAAA,CAAAP,KAAA,CAAK,CAAC;IACpDA,KAAA,CAAKY,eAAe,GAAGZ,KAAA,CAAKa,QAAQ,CAACP,IAAI,CAAAC,sBAAA,CAAAP,KAAA,CAAK,CAAC;IAE/C,IAAI,CAACA,KAAA,CAAKc,qBAAqB,CAACjB,UAAU,CAAC,EAAE,MAAM,IAAIpB,kBAAkB,CAACoB,UAAU,CAAC;IAErFG,KAAA,CAAKe,WAAW,GAAGlB,UAAU;IAC7BG,KAAA,CAAKgB,cAAc,GAAGlB,aAAa;IAEnCE,KAAA,CAAKiB,iBAAiB,GAAAC,MAAA,CAAAC,MAAA,CAAAD,MAAA,CAAAC,MAAA,KAClBhC,4BAA4B,GAC3BY,gBAAgB,aAAhBA,gBAAgB,cAAhBA,gBAAgB,GAAI,EAAG,CAC3B;IAEDC,KAAA,CAAKoB,qBAAqB,GAAG,IAAIC,GAAG,EAA+C;IACnFrB,KAAA,CAAKsB,kBAAkB,GAAG,IAAID,GAAG,EAA+C;IAEhFrB,KAAA,CAAKuB,KAAK,EAAE;IACZvB,KAAA,CAAKwB,OAAO,EAAE;IACdxB,KAAA,CAAKyB,mBAAmB,GAAG,IAAI1C,mBAAmB,CACjDiB,KAAA,CAAK0B,aAAa,EAClB1B,KAAA,CAAKiB,iBAAiB,CAAC7B,aAAa,CACpC;IACDY,KAAA,CAAKyB,mBAAmB,CAACE,OAAO,CAAC,YAAK;MACrC3B,KAAA,CAAK4B,YAAY,EAAE;IACpB,CAAC,CAAC;IACF5B,KAAA,CAAK6B,cAAc,GAAG,KAAK;IAAC,OAAA7B,KAAA;EAC7B;EAAC8B,YAAA,CAAAtC,cAAA;IAAAuC,GAAA;IAAAC,GAAA,EApDD,SAAAA,IAAA,EAA2B;MAC1B,OAAO,IAAI,CAACC,iBAAiB;IAC9B;EAAC;IAAAF,GAAA;IAAAG,KAAA,EAoDS,SAAAX,MAAA,EAAK;MACd,IAAI,CAACY,kBAAkB,GAAG,CAAC;IAC5B;IAEA;;;EAAA;IAAAJ,GAAA;IAAAG,KAAA,EAGO,SAAAV,QAAA,EAAO;MAAA,IAAAY,MAAA;MACb,IAAI;QACH,IAAI,CAACC,qBAAqB,EAAE;QAC5B,IAAI,CAAClC,iBAAiB,GAAG,YAAY;QACrC,IAAI,CAACmC,mBAAmB,EAAE;OAC1B,CAAC,OAAOC,CAAC,EAAE;QACX,IAAI,CAAC,IAAI,CAACV,cAAc,EAAE;UACzB,IAAI,CAAC1B,iBAAiB,GAAG,cAAc;UACvC,IAAIoC,CAAC,IAAKA,CAAW,CAACC,OAAO,EAAE;YAC9B,MAAM,IAAIjE,eAAe,8BAAAkE,MAAA,CACK,IAAI,CAAC1B,WAAW,gBAAA0B,MAAA,CAC3CF,CAAW,CAACC,OACd,CAAE,CACF;WACD,MAAM;YACN,MAAM,IAAI/D,kBAAkB,CAAC,IAAI,CAACsC,WAAW,CAAC;;SAE/C,MAAM;UACN2B,YAAY,CAAC,YAAK;YACjBN,MAAI,CAACO,UAAU,EAAE;UAClB,CAAC,CAAC;;;IAGL;IAeA;EAAA;IAAAZ,GAAA;IAAAG,KAAA,EACU,SAAApB,sBAAsB8B,IAAY;MAC3C,OAAO,CAAC,CAACA,IAAI;IACd;IAEA;;;;IAIA;EAAA;IAAAb,GAAA;IAAAG,KAAA,EACO,SAAAW,sBAAA,EAAqB;MAC3B,OAAO,IAAI;IACZ;EAAC;IAAAd,GAAA;IAAAG,KAAA,EA2BM,SAAAY,GACNC,IAA+B,EAC/BC,QAG+B;MAE/B,IAAI,CAACtB,aAAa,CAACoB,EAAE,CAACC,IAAI,EAAEC,QAAQ,CAAC;IACtC;EAAC;IAAAjB,GAAA;IAAAG,KAAA,EA8BM,SAAAe,KACNF,IAA+B,EAC/BC,QAG+B;MAE/B,IAAI,CAACtB,aAAa,CAACuB,IAAI,CAACF,IAAI,EAAEC,QAAQ,CAAC;IACxC;EAAC;IAAAjB,GAAA;IAAAG,KAAA,EAiCM,SAAAgB,eACNH,IAA+B,EAC/BC,QAG+B;MAE/B,IAAI,CAACtB,aAAa,CAACwB,cAAc,CAACH,IAAI,EAAEC,QAAQ,CAAC;IAClD;EAAC;IAAAjB,GAAA;IAAAG,KAAA,EAES,SAAAiB,cAAcC,IAAY,EAAEC,IAAa;MAClD,IAAI,CAAClD,iBAAiB,GAAG,cAAc;MACvCmD,IAAA,CAAAC,eAAA,CAAA/D,cAAA,CAAAgE,SAAA,0BAAAtD,IAAA,OAAoBkD,IAAI,EAAEC,IAAI;IAC/B;IAEA;;;;;EAAA;IAAAtB,GAAA;IAAAG,KAAA,EAKO,SAAAuB,WAAWL,IAAa,EAAEC,IAAa;MAC7C,IAAMK,cAAc,GAAGN,IAAI,aAAJA,IAAI,cAAJA,IAAI,GAAI7D,iBAAiB;MAChD,IAAI,CAACoE,sBAAsB,EAAE;MAC7B,IAAI,IAAI,CAACC,SAAS,EAAE,KAAK,cAAc,EAAE;QACxC,IAAI,CAACC,sBAAsB,CAACH,cAAc,EAAEL,IAAI,CAAC;;MAElD,IAAI,CAACF,aAAa,CAACO,cAAc,EAAEL,IAAI,CAAC;IACzC;IAEA;;;;EAAA;IAAAtB,GAAA;IAAAG,KAAA,EAIO,SAAA4B,mBAAmBf,IAAY;MACrC,IAAI,CAACrB,aAAa,CAACoC,kBAAkB,CAACf,IAAI,CAAC;IAC5C;EAAC;IAAAhB,GAAA;IAAAG,KAAA,EAES,SAAArB,SAASkD,KAAiB;MACnC;MACA,IAAI,IAAI,CAAClC,cAAc,EAAE;QACxB,IAAI,CAACc,UAAU,EAAE;OACjB,MAAM;QACN,IAAI,CAACjB,aAAa,CAACsC,IAAI,CAAC,OAAO,EAAED,KAAK,CAAC;;IAEzC;IAEA;;;EAAA;IAAAhC,GAAA;IAAAG,KAAA,EAGO,SAAA+B,MAAA,EAAK;MACX,IAAI,CAAC3C,kBAAkB,CAAC4C,KAAK,EAAE;MAC/B,IAAI,CAAC9C,qBAAqB,CAAC8C,KAAK,EAAE;MAElC,IAAI,CAAC3C,KAAK,EAAE;MACZ,IAAI,CAACoC,sBAAsB,EAAE;MAC7B,IAAI,CAACrB,mBAAmB,EAAE;IAC3B;EAAC;IAAAP,GAAA;IAAAG,KAAA,EAES,SAAAS,WAAA,EAAU;MAAA,IAAAwB,MAAA;MACnB,IAAI,IAAI,CAACtC,cAAc,EAAE;QACxB;;MAED,IAAI,CAACA,cAAc,GAAG,IAAI;MAE1B,IAAI,IAAI,CAACP,kBAAkB,CAAC8C,IAAI,GAAG,CAAC,EAAE;QACrC,IAAI,CAAC9C,kBAAkB,CAAC+C,OAAO,CAC9B,UAACC,OAAyC,EAAEvC,GAAc,EAAI;UAC7DuC,OAAO,CAACC,eAAe,CAACC,MAAM,CAAC,IAAI7F,kCAAkC,EAAE,CAAC;UACxEwF,MAAI,CAAC7C,kBAAkB,CAACmD,MAAM,CAAC1C,GAAG,CAAC;QACpC,CAAC,CACD;;MAGF,IAAI,IAAI,CAACI,kBAAkB,GAAG,IAAI,CAAClB,iBAAiB,CAAC3B,WAAW,EAAE;QACjE,IAAI,CAAC6C,kBAAkB,IAAI,CAAC;QAC5BuC,UAAU,CAAC,YAAK;UACfP,MAAI,CAACR,sBAAsB,EAAE;UAC7BQ,MAAI,CAAC3C,OAAO,EAAE;UACd2C,MAAI,CAACtC,cAAc,GAAG,KAAK;QAC5B,CAAC,EAAE,IAAI,CAACZ,iBAAiB,CAAC5B,KAAK,CAAC;OAChC,MAAM;QACN,IAAI,CAACwC,cAAc,GAAG,KAAK;QAC3B,IAAI,CAACD,YAAY,EAAE;QACnB,IAAI,CAAC+B,sBAAsB,EAAE;QAC7B,IAAI,CAACjC,aAAa,CAACsC,IAAI,CACtB,OAAO,EACP,IAAItF,qCAAqC,CAAC,IAAI,CAACuC,iBAAiB,CAAC3B,WAAW,CAAC,CAC7E;;IAEH;IAEA;;;EAAA;IAAAyC,GAAA;IAAAG,KAAA,EAGa,SAAAoC,QAGXA,QAAoC;;;;;;;mBACjCtF,SAAS,CAAC,IAAI,CAACiD,iBAAiB,CAAC;gBAAA0C,QAAA,CAAAC,IAAA;gBAAA;cAAA;cAAA,MAC9B,IAAIC,KAAK,CAAC,yBAAyB,CAAC;YAAA;cAE3C;cACA,IAAI,IAAI,CAACjB,SAAS,EAAE,KAAK,cAAc,EAAE;gBACxC,IAAI,CAACpC,OAAO,EAAE;;cAGTsD,SAAS,GAAG5F,OAAO,CAAC6F,cAAc,CAACT,QAAO,CAAC,GAC7CA,QAA0C,CAAC,CAAC,CAAC,CAACU,EAAE,GAChDV,QAAqC,CAACU,EAAE;cAAA,IAEvCF,SAAS;gBAAAH,QAAA,CAAAC,IAAA;gBAAA;cAAA;cAAA,MACP,IAAI/F,mBAAmB,CAAC,wBAAwB,CAAC;YAAA;cAAA,KAGpD,IAAI,CAACyC,kBAAkB,CAAC2D,GAAG,CAACH,SAAS,CAAC;gBAAAH,QAAA,CAAAC,IAAA;gBAAA;cAAA;cAAA,MACnC,IAAIhG,uBAAuB,CAACkG,SAAS,CAAC;YAAA;cAGvCP,eAAe,GAAG,IAAItF,mBAAmB,EAAyC;cACxFsF,eAAe,CAACW,KAAK,CAAC,UAAAC,KAAK,EAAG;gBAC7BC,MAAI,CAAC1D,aAAa,CAACsC,IAAI,CAAC,OAAO,EAAEmB,KAAK,CAAC;cACxC,CAAC,CAAC;cACIE,OAAO,GAA0E;gBACtFC,OAAO,EAAEhB,QAAO;gBAChBC,eAAe,EAAfA;eACA;cAAA,MAEG,IAAI,CAACX,SAAS,EAAE,KAAK,YAAY;gBAAAe,QAAA,CAAAC,IAAA;gBAAA;cAAA;cACpC,IAAI,CAACxD,qBAAqB,CAACmE,GAAG,CAACT,SAAS,EAAEO,OAAO,CAAC;cAAC,OAAAV,QAAA,CAAAa,MAAA,WAE5CH,OAAO,CAACd,eAAe;YAAA;cAG/B,IAAI,CAACjD,kBAAkB,CAACiE,GAAG,CAACT,SAAS,EAAEO,OAAO,CAAC;cAE/C,IAAI;gBACH,IAAI,CAACI,aAAa,CAACJ,OAAO,CAACC,OAAO,CAAC;eACnC,CAAC,OAAOH,KAAK,EAAE;gBACf,IAAI,CAAC7D,kBAAkB,CAACmD,MAAM,CAACK,SAAS,CAAC;gBAEzC,IAAI,CAACpD,aAAa,CAACsC,IAAI,CAAC,OAAO,EAAEmB,KAAK,CAAC;;cACvC,OAAAR,QAAA,CAAAa,MAAA,WAEMjB,eAAe;YAAA;YAAA;cAAA,OAAAI,QAAA,CAAAe,IAAA;UAAA;QAAA,GAAAC,OAAA;MAAA,CACtB;;EAAA;IAAA5D,GAAA;IAAAG,KAAA,EAES,SAAAzB,WAAA,EAAU;MACnB,IAAI,CAACN,iBAAiB,GAAG,WAAW;MACpC,IAAI,CAACgC,kBAAkB,GAAG,CAAC;MAC3BmB,IAAA,CAAAC,eAAA,CAAA/D,cAAA,CAAAgE,SAAA,uBAAAtD,IAAA;MACA,IAAI,CAAC0F,oBAAoB,EAAE;IAC5B;EAAC;IAAA7D,GAAA;IAAAG,KAAA,EAEO,SAAA0D,qBAAA,EAAoB;MAAA,IAAAC,SAAA,GAAAC,0BAAA,CACD,IAAI,CAAC1E,qBAAqB,CAAC2E,OAAO,EAAE;QAAAC,KAAA;MAAA;QAA9D,KAAAH,SAAA,CAAAI,CAAA,MAAAD,KAAA,GAAAH,SAAA,CAAAK,CAAA,IAAAC,IAAA,GAAgE;UAAA,IAAAC,WAAA,GAAAC,cAAA,CAAAL,KAAA,CAAA9D,KAAA;YAApD8C,EAAE,GAAAoB,WAAA;YAAElE,KAAK,GAAAkE,WAAA;UACpB,IAAI,CAACX,aAAa,CAACvD,KAAK,CAACoD,OAAmC,CAAC;UAC7D,IAAI,CAAClE,qBAAqB,CAACqD,MAAM,CAACO,EAAE,CAAC;UACrC,IAAI,CAAC1D,kBAAkB,CAACiE,GAAG,CAACP,EAAE,EAAE9C,KAAK,CAAC;;MACtC,SAAAoE,GAAA;QAAAT,SAAA,CAAAtD,CAAA,CAAA+D,GAAA;MAAA;QAAAT,SAAA,CAAAU,CAAA;MAAA;IACF;EAAC;IAAAxE,GAAA;IAAAG,KAAA,EAES,SAAA7B,WAAW0D,KAAmB;MACvC,IAAMyC,SAAS,GAAG,IAAI,CAACC,eAAe,CAAC1C,KAAK,CAAC;MAC7C,IAAIyC,SAAS,CAACE,MAAM,KAAK,CAAC,EAAE;QAC3B;QACA,IAAI,IAAI,CAACzF,iBAAiB,CAAC7B,aAAa,EAAE;UACzC,IAAI,CAACuD,UAAU,EAAE;;QAElB;;MACA,IAAAgE,UAAA,GAAAb,0BAAA,CACsBU,SAAS;QAAAI,MAAA;MAAA;QAAhC,KAAAD,UAAA,CAAAV,CAAA,MAAAW,MAAA,GAAAD,UAAA,CAAAT,CAAA,IAAAC,IAAA,GAAkC;UAAA,IAAvBU,QAAQ,GAAAD,MAAA,CAAA1E,KAAA;UAClB,IACChD,OAAO,CAAC4H,0BAA0B,CAACD,QAA+B,CAAC,IAClEA,QAAgC,CAACE,MAAM,CAACC,QAAQ,CAAC,eAAe,CAAC,EACjE;YACD,IAAI,CAACtF,aAAa,CAACsC,IAAI,CAAC,SAAS,EAAE6C,QAAQ,CAAC;YAC5C;;UAGD,IAAM/B,SAAS,GAAG5F,OAAO,CAAC+H,eAAe,CAACJ,QAAQ,CAAC,GAC/CA,QAA4C,CAAC,CAAC,CAAC,CAAC7B,EAAE,GAClD6B,QAAiD,CAAC7B,EAAE;UAExD,IAAMkC,WAAW,GAAG,IAAI,CAAC5F,kBAAkB,CAACU,GAAG,CAAC8C,SAAS,CAAC;UAE1D,IAAI,CAACoC,WAAW,EAAE;YACjB;;UAGD,IACChI,OAAO,CAAC+H,eAAe,CAACJ,QAAQ,CAAC,IACjC3H,OAAO,CAACiI,oBAAoB,CAACN,QAAQ,CAAC,IACtC3H,OAAO,CAACkI,mBAAmB,CAACP,QAAQ,CAAC,EACpC;YACD,IAAI,CAACnF,aAAa,CAACsC,IAAI,CAAC,SAAS,EAAE6C,QAAQ,CAAC;YAC5CK,WAAW,CAAC3C,eAAe,CAAC8C,OAAO,CAACR,QAAQ,CAAC;;UAG9C,IAAI,CAACvF,kBAAkB,CAACmD,MAAM,CAACK,SAAS,CAAC;;MACzC,SAAAwB,GAAA;QAAAK,UAAA,CAAApE,CAAA,CAAA+D,GAAA;MAAA;QAAAK,UAAA,CAAAJ,CAAA;MAAA;IACF;EAAC;IAAAxE,GAAA;IAAAG,KAAA,EAES,SAAAN,aAAamC,KAAuB;MAAA,IAAAuD,MAAA;MAC7C,IAAI,IAAI,CAAClG,qBAAqB,CAACgD,IAAI,GAAG,CAAC,EAAE;QACxC,IAAI,CAAChD,qBAAqB,CAACiD,OAAO,CACjC,UAACC,OAAyC,EAAEvC,GAAc,EAAI;UAC7DuC,OAAO,CAACC,eAAe,CAACC,MAAM,CAAC,IAAIhG,sBAAsB,CAACuF,KAAK,CAAC,CAAC;UACjEuD,MAAI,CAAClG,qBAAqB,CAACqD,MAAM,CAAC1C,GAAG,CAAC;QACvC,CAAC,CACD;;MAGF,IAAI,IAAI,CAACT,kBAAkB,CAAC8C,IAAI,GAAG,CAAC,EAAE;QACrC,IAAI,CAAC9C,kBAAkB,CAAC+C,OAAO,CAC9B,UAACC,OAAyC,EAAEvC,GAAc,EAAI;UAC7DuC,OAAO,CAACC,eAAe,CAACC,MAAM,CAAC,IAAIhG,sBAAsB,CAACuF,KAAK,CAAC,CAAC;UACjEuD,MAAI,CAAChG,kBAAkB,CAACmD,MAAM,CAAC1C,GAAG,CAAC;QACpC,CAAC,CACD;;MAGF,IAAI,CAAC4B,sBAAsB,EAAE;IAC9B;EAAC;EAAA,OAAAnE,cAAA;AAAA,EAncQV,eAAoB"},"metadata":{},"sourceType":"module","externalDependencies":[]}