{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _get from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable-next-line max-classes-per-file */\nimport { format } from 'web3-utils';\nimport { Web3Subscription } from 'web3-core';\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\nexport var LogsSubscription = /*#__PURE__*/function (_Web3Subscription) {\n  _inherits(LogsSubscription, _Web3Subscription);\n  var _super = _createSuper(LogsSubscription);\n  function LogsSubscription() {\n    _classCallCheck(this, LogsSubscription);\n    return _super.apply(this, arguments);\n  }\n  _createClass(LogsSubscription, [{\n    key: \"_buildSubscriptionParams\",\n    value: function _buildSubscriptionParams() {\n      return ['logs', this.args];\n    }\n  }, {\n    key: \"formatSubscriptionResult\",\n    value: function formatSubscriptionResult(data) {\n      return format(logSchema, data, _get(_getPrototypeOf(LogsSubscription.prototype), \"returnFormat\", this));\n    }\n  }]);\n  return LogsSubscription;\n}(Web3Subscription);\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\nexport var NewPendingTransactionsSubscription = /*#__PURE__*/function (_Web3Subscription2) {\n  _inherits(NewPendingTransactionsSubscription, _Web3Subscription2);\n  var _super2 = _createSuper(NewPendingTransactionsSubscription);\n  function NewPendingTransactionsSubscription() {\n    _classCallCheck(this, NewPendingTransactionsSubscription);\n    return _super2.apply(this, arguments);\n  }\n  _createClass(NewPendingTransactionsSubscription, [{\n    key: \"_buildSubscriptionParams\",\n    value:\n    // eslint-disable-next-line\n    function _buildSubscriptionParams() {\n      return ['newPendingTransactions'];\n    }\n  }, {\n    key: \"formatSubscriptionResult\",\n    value: function formatSubscriptionResult(data) {\n      return format({\n        format: 'string'\n      }, data, _get(_getPrototypeOf(NewPendingTransactionsSubscription.prototype), \"returnFormat\", this));\n    }\n  }]);\n  return NewPendingTransactionsSubscription;\n}(Web3Subscription);\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\nexport var NewHeadsSubscription = /*#__PURE__*/function (_Web3Subscription3) {\n  _inherits(NewHeadsSubscription, _Web3Subscription3);\n  var _super3 = _createSuper(NewHeadsSubscription);\n  function NewHeadsSubscription() {\n    _classCallCheck(this, NewHeadsSubscription);\n    return _super3.apply(this, arguments);\n  }\n  _createClass(NewHeadsSubscription, [{\n    key: \"_buildSubscriptionParams\",\n    value:\n    // eslint-disable-next-line\n    function _buildSubscriptionParams() {\n      return ['newHeads'];\n    }\n  }, {\n    key: \"formatSubscriptionResult\",\n    value: function formatSubscriptionResult(data) {\n      return format(blockHeaderSchema, data, _get(_getPrototypeOf(NewHeadsSubscription.prototype), \"returnFormat\", this));\n    }\n  }]);\n  return NewHeadsSubscription;\n}(Web3Subscription);\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\nexport var SyncingSubscription = /*#__PURE__*/function (_Web3Subscription4) {\n  _inherits(SyncingSubscription, _Web3Subscription4);\n  var _super4 = _createSuper(SyncingSubscription);\n  function SyncingSubscription() {\n    _classCallCheck(this, SyncingSubscription);\n    return _super4.apply(this, arguments);\n  }\n  _createClass(SyncingSubscription, [{\n    key: \"_buildSubscriptionParams\",\n    value:\n    // eslint-disable-next-line\n    function _buildSubscriptionParams() {\n      return ['syncing'];\n    }\n  }, {\n    key: \"_processSubscriptionResult\",\n    value: function _processSubscriptionResult(data) {\n      if (typeof data === 'boolean') {\n        this.emit('changed', data);\n      } else {\n        var mappedData = Object.fromEntries(Object.entries(data.status).map(function (_ref) {\n          var _ref2 = _slicedToArray(_ref, 2),\n            key = _ref2[0],\n            value = _ref2[1];\n          return [key.charAt(0).toLowerCase() + key.substring(1), value];\n        }));\n        this.emit('changed', data.syncing);\n        this.emit('data', format(syncSchema, mappedData, _get(_getPrototypeOf(SyncingSubscription.prototype), \"returnFormat\", this)));\n      }\n    }\n  }]);\n  return SyncingSubscription;\n}(Web3Subscription);","map":{"version":3,"names":["format","Web3Subscription","blockHeaderSchema","logSchema","syncSchema","LogsSubscription","_Web3Subscription","_inherits","_super","_createSuper","_classCallCheck","apply","arguments","_createClass","key","value","_buildSubscriptionParams","args","formatSubscriptionResult","data","_get","_getPrototypeOf","prototype","NewPendingTransactionsSubscription","_Web3Subscription2","_super2","NewHeadsSubscription","_Web3Subscription3","_super3","SyncingSubscription","_Web3Subscription4","_super4","_processSubscriptionResult","emit","mappedData","Object","fromEntries","entries","status","map","_ref","_ref2","_slicedToArray","charAt","toLowerCase","substring","syncing"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth\\src\\web3_subscriptions.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n/* eslint-disable-next-line max-classes-per-file */\nimport { format } from 'web3-utils';\n\nimport {\n\tSyncOutput,\n\tAddress,\n\tBlockNumberOrTag,\n\tHexString,\n\tTopic,\n\tBlockHeaderOutput,\n\tLogsOutput,\n} from 'web3-types';\nimport { Web3Subscription } from 'web3-core';\nimport { blockHeaderSchema, logSchema, syncSchema } from './schemas.js';\n\n/**\n * ## subscribe('logs')\n * Subscribes to incoming logs, filtered by the given options. If a valid numerical fromBlock options property is set, web3.js will retrieve logs beginning from this point, backfilling the response as necessary.\n *\n * You can subscribe to logs matching a given filter object, which can take the following parameters:\n * - `fromBlock`: (optional, default: 'latest') Integer block number, or `'latest'` for the last mined block or `'pending'`, `'earliest'` for not yet mined transactions.\n * - `address`: (optional) Contract address or a list of addresses from which logs should originate.\n * - `topics`: (optional) Array of 32 Bytes DATA topics. Topics are order-dependent. Each topic can also be an array of DATA with `or` options.\n *\n */\nexport class LogsSubscription extends Web3Subscription<\n\t{\n\t\tdata: LogsOutput;\n\t},\n\t{\n\t\treadonly fromBlock?: BlockNumberOrTag;\n\t\treadonly address?: Address | Address[];\n\t\treadonly topics?: Topic[];\n\t}\n> {\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['logs', this.args];\n\t}\n\n\tprotected formatSubscriptionResult(data: LogsOutput) {\n\t\treturn format(logSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('pendingTransactions')\n * Subscribes to incoming pending transactions.\n *\n * You can subscribe to pending transactions by calling web3.eth.subscribe('pendingTransactions').\n * @example\n * ```ts\n * (await web3.eth.subscribe('pendingTransactions')).on('data', console.log);\n * ```\n */\nexport class NewPendingTransactionsSubscription extends Web3Subscription<{\n\tdata: HexString;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newPendingTransactions'];\n\t}\n\n\tprotected formatSubscriptionResult(data: string) {\n\t\treturn format({ format: 'string' }, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('newHeads') ( same as subscribe('newBlockHeaders'))\n *\n * Subscribes to incoming block headers. This can be used as timer to check for changes on the blockchain.\n *\n * The structure of a returned block header is {@link BlockHeaderOutput}:\n * @example\n * ```ts\n * (await web3.eth.subscribe('newHeads')).on( // 'newBlockHeaders' would work as well\n *  'data',\n * console.log\n * );\n * >{\n * parentHash: '0x9e746a1d906b299def98c75b06f714d62dacadd567c7515d76eeaa8c8074c738',\n * sha3Uncles: '0x1dcc4de8dec75d7aab85b567b6ccd41ad312451b948a7413f0a142fd40d49347',\n * miner: '0x0000000000000000000000000000000000000000',\n * stateRoot: '0xe0f04b04861ecfa95e82a9310d6a7ef7aef8d7417f5209c182582bfb98a8e307',\n * transactionsRoot: '0x31ab4ea571a9e10d3a19aaed07d190595b1dfa34e03960c04293fec565dea536',\n * logsBloom: '0x00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',\n * difficulty: 2n,\n * number: 21n,\n * gasLimit: 11738125n,\n * gasUsed: 830006n,\n * timestamp: 1678797237n,\n * extraData: '0xd883010b02846765746888676f312e32302e31856c696e757800000000000000e0a6e93cf40e2e71a72e493272210c3f43738ccc7e7d7b14ffd51833797d896c09117e8dc4fbcbc969bd21b42e5af3e276a911524038c001b2109b63b8e0352601',\n * nonce: 0n\n * }\n * ```\n */\nexport class NewHeadsSubscription extends Web3Subscription<{\n\tdata: BlockHeaderOutput;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['newHeads'];\n\t}\n\n\tprotected formatSubscriptionResult(data: BlockHeaderOutput): BlockHeaderOutput {\n\t\treturn format(blockHeaderSchema, data, super.returnFormat);\n\t}\n}\n\n/**\n * ## subscribe('syncing')\n *\n * Subscribe to syncing events. This will return `true` when the node is syncing and when itâ€™s finished syncing will return `false`, for the `changed` event.\n * @example\n * ```ts\n * (await web3.eth.subscribe('syncing')).on('changed', console.log);\n * > `true` // when syncing\n *\n * (await web3.eth.subscribe('syncing')).on('data', console.log);\n * > {\n *      startingBlock: 0,\n *      currentBlock: 0,\n *      highestBlock: 0,\n *      pulledStates: 0,\n *      knownStates: 0\n *   }\n * ```\n */\nexport class SyncingSubscription extends Web3Subscription<{\n\tdata: SyncOutput;\n\tchanged: boolean;\n}> {\n\t// eslint-disable-next-line\n\tprotected _buildSubscriptionParams() {\n\t\treturn ['syncing'];\n\t}\n\n\tpublic _processSubscriptionResult(\n\t\tdata:\n\t\t\t| {\n\t\t\t\t\tsyncing: boolean;\n\t\t\t\t\tstatus: SyncOutput;\n\t\t\t  }\n\t\t\t| boolean,\n\t) {\n\t\tif (typeof data === 'boolean') {\n\t\t\tthis.emit('changed', data);\n\t\t} else {\n\t\t\tconst mappedData: SyncOutput = Object.fromEntries(\n\t\t\t\tObject.entries(data.status).map(([key, value]) => [\n\t\t\t\t\tkey.charAt(0).toLowerCase() + key.substring(1),\n\t\t\t\t\tvalue,\n\t\t\t\t]),\n\t\t\t) as SyncOutput;\n\n\t\t\tthis.emit('changed', data.syncing);\n\t\t\tthis.emit('data', format(syncSchema, mappedData, super.returnFormat));\n\t\t}\n\t}\n}\n"],"mappings":";;;;;;;AAAA;;;;;;;;;;;;;;;;AAgBA;AACA,SAASA,MAAM,QAAQ,YAAY;AAWnC,SAASC,gBAAgB,QAAQ,WAAW;AAC5C,SAASC,iBAAiB,EAAEC,SAAS,EAAEC,UAAU,QAAQ,cAAc;AAEvE;;;;;;;;;;AAUA,WAAaC,gBAAiB,0BAAAC,iBAAA;EAAAC,SAAA,CAAAF,gBAAA,EAAAC,iBAAA;EAAA,IAAAE,MAAA,GAAAC,YAAA,CAAAJ,gBAAA;EAAA,SAAAA,iBAAA;IAAAK,eAAA,OAAAL,gBAAA;IAAA,OAAAG,MAAA,CAAAG,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAR,gBAAA;IAAAS,GAAA;IAAAC,KAAA,EAUnB,SAAAC,yBAAA,EAAwB;MACjC,OAAO,CAAC,MAAM,EAAE,IAAI,CAACC,IAAI,CAAC;IAC3B;EAAC;IAAAH,GAAA;IAAAC,KAAA,EAES,SAAAG,yBAAyBC,IAAgB;MAClD,OAAOnB,MAAM,CAACG,SAAS,EAAEgB,IAAI,EAAAC,IAAA,CAAAC,eAAA,CAAAhB,gBAAA,CAAAiB,SAAA,wBAAoB,CAAC;IACnD;EAAC;EAAA,OAAAjB,gBAAA;AAAA,EAhBoCJ,gBASrC;AAUD;;;;;;;;;;AAUA,WAAasB,kCAAmC,0BAAAC,kBAAA;EAAAjB,SAAA,CAAAgB,kCAAA,EAAAC,kBAAA;EAAA,IAAAC,OAAA,GAAAhB,YAAA,CAAAc,kCAAA;EAAA,SAAAA,mCAAA;IAAAb,eAAA,OAAAa,kCAAA;IAAA,OAAAE,OAAA,CAAAd,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAU,kCAAA;IAAAT,GAAA;IAAAC,KAAA;IAG/C;IACU,SAAAC,yBAAA,EAAwB;MACjC,OAAO,CAAC,wBAAwB,CAAC;IAClC;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAES,SAAAG,yBAAyBC,IAAY;MAC9C,OAAOnB,MAAM,CAAC;QAAEA,MAAM,EAAE;MAAQ,CAAE,EAAEmB,IAAI,EAAAC,IAAA,CAAAC,eAAA,CAAAE,kCAAA,CAAAD,SAAA,wBAAoB,CAAC;IAC9D;EAAC;EAAA,OAAAC,kCAAA;AAAA,EAVsDtB,gBAEtD;AAWF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6BA,WAAayB,oBAAqB,0BAAAC,kBAAA;EAAApB,SAAA,CAAAmB,oBAAA,EAAAC,kBAAA;EAAA,IAAAC,OAAA,GAAAnB,YAAA,CAAAiB,oBAAA;EAAA,SAAAA,qBAAA;IAAAhB,eAAA,OAAAgB,oBAAA;IAAA,OAAAE,OAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAa,oBAAA;IAAAZ,GAAA;IAAAC,KAAA;IAGjC;IACU,SAAAC,yBAAA,EAAwB;MACjC,OAAO,CAAC,UAAU,CAAC;IACpB;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAES,SAAAG,yBAAyBC,IAAuB;MACzD,OAAOnB,MAAM,CAACE,iBAAiB,EAAEiB,IAAI,EAAAC,IAAA,CAAAC,eAAA,CAAAK,oBAAA,CAAAJ,SAAA,wBAAoB,CAAC;IAC3D;EAAC;EAAA,OAAAI,oBAAA;AAAA,EAVwCzB,gBAExC;AAWF;;;;;;;;;;;;;;;;;;;AAmBA,WAAa4B,mBAAoB,0BAAAC,kBAAA;EAAAvB,SAAA,CAAAsB,mBAAA,EAAAC,kBAAA;EAAA,IAAAC,OAAA,GAAAtB,YAAA,CAAAoB,mBAAA;EAAA,SAAAA,oBAAA;IAAAnB,eAAA,OAAAmB,mBAAA;IAAA,OAAAE,OAAA,CAAApB,KAAA,OAAAC,SAAA;EAAA;EAAAC,YAAA,CAAAgB,mBAAA;IAAAf,GAAA;IAAAC,KAAA;IAIhC;IACU,SAAAC,yBAAA,EAAwB;MACjC,OAAO,CAAC,SAAS,CAAC;IACnB;EAAC;IAAAF,GAAA;IAAAC,KAAA,EAEM,SAAAiB,2BACNb,IAKU;MAEV,IAAI,OAAOA,IAAI,KAAK,SAAS,EAAE;QAC9B,IAAI,CAACc,IAAI,CAAC,SAAS,EAAEd,IAAI,CAAC;OAC1B,MAAM;QACN,IAAMe,UAAU,GAAeC,MAAM,CAACC,WAAW,CAChDD,MAAM,CAACE,OAAO,CAAClB,IAAI,CAACmB,MAAM,CAAC,CAACC,GAAG,CAAC,UAAAC,IAAA;UAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;YAAE1B,GAAG,GAAA2B,KAAA;YAAE1B,KAAK,GAAA0B,KAAA;UAAA,OAAM,CACjD3B,GAAG,CAAC6B,MAAM,CAAC,CAAC,CAAC,CAACC,WAAW,EAAE,GAAG9B,GAAG,CAAC+B,SAAS,CAAC,CAAC,CAAC,EAC9C9B,KAAK,CACL;QAAA,EAAC,CACY;QAEf,IAAI,CAACkB,IAAI,CAAC,SAAS,EAAEd,IAAI,CAAC2B,OAAO,CAAC;QAClC,IAAI,CAACb,IAAI,CAAC,MAAM,EAAEjC,MAAM,CAACI,UAAU,EAAE8B,UAAU,EAAAd,IAAA,CAAAC,eAAA,CAAAQ,mBAAA,CAAAP,SAAA,wBAAoB,CAAC,CAAC;;IAEvE;EAAC;EAAA,OAAAO,mBAAA;AAAA,EA9BuC5B,gBAGvC"},"metadata":{},"sourceType":"module","externalDependencies":[]}