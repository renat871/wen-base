{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { bigIntToHex, bigIntToUnpaddedUint8Array, ecrecover, toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport { Capability } from './types.js';\nvar TRANSACTION_TYPE = 0;\nfunction meetsEIP155(_v, chainId) {\n  var v = Number(_v);\n  var chainIdDoubled = Number(chainId) * 2;\n  return v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport var Transaction = /*#__PURE__*/function (_BaseTransaction) {\n  _inherits(Transaction, _BaseTransaction);\n  var _super = _createSuper(Transaction);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function Transaction(txData) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, Transaction);\n    var _a;\n    _this = _super.call(this, Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    _this.common = _this._validateTxV(_this.v, opts.common);\n    _this.gasPrice = uint8ArrayToBigInt(toUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice));\n    if (_this.gasPrice * _this.gasLimit > MAX_INTEGER) {\n      var msg = _this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (_this.common.gteHardfork('spuriousDragon')) {\n      if (!_this.isSigned()) {\n        _this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n      } else {\n        // EIP155 spec:\n        // If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n        // then when computing the hash of a transaction for purposes of signing or recovering\n        // instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n        // hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n        // v and chain ID meet EIP-155 conditions\n        // eslint-disable-next-line no-lonely-if\n        if (meetsEIP155(_this.v, _this.common.chainId())) {\n          _this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n        }\n      }\n    }\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n   *\n   * Notes:\n   * - All parameters are optional and have some basic default values\n   */\n  _createClass(Transaction, [{\n    key: \"raw\",\n    value:\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     *\n     * For legacy txs this is also the correct format to add transactions\n     * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n     * for typed txs).\n     *\n     * For an unsigned tx this method returns the empty Uint8Array values\n     * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n     * representation have a look at {@link Transaction.getMessageToSign}.\n     */\n    function raw() {\n      return [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n    }\n    /**\n     * Returns the serialized encoding of the legacy transaction.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link Transaction.getMessageToSign}.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      return RLP.encode(this.raw());\n    }\n  }, {\n    key: \"_getMessageToSign\",\n    value: function _getMessageToSign() {\n      var values = [bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data];\n      if (this.supports(Capability.EIP155ReplayProtection)) {\n        values.push(toUint8Array(this.common.chainId()));\n        values.push(unpadUint8Array(toUint8Array(0)));\n        values.push(unpadUint8Array(toUint8Array(0)));\n      }\n      return values;\n    }\n  }, {\n    key: \"getMessageToSign\",\n    value: function getMessageToSign() {\n      var hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var message = this._getMessageToSign();\n      if (hashMessage) {\n        return keccak256(RLP.encode(message));\n      }\n      return message;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n  }, {\n    key: \"getDataFee\",\n    value: function getDataFee() {\n      if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n        return this.cache.dataFee.value;\n      }\n      if (Object.isFrozen(this)) {\n        this.cache.dataFee = {\n          value: _get(_getPrototypeOf(Transaction.prototype), \"getDataFee\", this).call(this),\n          hardfork: this.common.hardfork()\n        };\n      }\n      return _get(_getPrototypeOf(Transaction.prototype), \"getDataFee\", this).call(this);\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n  }, {\n    key: \"getUpfrontCost\",\n    value: function getUpfrontCost() {\n      return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n        throw new Error(msg);\n      }\n      if (Object.isFrozen(this)) {\n        if (!this.cache.hash) {\n          this.cache.hash = keccak256(RLP.encode(this.raw()));\n        }\n        return this.cache.hash;\n      }\n      return keccak256(RLP.encode(this.raw()));\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n  }, {\n    key: \"getMessageToVerifySignature\",\n    value: function getMessageToVerifySignature() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('This transaction is not signed');\n        throw new Error(msg);\n      }\n      var message = this._getMessageToSign();\n      return keccak256(RLP.encode(message));\n    }\n    /**\n     * Returns the public key of the sender\n     */\n  }, {\n    key: \"getSenderPublicKey\",\n    value: function getSenderPublicKey() {\n      var msgHash = this.getMessageToVerifySignature();\n      var v = this.v,\n        r = this.r,\n        s = this.s;\n      this._validateHighS();\n      try {\n        return ecrecover(msgHash, v, bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s), this.supports(Capability.EIP155ReplayProtection) ? this.common.chainId() : undefined);\n      } catch (e) {\n        var msg = this._errorMsg('Invalid Signature');\n        throw new Error(msg);\n      }\n    }\n    /**\n     * Process the v, r, s values from the `sign` method of the base transaction.\n     */\n  }, {\n    key: \"_processSignature\",\n    value: function _processSignature(_v, r, s) {\n      var v = _v;\n      if (this.supports(Capability.EIP155ReplayProtection)) {\n        v += this.common.chainId() * BigInt(2) + BigInt(8);\n      }\n      var opts = Object.assign(Object.assign({}, this.txOptions), {\n        common: this.common\n      });\n      return Transaction.fromTxData({\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        v: v,\n        r: uint8ArrayToBigInt(r),\n        s: uint8ArrayToBigInt(s)\n      }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction.\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        nonce: bigIntToHex(this.nonce),\n        gasPrice: bigIntToHex(this.gasPrice),\n        gasLimit: bigIntToHex(this.gasLimit),\n        to: this.to !== undefined ? this.to.toString() : undefined,\n        value: bigIntToHex(this.value),\n        data: bytesToHex(this.data),\n        v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n        r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n        s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n      };\n    }\n    /**\n     * Validates tx's `v` value\n     */\n  }, {\n    key: \"_validateTxV\",\n    value: function _validateTxV(_v, common) {\n      var chainIdBigInt;\n      var v = _v !== undefined ? Number(_v) : undefined;\n      // Check for valid v values in the scope of a signed legacy tx\n      if (v !== undefined) {\n        // v is 1. not matching the EIP-155 chainId included case and...\n        // v is 2. not matching the classic v=27 or v=28 case\n        if (v < 37 && v !== 27 && v !== 28) {\n          throw new Error(\"Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = \".concat(v));\n        }\n      }\n      // No unsigned tx and EIP-155 activated and chain ID included\n      if (v !== undefined && v !== 0 && (!common || common.gteHardfork('spuriousDragon')) && v !== 27 && v !== 28) {\n        if (common) {\n          if (!meetsEIP155(BigInt(v), common.chainId())) {\n            throw new Error(\"Incompatible EIP155-based V \".concat(v, \" and chain id \").concat(common.chainId(), \". See the Common parameter of the Transaction constructor to set the chain id.\"));\n          }\n        } else {\n          // Derive the original chain ID\n          var numSub;\n          if ((v - 35) % 2 === 0) {\n            numSub = 35;\n          } else {\n            numSub = 36;\n          }\n          // Use derived chain ID to create a proper Common\n          chainIdBigInt = BigInt(v - numSub) / BigInt(2);\n        }\n      }\n      return this._getCommon(common, chainIdBigInt);\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n  }, {\n    key: \"errorStr\",\n    value: function errorStr() {\n      var errorStr = this._getSharedErrorPostfix();\n      errorStr += \" gasPrice=\".concat(this.gasPrice);\n      return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n  }, {\n    key: \"_errorMsg\",\n    value: function _errorMsg(msg) {\n      return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    }\n  }], [{\n    key: \"fromTxData\",\n    value: function fromTxData(txData) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n     */\n  }, {\n    key: \"fromSerializedTx\",\n    value: function fromSerializedTx(serialized) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var values = RLP.decode(serialized);\n      if (!Array.isArray(values)) {\n        throw new Error('Invalid serialized tx input. Must be array');\n      }\n      return this.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n     */\n  }, {\n    key: \"fromValuesArray\",\n    value: function fromValuesArray(values) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      // If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n      // This happens if you get the RLP data from `raw()`\n      if (values.length !== 6 && values.length !== 9) {\n        throw new Error('Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).');\n      }\n      var _values = _slicedToArray(values, 9),\n        nonce = _values[0],\n        gasPrice = _values[1],\n        gasLimit = _values[2],\n        to = _values[3],\n        value = _values[4],\n        data = _values[5],\n        v = _values[6],\n        r = _values[7],\n        s = _values[8];\n      validateNoLeadingZeroes({\n        nonce: nonce,\n        gasPrice: gasPrice,\n        gasLimit: gasLimit,\n        value: value,\n        v: v,\n        r: r,\n        s: s\n      });\n      return new Transaction({\n        nonce: nonce,\n        gasPrice: gasPrice,\n        gasLimit: gasLimit,\n        to: to,\n        value: value,\n        data: data,\n        v: v,\n        r: r,\n        s: s\n      }, opts);\n    }\n  }]);\n  return Transaction;\n}(BaseTransaction);","map":{"version":3,"names":["RLP","keccak256","bytesToHex","validateNoLeadingZeroes","bigIntToHex","bigIntToUnpaddedUint8Array","ecrecover","toUint8Array","uint8ArrayToBigInt","unpadUint8Array","MAX_INTEGER","BaseTransaction","Capability","TRANSACTION_TYPE","meetsEIP155","_v","chainId","v","Number","chainIdDoubled","Transaction","_BaseTransaction","_inherits","_super","_createSuper","txData","_this","opts","arguments","length","undefined","_classCallCheck","call","Object","assign","type","common","_validateTxV","gasPrice","gasLimit","msg","_errorMsg","Error","_validateCannotExceedMaxInteger","_validateNotArray","gteHardfork","isSigned","activeCapabilities","push","EIP155ReplayProtection","freeze","_a","_assertThisInitialized","_createClass","key","value","raw","nonce","to","buf","Uint8Array","from","data","r","s","serialize","encode","_getMessageToSign","values","supports","getMessageToSign","hashMessage","message","getDataFee","cache","dataFee","hardfork","isFrozen","_get","_getPrototypeOf","prototype","getUpfrontCost","hash","getMessageToVerifySignature","getSenderPublicKey","msgHash","_validateHighS","e","_processSignature","BigInt","txOptions","fromTxData","toJSON","toString","chainIdBigInt","concat","numSub","_getCommon","errorStr","_getSharedErrorPostfix","fromSerializedTx","serialized","decode","Array","isArray","fromValuesArray","_values","_slicedToArray"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\legacyTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { RLP } from '@ethereumjs/rlp';\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { bytesToHex } from 'web3-utils';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport {\n\tbigIntToHex,\n\tbigIntToUnpaddedUint8Array,\n\tecrecover,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../common/utils.js';\nimport { MAX_INTEGER } from './constants.js';\n\nimport { BaseTransaction } from './baseTransaction.js';\n\nimport type { Common } from '../common/common.js';\nimport type { JsonTx, TxData, TxOptions, TxValuesArray } from './types.js';\nimport { Capability } from './types.js';\n\nconst TRANSACTION_TYPE = 0;\n\nfunction meetsEIP155(_v: bigint, chainId: bigint) {\n\tconst v = Number(_v);\n\tconst chainIdDoubled = Number(chainId) * 2;\n\treturn v === chainIdDoubled + 35 || v === chainIdDoubled + 36;\n}\n\n/**\n * An Ethereum non-typed (legacy) transaction\n */\n// eslint-disable-next-line no-use-before-define\nexport class Transaction extends BaseTransaction<Transaction> {\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { nonce, gasPrice, gasLimit, to, value, data, v, r, s }\n\t *\n\t * Notes:\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: TxData, opts: TxOptions = {}) {\n\t\treturn new Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tconst values = RLP.decode(serialized);\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input. Must be array');\n\t\t}\n\n\t\treturn this.fromValuesArray(values as Uint8Array[], opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t */\n\tpublic static fromValuesArray(values: TxValuesArray, opts: TxOptions = {}) {\n\t\t// If length is not 6, it has length 9. If v/r/s are empty Uint8Array, it is still an unsigned transaction\n\t\t// This happens if you get the RLP data from `raw()`\n\t\tif (values.length !== 6 && values.length !== 9) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid transaction. Only expecting 6 values (for unsigned tx) or 9 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [nonce, gasPrice, gasLimit, to, value, data, v, r, s] = values;\n\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\treturn new Transaction(\n\t\t\t{\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\tv,\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\n\t\tthis.common = this._validateTxV(this.v, opts.common);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(txData.gasPrice === '' ? '0x' : txData.gasPrice),\n\t\t);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gas limit * gasPrice cannot exceed MAX_INTEGER (2^256-1)');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tthis._validateCannotExceedMaxInteger({ gasPrice: this.gasPrice });\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.common.gteHardfork('spuriousDragon')) {\n\t\t\tif (!this.isSigned()) {\n\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t} else {\n\t\t\t\t// EIP155 spec:\n\t\t\t\t// If block.number >= 2,675,000 and v = CHAIN_ID * 2 + 35 or v = CHAIN_ID * 2 + 36\n\t\t\t\t// then when computing the hash of a transaction for purposes of signing or recovering\n\t\t\t\t// instead of hashing only the first six elements (i.e. nonce, gasprice, startgas, to, value, data)\n\t\t\t\t// hash nine elements, with v replaced by CHAIN_ID, r = 0 and s = 0.\n\t\t\t\t// v and chain ID meet EIP-155 conditions\n\t\t\t\t// eslint-disable-next-line no-lonely-if\n\t\t\t\tif (meetsEIP155(this.v!, this.common.chainId())) {\n\t\t\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the legacy transaction, in order.\n\t *\n\t * Format: `[nonce, gasPrice, gasLimit, to, value, data, v, r, s]`\n\t *\n\t * For legacy txs this is also the correct format to add transactions\n\t * to a block with {@link Block.fromValuesArray} (use the `serialize()` method\n\t * for typed txs).\n\t *\n\t * For an unsigned tx this method returns the empty Uint8Array values\n\t * for the signature parameters `v`, `r` and `s`. For an EIP-155 compliant\n\t * representation have a look at {@link Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): TxValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the legacy transaction.\n\t *\n\t * Format: `rlp([nonce, gasPrice, gasLimit, to, value, data, v, r, s])`\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link Transaction.getMessageToSign}.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\treturn RLP.encode(this.raw());\n\t}\n\n\tprivate _getMessageToSign() {\n\t\tconst values = [\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t];\n\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tvalues.push(toUint8Array(this.common.chainId()));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t\tvalues.push(unpadUint8Array(toUint8Array(0)));\n\t\t}\n\n\t\treturn values;\n\t}\n\n\t/**\n\t * Returns the unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: the raw message message format for the legacy tx is not RLP encoded\n\t * and you might need to do yourself with:\n\t *\n\t * ```javascript\n\t * import { bufArrToArr } from '../util'\n\t * import { RLP } from '../rlp'\n\t * const message = tx.getMessageToSign(false)\n\t * const serializedMessage = RLP.encode(message) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage: false): Uint8Array[];\n\tpublic getMessageToSign(hashMessage?: true): Uint8Array;\n\tpublic getMessageToSign(hashMessage = true) {\n\t\tconst message = this._getMessageToSign();\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(RLP.encode(message));\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: super.getDataFee(),\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn super.getDataFee();\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(RLP.encode(this.raw()));\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(RLP.encode(this.raw()));\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature() {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('This transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\tconst message = this._getMessageToSign();\n\t\treturn keccak256(RLP.encode(message));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv!,\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t\tthis.supports(Capability.EIP155ReplayProtection)\n\t\t\t\t\t? this.common.chainId()\n\t\t\t\t\t: undefined,\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * Process the v, r, s values from the `sign` method of the base transaction.\n\t */\n\tprotected _processSignature(_v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tlet v = _v;\n\t\tif (this.supports(Capability.EIP155ReplayProtection)) {\n\t\t\tv += this.common.chainId() * BigInt(2) + BigInt(8);\n\t\t}\n\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\tv,\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction.\n\t */\n\tpublic toJSON(): JsonTx {\n\t\treturn {\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Validates tx's `v` value\n\t */\n\tprivate _validateTxV(_v?: bigint, common?: Common): Common {\n\t\tlet chainIdBigInt;\n\t\tconst v = _v !== undefined ? Number(_v) : undefined;\n\t\t// Check for valid v values in the scope of a signed legacy tx\n\t\tif (v !== undefined) {\n\t\t\t// v is 1. not matching the EIP-155 chainId included case and...\n\t\t\t// v is 2. not matching the classic v=27 or v=28 case\n\t\t\tif (v < 37 && v !== 27 && v !== 28) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Legacy txs need either v = 27/28 or v >= 37 (EIP-155 replay protection), got v = ${v}`,\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\t// No unsigned tx and EIP-155 activated and chain ID included\n\t\tif (\n\t\t\tv !== undefined &&\n\t\t\tv !== 0 &&\n\t\t\t(!common || common.gteHardfork('spuriousDragon')) &&\n\t\t\tv !== 27 &&\n\t\t\tv !== 28\n\t\t) {\n\t\t\tif (common) {\n\t\t\t\tif (!meetsEIP155(BigInt(v), common.chainId())) {\n\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t`Incompatible EIP155-based V ${v} and chain id ${common.chainId()}. See the Common parameter of the Transaction constructor to set the chain id.`,\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Derive the original chain ID\n\t\t\t\tlet numSub;\n\t\t\t\tif ((v - 35) % 2 === 0) {\n\t\t\t\t\tnumSub = 35;\n\t\t\t\t} else {\n\t\t\t\t\tnumSub = 36;\n\t\t\t\t}\n\t\t\t\t// Use derived chain ID to create a proper Common\n\t\t\t\tchainIdBigInt = BigInt(v - numSub) / BigInt(2);\n\t\t\t}\n\t\t}\n\t\treturn this._getCommon(common, chainIdBigInt);\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` gasPrice=${this.gasPrice}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}