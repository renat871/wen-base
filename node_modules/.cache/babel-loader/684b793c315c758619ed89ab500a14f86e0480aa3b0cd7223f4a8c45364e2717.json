{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { AbiError } from 'web3-errors';\nimport { ParamType } from '@ethersproject/abi';\nimport ethersAbiCoder from '../ethers_abi_coder.js';\nimport { formatParam, isAbiFragment, mapTypes, modifyParams } from '../utils.js';\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport var encodeParameters = function encodeParameters(abi, params) {\n  try {\n    var modifiedTypes = mapTypes(Array.isArray(abi) ? abi : [abi]);\n    var modifiedParams = [];\n    var _iterator = _createForOfIteratorHelper(params.entries()),\n      _step;\n    try {\n      for (_iterator.s(); !(_step = _iterator.n()).done;) {\n        var _step$value = _slicedToArray(_step.value, 2),\n          index = _step$value[0],\n          param = _step$value[1];\n        var item = modifiedTypes[index];\n        var type = void 0;\n        if (isAbiFragment(item) && item.type) {\n          // We may get a named type of shape {name, type}\n          type = item.type;\n        } else {\n          type = item;\n        }\n        var newParam = formatParam(type, param);\n        if (typeof type === 'string' && type.includes('tuple')) {\n          var coder = ethersAbiCoder._getCoder(ParamType.from(type));\n          modifyParams(coder, [newParam]);\n        }\n        modifiedParams.push(newParam);\n      }\n    } catch (err) {\n      _iterator.e(err);\n    } finally {\n      _iterator.f();\n    }\n    return ethersAbiCoder.encode(modifiedTypes.map(function (p) {\n      return ParamType.from(p);\n    }), modifiedParams);\n  } catch (err) {\n    throw new AbiError(\"Parameter encoding error\", err);\n  }\n};\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param param - The actual parameter to encode.\n * @returns -  The ABI encoded parameter\n * @example\n * ```ts\n *  const res = web3.eth.abi.encodeParameter(\"uint256\", \"2345675643\");\n *  console.log(res);\n *  0x000000000000000000000000000000000000000000000000000000008bd02b7b\n *\n *  const res = web3.eth.abi.encodeParameter(\"uint\", \"2345675643\");\n *\n *  console.log(res);\n *  >0x000000000000000000000000000000000000000000000000000000008bd02b7b\n *\n *    const res = web3.eth.abi.encodeParameter(\"bytes32\", \"0xdf3234\");\n *\n *  console.log(res);\n *  >0xdf32340000000000000000000000000000000000000000000000000000000000\n *\n *   const res = web3.eth.abi.encodeParameter(\"bytes\", \"0xdf3234\");\n *\n *  console.log(res);\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000\n *\n *   const res = web3.eth.abi.encodeParameter(\"bytes32[]\", [\"0xdf3234\", \"0xfdfd\"]);\n *\n *  console.log(res);\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000\n *\n *  const res = web3.eth.abi.encodeParameter(\n *    {\n *      ParentStruct: {\n *        propertyOne: \"uint256\",\n *        propertyTwo: \"uint256\",\n *        childStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *        },\n *      },\n *    },\n *    {\n *      propertyOne: 42,\n *      propertyTwo: 56,\n *      childStruct: {\n *        propertyOne: 45,\n *        propertyTwo: 78,\n *      },\n *    }\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\n * ```\n */\nexport var encodeParameter = function encodeParameter(abi, param) {\n  return encodeParameters([abi], [param]);\n};\n// If encoded param is an array and there are mixed on integer and string keys\nvar isParamRequiredToConvert = function isParamRequiredToConvert(data) {\n  return Array.isArray(data) && Object.keys(data).filter(function (k) {\n    return Number.isInteger(+k);\n  }).length !== Object.keys(data).length;\n};\n// Ethers-Encoder return the decoded result as an array with additional string indexes for named params\n// We want these to be converted to an object with named keys\nvar formatArrayResToObject = function formatArrayResToObject(data) {\n  var returnValue = {\n    __length__: 0\n  };\n  for (var _i = 0, _Object$keys = Object.keys(data); _i < _Object$keys.length; _i++) {\n    var key = _Object$keys[_i];\n    returnValue[key] = Array.isArray(data[key]) && isParamRequiredToConvert(data[key]) ? formatArrayResToObject(data[key]) : data[key];\n    returnValue.__length__ += Number.isInteger(+key) ? 1 : 0;\n  }\n  return returnValue;\n};\n/**\n * Should be used to decode list of params\n */\nexport var decodeParametersWith = function decodeParametersWith(abis, bytes, loose) {\n  try {\n    if (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n      throw new AbiError(\"Returned values aren't valid, did it run Out of Gas? \" + 'You might also see this error if you are not using the ' + 'correct ABI for the contract you are retrieving data from, ' + 'requesting data from a block number that does not exist, ' + 'or querying a node which is not fully synced.');\n    }\n    var res = ethersAbiCoder.decode(mapTypes(abis).map(function (p) {\n      return ParamType.from(p);\n    }), \"0x\".concat(bytes.replace(/0x/i, '')), loose);\n    return formatArrayResToObject(res);\n  } catch (err) {\n    throw new AbiError(\"Parameter decoding error: \".concat(err.message));\n  }\n};\n/**\n * Should be used to decode list of params\n */\n/**\n * Decodes ABI encoded parameters to its JavaScript types.\n * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param bytes - The ABI byte code to decode\n * @returns - The result object containing the decoded parameters.\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeParameters(\n *    [\"string\", \"uint256\"],\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n *  console.log(res);\n *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }\n *\n * let res = web3.eth.abi.decodeParameters(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *      },\n *    ],\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n * console.log(res);\n *  > {\n *  '0': 'Hello!%!',\n *  '1': 234n,\n *  __length__: 2,\n *  myString: 'Hello!%!',\n *  myNumber: 234n\n * }\n *\n * const res = web3.eth.abi.decodeParameters(\n *    [\n *      \"uint8[]\",\n *      {\n *        ParentStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *          childStruct: {\n *            propertyOne: \"uint256\",\n *            propertyTwo: \"uint256\",\n *          },\n *        },\n *      },\n *    ],\n *    \"0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018\"\n *  );\n *  console.log(res);\n *  >\n *  '0': [ 42n, 24n ],\n *  '1': {\n *    '0': 42n,\n *    '1': 56n,\n *    '2': {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    },\n *    __length__: 3,\n *    propertyOne: 42n,\n *    propertyTwo: 56n,\n *    childStruct: {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    }\n *  },\n *  __length__: 2,\n *  ParentStruct: {\n *    '0': 42n,\n *    '1': 56n,\n *    '2': {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    },\n *    __length__: 3,\n *    propertyOne: 42n,\n *    propertyTwo: 56n,\n *    childStruct: {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    }\n *  }\n *}\n * ```\n */\nexport var decodeParameters = function decodeParameters(abi, bytes) {\n  return decodeParametersWith(abi, bytes, false);\n};\n/**\n * Should be used to decode bytes to plain param\n */\n/**\n * Decodes an ABI encoded parameter to its JavaScript type.\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param bytes - The ABI byte code to decode\n * @returns - The decoded parameter\n * @example\n * ```ts\n *   const res = web3.eth.abi.decodeParameter(\n *    \"uint256\",\n *    \"0x0000000000000000000000000000000000000000000000000000000000000010\"\n *  );\n *  console.log(res);\n * > 16n\n *\n *  const res = web3.eth.abi.decodeParameter(\n *    \"string\",\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n *\n *  console.log(res);\n *  > Hello!%!\n *\n *  const res = web3.eth.abi.decodeParameter(\n *    {\n *      ParentStruct: {\n *        propertyOne: \"uint256\",\n *        propertyTwo: \"uint256\",\n *        childStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *        },\n *      },\n *    },\n *    \"0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\"\n *  );\n *\n *  console.log(res);\n *   {\n *  '0': 42n,\n *  '1': 56n,\n *  '2': {\n *    '0': 45n,\n *    '1': 78n,\n *    __length__: 2,\n *    propertyOne: 45n,\n *    propertyTwo: 78n\n *  },\n *  __length__: 3,\n *  propertyOne: 42n,\n *  propertyTwo: 56n,\n *  childStruct: {\n *    '0': 45n,\n *    '1': 78n,\n *    __length__: 2,\n *    propertyOne: 45n,\n *    propertyTwo: 78n\n *  }\n *}\n * ```\n */\nexport var decodeParameter = function decodeParameter(abi, bytes) {\n  return decodeParameters([abi], bytes)['0'];\n};","map":{"version":3,"names":["AbiError","ParamType","ethersAbiCoder","formatParam","isAbiFragment","mapTypes","modifyParams","encodeParameters","abi","params","modifiedTypes","Array","isArray","modifiedParams","_iterator","_createForOfIteratorHelper","entries","_step","s","n","done","_step$value","_slicedToArray","value","index","param","item","type","newParam","includes","coder","_getCoder","from","push","err","e","f","encode","map","p","encodeParameter","isParamRequiredToConvert","data","Object","keys","filter","k","Number","isInteger","length","formatArrayResToObject","returnValue","__length__","_i","_Object$keys","key","decodeParametersWith","abis","bytes","loose","res","decode","concat","replace","message","decodeParameters","decodeParameter"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-abi\\src\\api\\parameters_api.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { AbiError } from 'web3-errors';\nimport { ParamType, Result } from '@ethersproject/abi';\nimport { HexString, AbiInput, DecodedParams } from 'web3-types';\nimport ethersAbiCoder from '../ethers_abi_coder.js';\nimport { formatParam, isAbiFragment, mapTypes, modifyParams } from '../utils.js';\n\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi - An array of {@link AbiInput}. See [Solidity's documentation](https://solidity.readthedocs.io/en/v0.5.3/abi-spec.html#json) for more details.\n * @param params - The actual parameters to encode.\n * @returns - The ABI encoded parameters\n * @example\n * ```ts\n * const res = web3.eth.abi.encodeParameters(\n *    [\"uint256\", \"string\"],\n *    [\"2345675643\", \"Hello!%\"]\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000008bd02b7b0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000748656c6c6f212500000000000000000000000000000000000000000000000000\n * ```\n */\nexport const encodeParameters = (abi: ReadonlyArray<AbiInput>, params: unknown[]): string => {\n\ttry {\n\t\tconst modifiedTypes = mapTypes(\n\t\t\tArray.isArray(abi) ? (abi as AbiInput[]) : ([abi] as unknown as AbiInput[]),\n\t\t);\n\t\tconst modifiedParams: Array<unknown> = [];\n\t\tfor (const [index, param] of params.entries()) {\n\t\t\tconst item = modifiedTypes[index];\n\t\t\tlet type: string;\n\n\t\t\tif (isAbiFragment(item) && item.type) {\n\t\t\t\t// We may get a named type of shape {name, type}\n\t\t\t\ttype = item.type;\n\t\t\t} else {\n\t\t\t\ttype = item as unknown as string;\n\t\t\t}\n\n\t\t\tconst newParam = formatParam(type, param);\n\n\t\t\tif (typeof type === 'string' && type.includes('tuple')) {\n\t\t\t\tconst coder = ethersAbiCoder._getCoder(ParamType.from(type));\n\t\t\t\tmodifyParams(coder, [newParam]);\n\t\t\t}\n\n\t\t\tmodifiedParams.push(newParam);\n\t\t}\n\t\treturn ethersAbiCoder.encode(\n\t\t\tmodifiedTypes.map(p => ParamType.from(p)),\n\t\t\tmodifiedParams,\n\t\t);\n\t} catch (err) {\n\t\tthrow new AbiError(`Parameter encoding error`, err as Error);\n\t}\n};\n\n/**\n * Encodes a parameter based on its type to its ABI representation.\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param param - The actual parameter to encode.\n * @returns -  The ABI encoded parameter\n * @example\n * ```ts\n *  const res = web3.eth.abi.encodeParameter(\"uint256\", \"2345675643\");\n *  console.log(res);\n *  0x000000000000000000000000000000000000000000000000000000008bd02b7b\n *\n *  const res = web3.eth.abi.encodeParameter(\"uint\", \"2345675643\");\n *\n *  console.log(res);\n *  >0x000000000000000000000000000000000000000000000000000000008bd02b7b\n *\n *    const res = web3.eth.abi.encodeParameter(\"bytes32\", \"0xdf3234\");\n *\n *  console.log(res);\n *  >0xdf32340000000000000000000000000000000000000000000000000000000000\n *\n *   const res = web3.eth.abi.encodeParameter(\"bytes\", \"0xdf3234\");\n *\n *  console.log(res);\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000003df32340000000000000000000000000000000000000000000000000000000000\n *\n *   const res = web3.eth.abi.encodeParameter(\"bytes32[]\", [\"0xdf3234\", \"0xfdfd\"]);\n *\n *  console.log(res);\n *  > 0x00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000002df32340000000000000000000000000000000000000000000000000000000000fdfd000000000000000000000000000000000000000000000000000000000000\n *\n *  const res = web3.eth.abi.encodeParameter(\n *    {\n *      ParentStruct: {\n *        propertyOne: \"uint256\",\n *        propertyTwo: \"uint256\",\n *        childStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *        },\n *      },\n *    },\n *    {\n *      propertyOne: 42,\n *      propertyTwo: 56,\n *      childStruct: {\n *        propertyOne: 45,\n *        propertyTwo: 78,\n *      },\n *    }\n *  );\n *\n *  console.log(res);\n *  > 0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\n * ```\n */\nexport const encodeParameter = (abi: AbiInput, param: unknown): string =>\n\tencodeParameters([abi], [param]);\n\n// If encoded param is an array and there are mixed on integer and string keys\nconst isParamRequiredToConvert = (data: Result): boolean =>\n\tArray.isArray(data) &&\n\tObject.keys(data).filter(k => Number.isInteger(+k)).length !== Object.keys(data).length;\n\n// Ethers-Encoder return the decoded result as an array with additional string indexes for named params\n// We want these to be converted to an object with named keys\nconst formatArrayResToObject = (data: Result): DecodedParams => {\n\tconst returnValue: DecodedParams = {\n\t\t__length__: 0,\n\t};\n\n\tfor (const key of Object.keys(data)) {\n\t\treturnValue[key] =\n\t\t\tArray.isArray(data[key]) && isParamRequiredToConvert(data[key] as Result)\n\t\t\t\t? formatArrayResToObject(data[key] as Result)\n\t\t\t\t: data[key];\n\n\t\treturnValue.__length__ += Number.isInteger(+key) ? 1 : 0;\n\t}\n\treturn returnValue;\n};\n\n/**\n * Should be used to decode list of params\n */\nexport const decodeParametersWith = (\n\tabis: AbiInput[],\n\tbytes: HexString,\n\tloose: boolean,\n): { [key: string]: unknown; __length__: number } => {\n\ttry {\n\t\tif (abis.length > 0 && (!bytes || bytes === '0x' || bytes === '0X')) {\n\t\t\tthrow new AbiError(\n\t\t\t\t\"Returned values aren't valid, did it run Out of Gas? \" +\n\t\t\t\t\t'You might also see this error if you are not using the ' +\n\t\t\t\t\t'correct ABI for the contract you are retrieving data from, ' +\n\t\t\t\t\t'requesting data from a block number that does not exist, ' +\n\t\t\t\t\t'or querying a node which is not fully synced.',\n\t\t\t);\n\t\t}\n\t\tconst res = ethersAbiCoder.decode(\n\t\t\tmapTypes(abis).map(p => ParamType.from(p)),\n\t\t\t`0x${bytes.replace(/0x/i, '')}`,\n\t\t\tloose,\n\t\t);\n\t\treturn formatArrayResToObject(res);\n\t} catch (err) {\n\t\tthrow new AbiError(`Parameter decoding error: ${(err as Error).message}`);\n\t}\n};\n\n/**\n * Should be used to decode list of params\n */\n/**\n * Decodes ABI encoded parameters to its JavaScript types.\n * @param abi -  An array of {@link AbiInput}. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param bytes - The ABI byte code to decode\n * @returns - The result object containing the decoded parameters.\n * @example\n * ```ts\n * let res = web3.eth.abi.decodeParameters(\n *    [\"string\", \"uint256\"],\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n *  console.log(res);\n *  > { '0': 'Hello!%!', '1': 234n, __length__: 2 }\n *\n * let res = web3.eth.abi.decodeParameters(\n *    [\n *      {\n *        type: \"string\",\n *        name: \"myString\",\n *      },\n *      {\n *        type: \"uint256\",\n *        name: \"myNumber\",\n *      },\n *    ],\n *    \"0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000ea000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n * console.log(res);\n *  > {\n *  '0': 'Hello!%!',\n *  '1': 234n,\n *  __length__: 2,\n *  myString: 'Hello!%!',\n *  myNumber: 234n\n * }\n *\n * const res = web3.eth.abi.decodeParameters(\n *    [\n *      \"uint8[]\",\n *      {\n *        ParentStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *          childStruct: {\n *            propertyOne: \"uint256\",\n *            propertyTwo: \"uint256\",\n *          },\n *        },\n *      },\n *    ],\n *    \"0x00000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000018\"\n *  );\n *  console.log(res);\n *  >\n *  '0': [ 42n, 24n ],\n *  '1': {\n *    '0': 42n,\n *    '1': 56n,\n *    '2': {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    },\n *    __length__: 3,\n *    propertyOne: 42n,\n *    propertyTwo: 56n,\n *    childStruct: {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    }\n *  },\n *  __length__: 2,\n *  ParentStruct: {\n *    '0': 42n,\n *    '1': 56n,\n *    '2': {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    },\n *    __length__: 3,\n *    propertyOne: 42n,\n *    propertyTwo: 56n,\n *    childStruct: {\n *      '0': 45n,\n *      '1': 78n,\n *      __length__: 2,\n *      propertyOne: 45n,\n *      propertyTwo: 78n\n *    }\n *  }\n *}\n * ```\n */\nexport const decodeParameters = (\n\tabi: AbiInput[],\n\tbytes: HexString,\n): { [key: string]: unknown; __length__: number } => decodeParametersWith(abi, bytes, false);\n\n/**\n * Should be used to decode bytes to plain param\n */\n/**\n * Decodes an ABI encoded parameter to its JavaScript type.\n * @param abi -  The type of the parameter. See the [Solidity documentation](https://docs.soliditylang.org/en/develop/types.html) for a list of types.\n * @param bytes - The ABI byte code to decode\n * @returns - The decoded parameter\n * @example\n * ```ts\n *   const res = web3.eth.abi.decodeParameter(\n *    \"uint256\",\n *    \"0x0000000000000000000000000000000000000000000000000000000000000010\"\n *  );\n *  console.log(res);\n * > 16n\n *\n *  const res = web3.eth.abi.decodeParameter(\n *    \"string\",\n *    \"0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000848656c6c6f212521000000000000000000000000000000000000000000000000\"\n *  );\n *\n *  console.log(res);\n *  > Hello!%!\n *\n *  const res = web3.eth.abi.decodeParameter(\n *    {\n *      ParentStruct: {\n *        propertyOne: \"uint256\",\n *        propertyTwo: \"uint256\",\n *        childStruct: {\n *          propertyOne: \"uint256\",\n *          propertyTwo: \"uint256\",\n *        },\n *      },\n *    },\n *    \"0x000000000000000000000000000000000000000000000000000000000000002a0000000000000000000000000000000000000000000000000000000000000038000000000000000000000000000000000000000000000000000000000000002d000000000000000000000000000000000000000000000000000000000000004e\"\n *  );\n *\n *  console.log(res);\n *   {\n *  '0': 42n,\n *  '1': 56n,\n *  '2': {\n *    '0': 45n,\n *    '1': 78n,\n *    __length__: 2,\n *    propertyOne: 45n,\n *    propertyTwo: 78n\n *  },\n *  __length__: 3,\n *  propertyOne: 42n,\n *  propertyTwo: 56n,\n *  childStruct: {\n *    '0': 45n,\n *    '1': 78n,\n *    __length__: 2,\n *    propertyOne: 45n,\n *    propertyTwo: 78n\n *  }\n *}\n * ```\n */\nexport const decodeParameter = (abi: AbiInput, bytes: HexString): unknown =>\n\tdecodeParameters([abi], bytes)['0'];\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}