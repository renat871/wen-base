{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { toChecksumAddress, utf8ToHex } from 'web3-utils';\nimport { formatTransaction } from 'web3-eth';\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { validator, isHexStrict } from 'web3-validator';\nimport { personalRpcMethods } from 'web3-rpc-methods';\nexport var getAccounts = function getAccounts(requestManager) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return personalRpcMethods.getAccounts(requestManager);\n        case 2:\n          result = _context.sent;\n          return _context.abrupt(\"return\", result.map(toChecksumAddress));\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n};\nexport var newAccount = function newAccount(requestManager, password) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n      while (1) switch (_context2.prev = _context2.next) {\n        case 0:\n          validator.validate(['string'], [password]);\n          _context2.next = 3;\n          return personalRpcMethods.newAccount(requestManager, password);\n        case 3:\n          result = _context2.sent;\n          return _context2.abrupt(\"return\", toChecksumAddress(result));\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }, _callee2);\n  }));\n};\nexport var unlockAccount = function unlockAccount(requestManager, address, password, unlockDuration) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          validator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n          return _context3.abrupt(\"return\", personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration));\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3);\n  }));\n};\nexport var lockAccount = function lockAccount(requestManager, address) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n    return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n      while (1) switch (_context4.prev = _context4.next) {\n        case 0:\n          validator.validate(['address'], [address]);\n          return _context4.abrupt(\"return\", personalRpcMethods.lockAccount(requestManager, address));\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }, _callee4);\n  }));\n};\nexport var importRawKey = function importRawKey(requestManager, keyData, passphrase) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n    return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n      while (1) switch (_context5.prev = _context5.next) {\n        case 0:\n          validator.validate(['string', 'string'], [keyData, passphrase]);\n          return _context5.abrupt(\"return\", personalRpcMethods.importRawKey(requestManager, keyData, passphrase));\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }, _callee5);\n  }));\n};\nexport var sendTransaction = function sendTransaction(requestManager, tx, passphrase) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var formattedTx;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n          return _context6.abrupt(\"return\", personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase));\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  }));\n};\nexport var signTransaction = function signTransaction(requestManager, tx, passphrase) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n    var formattedTx;\n    return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n      while (1) switch (_context7.prev = _context7.next) {\n        case 0:\n          formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n          return _context7.abrupt(\"return\", personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase));\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }, _callee7);\n  }));\n};\nexport var sign = function sign(requestManager, data, address, passphrase) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee8() {\n    var dataToSign;\n    return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n      while (1) switch (_context8.prev = _context8.next) {\n        case 0:\n          validator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n          dataToSign = isHexStrict(data) ? data : utf8ToHex(data);\n          return _context8.abrupt(\"return\", personalRpcMethods.sign(requestManager, dataToSign, address, passphrase));\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }, _callee8);\n  }));\n};\nexport var ecRecover = function ecRecover(requestManager, signedData, signature) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee9() {\n    var signedDataString;\n    return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n      while (1) switch (_context9.prev = _context9.next) {\n        case 0:\n          validator.validate(['string', 'string'], [signedData, signature]);\n          signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);\n          return _context9.abrupt(\"return\", personalRpcMethods.ecRecover(requestManager, signedDataString, signature));\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }, _callee9);\n  }));\n};","map":{"version":3,"names":["toChecksumAddress","utf8ToHex","formatTransaction","ETH_DATA_FORMAT","validator","isHexStrict","personalRpcMethods","getAccounts","requestManager","__awaiter","_regeneratorRuntime","mark","_callee","result","wrap","_callee$","_context","prev","next","sent","abrupt","map","stop","newAccount","password","_callee2","_callee2$","_context2","validate","unlockAccount","address","unlockDuration","_callee3","_callee3$","_context3","lockAccount","_callee4","_callee4$","_context4","importRawKey","keyData","passphrase","_callee5","_callee5$","_context5","sendTransaction","tx","_callee6","formattedTx","_callee6$","_context6","signTransaction","_callee7","_callee7$","_context7","sign","data","_callee8","dataToSign","_callee8$","_context8","ecRecover","signedData","signature","_callee9","signedDataString","_callee9$","_context9"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-personal\\src\\rpc_method_wrappers.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { Web3RequestManager } from 'web3-core';\nimport { toChecksumAddress, utf8ToHex } from 'web3-utils';\nimport { formatTransaction } from 'web3-eth';\nimport { Address, EthPersonalAPI, ETH_DATA_FORMAT, HexString, Transaction } from 'web3-types';\nimport { validator, isHexStrict } from 'web3-validator';\nimport { personalRpcMethods } from 'web3-rpc-methods';\n\nexport const getAccounts = async (requestManager: Web3RequestManager<EthPersonalAPI>) => {\n\tconst result = await personalRpcMethods.getAccounts(requestManager);\n\n\treturn result.map(toChecksumAddress);\n};\n\nexport const newAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tpassword: string,\n) => {\n\tvalidator.validate(['string'], [password]);\n\n\tconst result = await personalRpcMethods.newAccount(requestManager, password);\n\n\treturn toChecksumAddress(result);\n};\n\nexport const unlockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n\tpassword: string,\n\tunlockDuration: number,\n) => {\n\tvalidator.validate(['address', 'string', 'uint'], [address, password, unlockDuration]);\n\n\treturn personalRpcMethods.unlockAccount(requestManager, address, password, unlockDuration);\n};\n\nexport const lockAccount = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\taddress: Address,\n) => {\n\tvalidator.validate(['address'], [address]);\n\n\treturn personalRpcMethods.lockAccount(requestManager, address);\n};\n\nexport const importRawKey = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tkeyData: HexString,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'string'], [keyData, passphrase]);\n\n\treturn personalRpcMethods.importRawKey(requestManager, keyData, passphrase);\n};\n\nexport const sendTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.sendTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const signTransaction = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\ttx: Transaction,\n\tpassphrase: string,\n) => {\n\tconst formattedTx = formatTransaction(tx, ETH_DATA_FORMAT);\n\n\treturn personalRpcMethods.signTransaction(requestManager, formattedTx, passphrase);\n};\n\nexport const sign = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tdata: HexString,\n\taddress: Address,\n\tpassphrase: string,\n) => {\n\tvalidator.validate(['string', 'address', 'string'], [data, address, passphrase]);\n\n\tconst dataToSign = isHexStrict(data) ? data : utf8ToHex(data);\n\n\treturn personalRpcMethods.sign(requestManager, dataToSign, address, passphrase);\n};\n\nexport const ecRecover = async (\n\trequestManager: Web3RequestManager<EthPersonalAPI>,\n\tsignedData: HexString,\n\tsignature: string,\n) => {\n\tvalidator.validate(['string', 'string'], [signedData, signature]);\n\n\tconst signedDataString = isHexStrict(signedData) ? signedData : utf8ToHex(signedData);\n\n\treturn personalRpcMethods.ecRecover(requestManager, signedDataString, signature);\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}