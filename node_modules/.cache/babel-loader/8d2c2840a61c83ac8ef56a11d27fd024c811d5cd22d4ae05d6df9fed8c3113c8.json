{"ast":null,"code":"import _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { Web3BaseWallet } from 'web3-types';\nimport { isNullish } from 'web3-validator';\n/**\n * Wallet is an in memory `wallet` that can hold multiple accounts.\n * These accounts can be used when using web3.eth.sendTransaction().\n *\n * ### Parameters\n *  Web3AccountProvider - AccountProvider for the wallet\n *\n * ```ts\n * import Web3 from 'web3';\n * const web3 = new Web3(\"https://localhost:8454\")\n * web3.eth.accounts.wallet\n * > Wallet(0) [\n *   _accountProvider: {\n *     create: [Function: create],\n *     privateKeyToAccount: [Function: privateKeyToAccount],\n *     decrypt: [Function: decrypt]\n *   },\n *   _addressMap: Map(0) {},\n *   _defaultKeyName: 'web3js_wallet'\n * ]\n * ```\n */\nexport var Wallet = /*#__PURE__*/function (_Web3BaseWallet) {\n  _inherits(Wallet, _Web3BaseWallet);\n  var _super = _createSuper(Wallet);\n  function Wallet() {\n    var _this;\n    _classCallCheck(this, Wallet);\n    _this = _super.apply(this, arguments);\n    _this._addressMap = new Map();\n    _this._defaultKeyName = 'web3js_wallet';\n    return _this;\n  }\n  /**\n   * Get the storage object of the browser\n   *\n   * @returns the storage\n   */\n  _createClass(Wallet, [{\n    key: \"create\",\n    value:\n    /**\n     * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.\n     *\n     * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.\n     * @returns The wallet\n     * ```ts\n     * web3.eth.accounts.wallet.create(2)\n     * > Wallet(2) [\n     *   {\n     *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',\n     *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   {\n     *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',\n     *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _addressMap: Map(2) {\n     *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,\n     *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1\n     *   },\n     *   _defaultKeyName: 'web3js_wallet'\n     * ]\n     *\n     * ```\n     */\n    function create(numberOfAccounts) {\n      for (var i = 0; i < numberOfAccounts; i += 1) {\n        this.add(this._accountProvider.create());\n      }\n      return this;\n    }\n    /**\n     * Adds an account using a private key or account object to the wallet.\n     *\n     * @param account - A private key or account object\n     * @returns The wallet\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n     * > Wallet(1) [\n     *   {\n     *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n     *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n     *     signTransaction: [Function: signTransaction],\n     *     sign: [Function: sign],\n     *     encrypt: [Function: encrypt]\n     *   },\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },\n     *   _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */\n  }, {\n    key: \"add\",\n    value: function add(account) {\n      var _a;\n      if (typeof account === 'string') {\n        return this.add(this._accountProvider.privateKeyToAccount(account));\n      }\n      var index = this.length;\n      var existAccount = this.get(account.address);\n      if (existAccount) {\n        console.warn(\"Account \".concat(account.address.toLowerCase(), \" already exists.\"));\n        index = (_a = this._addressMap.get(account.address.toLowerCase())) !== null && _a !== void 0 ? _a : index;\n      }\n      this._addressMap.set(account.address.toLowerCase(), index);\n      this[index] = account;\n      return this;\n    }\n    /**\n     * Get the account of the wallet with either the index or public address.\n     *\n     * @param addressOrIndex - A string of the address or number index within the wallet.\n     * @returns The account object or undefined if the account doesn't exist\n     */\n  }, {\n    key: \"get\",\n    value: function get(addressOrIndex) {\n      if (typeof addressOrIndex === 'string') {\n        var index = this._addressMap.get(addressOrIndex.toLowerCase());\n        if (!isNullish(index)) {\n          return this[index];\n        }\n        return undefined;\n      }\n      return this[addressOrIndex];\n    }\n    /**\n     * Removes an account from the wallet.\n     *\n     * @param addressOrIndex - The account address, or index in the wallet.\n     * @returns true if the wallet was removed. false if it couldn't be found.\n     * ```ts\n     * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n     *\n     * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');\n     * > true\n     * web3.eth.accounts.wallet\n     * > Wallet(0) [\n     * _accountProvider: {\n     *   create: [Function: create],\n     *   privateKeyToAccount: [Function: privateKeyToAccount],\n     *   decrypt: [Function: decrypt]\n     * },\n     * _addressMap: Map(0) {},\n     * _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */\n  }, {\n    key: \"remove\",\n    value: function remove(addressOrIndex) {\n      if (typeof addressOrIndex === 'string') {\n        var index = this._addressMap.get(addressOrIndex.toLowerCase());\n        if (isNullish(index)) {\n          return false;\n        }\n        this._addressMap.delete(addressOrIndex.toLowerCase());\n        this.splice(index, 1);\n        return true;\n      }\n      if (this[addressOrIndex]) {\n        this.splice(addressOrIndex, 1);\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Securely empties the wallet and removes all its accounts.\n     * Use this with *caution as it will remove all accounts stored in local wallet.\n     *\n     * @returns The wallet object\n     * ```ts\n     *\n     * web3.eth.accounts.wallet.clear();\n     * > Wallet(0) [\n     * _accountProvider: {\n     *   create: [Function: create],\n     *   privateKeyToAccount: [Function: privateKeyToAccount],\n     *   decrypt: [Function: decrypt]\n     * },\n     * _addressMap: Map(0) {},\n     * _defaultKeyName: 'web3js_wallet'\n     * ]\n     * ```\n     */\n  }, {\n    key: \"clear\",\n    value: function clear() {\n      this._addressMap.clear();\n      // Setting length clears the Array in JS.\n      this.length = 0;\n      return this;\n    }\n    /**\n     * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.\n     *\n     * @param password - The password which will be used for encryption\n     * @param options - encryption options\n     * @returns An array of the encrypted keystore v3.\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.create(1)\n     * web3.eth.accounts.wallet.encrypt(\"abc\").then(console.log);\n     * > [\n     * '{\"version\":3,\"id\":\"fa46e213-a7c3-4844-b903-dd14d39cc7db\",\n     * \"address\":\"fa3e41a401609103c241431cbdee8623ae2a321a\",\"crypto\":\n     * {\"ciphertext\":\"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c\",\n     * \"cipherparams\":{\"iv\":\"acc888c6cf4a19b86846cef0185a7164\"},\"cipher\":\"aes-128-ctr\",\n     * \"kdf\":\"scrypt\",\"kdfparams\":{\"n\":8192,\"r\":8,\"p\":1,\"dklen\":32,\"salt\":\"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae\"},\n     * \"mac\":\"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57\"}}'\n     * ]\n     * ```\n     */\n  }, {\n    key: \"encrypt\",\n    value: function encrypt(password, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        var _this2 = this;\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              return _context2.abrupt(\"return\", Promise.all(this.map(function (account) {\n                return __awaiter(_this2, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n                  return _regeneratorRuntime().wrap(function _callee$(_context) {\n                    while (1) switch (_context.prev = _context.next) {\n                      case 0:\n                        return _context.abrupt(\"return\", account.encrypt(password, options));\n                      case 1:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }, _callee);\n                }));\n              })));\n            case 1:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this);\n      }));\n    }\n    /**\n     * Decrypts keystore v3 objects.\n     *\n     * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt\n     * @param password - The password to encrypt with\n     * @param options - decrypt options for the wallets\n     * @returns The decrypted wallet object\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.decrypt([\n     * { version: 3,\n     * id: '83191a81-aaca-451f-b63d-0c5f3b849289',\n     * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',\n     * crypto:\n     * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',\n     *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },\n     *   cipher: 'aes-128-ctr',\n     *   kdf: 'scrypt',\n     *   kdfparams:\n     *    { dklen: 32,\n     *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',\n     *      n: 262144,\n     *      r: 8,\n     *      p: 1 },\n     *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },\n     * { version: 3,\n     * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',\n     * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',\n     * crypto:\n     * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',\n     *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },\n     *   cipher: 'aes-128-ctr',\n     *   kdf: 'scrypt',\n     *   kdfparams:\n     *    { dklen: 32,\n     *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',\n     *      n: 262144,\n     *      r: 8,\n     *      p: 1 },\n     *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }\n     * ], 'test').then(console.log)\n     * > Wallet {\n     *   _accountProvider: {\n     *     create: [Function: create],\n     *     privateKeyToAccount: [Function: privateKeyToAccount],\n     *     decrypt: [Function: decrypt]\n     *   },\n     *   _defaultKeyName: 'web3js_wallet',\n     *   _accounts: {\n     *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {\n     *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n     *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     },\n     *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {\n     *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',\n     *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     },\n     *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {\n     *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',\n     *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',\n     *       signTransaction: [Function: signTransaction],\n     *       sign: [Function: sign],\n     *       encrypt: [Function: encrypt]\n     *     }\n     *   }\n     * }\n     * ```\n     */\n  }, {\n    key: \"decrypt\",\n    value: function decrypt(encryptedWallets, password, options) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n        var _this3 = this;\n        var results, _iterator, _step, res;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return Promise.all(encryptedWallets.map(function (wallet) {\n                return __awaiter(_this3, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        return _context3.abrupt(\"return\", this._accountProvider.decrypt(wallet, password, options));\n                      case 1:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3, this);\n                }));\n              }));\n            case 2:\n              results = _context4.sent;\n              _iterator = _createForOfIteratorHelper(results);\n              try {\n                for (_iterator.s(); !(_step = _iterator.n()).done;) {\n                  res = _step.value;\n                  this.add(res);\n                }\n              } catch (err) {\n                _iterator.e(err);\n              } finally {\n                _iterator.f();\n              }\n              return _context4.abrupt(\"return\", this);\n            case 6:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n    }\n    /**\n     * Stores the wallet encrypted and as string in local storage.\n     * **__NOTE:__** Browser only\n     *\n     * @param password - The password to encrypt the wallet\n     * @param keyName - (optional) The key used for the local storage position, defaults to `\"web3js_wallet\"`.\n     * @returns Will return boolean value true if saved properly\n     * ```ts\n     * web3.eth.accounts.wallet.save('test#!$');\n     * >true\n     * ```\n     */\n  }, {\n    key: \"save\",\n    value: function save(password, keyName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n        var storage;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              storage = Wallet.getStorage();\n              if (storage) {\n                _context5.next = 3;\n                break;\n              }\n              throw new Error('Local storage not available.');\n            case 3:\n              _context5.t0 = storage;\n              _context5.t1 = keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName;\n              _context5.t2 = JSON;\n              _context5.next = 8;\n              return this.encrypt(password);\n            case 8:\n              _context5.t3 = _context5.sent;\n              _context5.t4 = _context5.t2.stringify.call(_context5.t2, _context5.t3);\n              _context5.t0.setItem.call(_context5.t0, _context5.t1, _context5.t4);\n              return _context5.abrupt(\"return\", true);\n            case 12:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n    }\n    /**\n     * Loads a wallet from local storage and decrypts it.\n     * **__NOTE:__** Browser only\n     *\n     * @param password - The password to decrypt the wallet.\n     * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet\"`\n     * @returns Returns the wallet object\n     *\n     * ```ts\n     * web3.eth.accounts.wallet.save('test#!$');\n     * > true\n     * web3.eth.accounts.wallet.load('test#!$');\n     * { defaultKeyName: \"web3js_wallet\",\n     *   length: 0,\n     *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},\n     *   [[Prototype]]: Object\n     * }\n     * ```\n     */\n  }, {\n    key: \"load\",\n    value: function load(password, keyName) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n        var storage, keystore;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              storage = Wallet.getStorage();\n              if (storage) {\n                _context6.next = 3;\n                break;\n              }\n              throw new Error('Local storage not available.');\n            case 3:\n              keystore = storage.getItem(keyName !== null && keyName !== void 0 ? keyName : this._defaultKeyName);\n              if (!keystore) {\n                _context6.next = 7;\n                break;\n              }\n              _context6.next = 7;\n              return this.decrypt(JSON.parse(keystore) || [], password);\n            case 7:\n              return _context6.abrupt(\"return\", this);\n            case 8:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n    }\n  }], [{\n    key: \"getStorage\",\n    value: function getStorage() {\n      var storage;\n      try {\n        storage = window.localStorage;\n        var x = '__storage_test__';\n        storage.setItem(x, x);\n        storage.removeItem(x);\n        return storage;\n      } catch (e) {\n        return e && (\n        // everything except Firefox\n        e.code === 22 ||\n        // Firefox\n        e.code === 1014 ||\n        // test name field too, because code might not be present\n        // everything except Firefox\n        e.name === 'QuotaExceededError' ||\n        // Firefox\n        e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n        // acknowledge QuotaExceededError only if there's something already stored\n        !isNullish(storage) && storage.length !== 0 ? storage : undefined;\n      }\n    }\n  }]);\n  return Wallet;\n}(Web3BaseWallet);","map":{"version":3,"names":["Web3BaseWallet","isNullish","Wallet","_Web3BaseWallet","_inherits","_super","_createSuper","_this","_classCallCheck","_addressMap","Map","_defaultKeyName","_createClass","key","value","create","numberOfAccounts","i","add","_accountProvider","account","privateKeyToAccount","index","length","existAccount","get","address","console","warn","concat","toLowerCase","_a","set","addressOrIndex","undefined","remove","delete","splice","clear","encrypt","password","options","Promise","all","map","__awaiter","_this2","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","stop","_context2","_callee2","decrypt","encryptedWallets","wallet","_this3","_callee3","_callee3$","_context3","results","_context4","sent","_iterator","_createForOfIteratorHelper","s","_step","n","done","res","err","e","f","_callee4","save","keyName","storage","getStorage","_context5","Error","t0","t1","t2","JSON","t3","t4","stringify","call","setItem","_callee5","load","_context6","keystore","getItem","parse","_callee6","window","localStorage","x","removeItem","code","name"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\wallet.ts"],"sourcesContent":["﻿/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Web3BaseWallet, Web3BaseWalletAccount, KeyStore } from 'web3-types';\nimport { isNullish } from 'web3-validator';\nimport { WebStorage } from './types.js';\n\ntype BrowserError = { code: number; name: string };\n\n/**\n * Wallet is an in memory `wallet` that can hold multiple accounts.\n * These accounts can be used when using web3.eth.sendTransaction().\n *\n * ### Parameters\n *  Web3AccountProvider - AccountProvider for the wallet\n *\n * ```ts\n * import Web3 from 'web3';\n * const web3 = new Web3(\"https://localhost:8454\")\n * web3.eth.accounts.wallet\n * > Wallet(0) [\n *   _accountProvider: {\n *     create: [Function: create],\n *     privateKeyToAccount: [Function: privateKeyToAccount],\n *     decrypt: [Function: decrypt]\n *   },\n *   _addressMap: Map(0) {},\n *   _defaultKeyName: 'web3js_wallet'\n * ]\n * ```\n */\nexport class Wallet<\n\tT extends Web3BaseWalletAccount = Web3BaseWalletAccount,\n> extends Web3BaseWallet<T> {\n\tprivate readonly _addressMap = new Map<string, number>();\n\tprivate readonly _defaultKeyName = 'web3js_wallet';\n\n\t/**\n\t * Get the storage object of the browser\n\t *\n\t * @returns the storage\n\t */\n\tpublic static getStorage(): WebStorage | undefined {\n\t\tlet storage: WebStorage | undefined;\n\n\t\ttry {\n\t\t\tstorage = window.localStorage;\n\t\t\tconst x = '__storage_test__';\n\t\t\tstorage.setItem(x, x);\n\t\t\tstorage.removeItem(x);\n\n\t\t\treturn storage;\n\t\t} catch (e: unknown) {\n\t\t\treturn (e as BrowserError) &&\n\t\t\t\t// everything except Firefox\n\t\t\t\t((e as BrowserError).code === 22 ||\n\t\t\t\t\t// Firefox\n\t\t\t\t\t(e as BrowserError).code === 1014 ||\n\t\t\t\t\t// test name field too, because code might not be present\n\t\t\t\t\t// everything except Firefox\n\t\t\t\t\t(e as BrowserError).name === 'QuotaExceededError' ||\n\t\t\t\t\t// Firefox\n\t\t\t\t\t(e as BrowserError).name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n\t\t\t\t// acknowledge QuotaExceededError only if there's something already stored\n\t\t\t\t!isNullish(storage) &&\n\t\t\t\tstorage.length !== 0\n\t\t\t\t? storage\n\t\t\t\t: undefined;\n\t\t}\n\t}\n\t/**\n\t * Generates one or more accounts in the wallet. If wallets already exist they will not be overridden.\n\t *\n\t * @param numberOfAccounts - Number of accounts to create. Leave empty to create an empty wallet.\n\t * @returns The wallet\n\t * ```ts\n\t * web3.eth.accounts.wallet.create(2)\n\t * > Wallet(2) [\n\t *   {\n\t *     address: '0xde38310a42B751AE57d30cFFF4a0A3c52A442fCE',\n\t *     privateKey: '0x6422c9d28efdcbee93c1d32a5fc6fd6fa081b985487885296cf8c9bbb5872600',\n\t *     signTransaction: [Function: signTransaction],\n\t *     sign: [Function: sign],\n\t *     encrypt: [Function: encrypt]\n\t *   },\n\t *   {\n\t *     address: '0x766BF755246d924B1d017Fdb5390f38a60166691',\n\t *     privateKey: '0x756530f13c0eb636ebdda655335f5dea9921e3362e2e588b0ad59e556f7751f0',\n\t *     signTransaction: [Function: signTransaction],\n\t *     sign: [Function: sign],\n\t *     encrypt: [Function: encrypt]\n\t *   },\n\t *   _accountProvider: {\n\t *     create: [Function: create],\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\n\t *     decrypt: [Function: decrypt]\n\t *   },\n\t *   _addressMap: Map(2) {\n\t *     '0xde38310a42b751ae57d30cfff4a0a3c52a442fce' => 0,\n\t *     '0x766bf755246d924b1d017fdb5390f38a60166691' => 1\n\t *   },\n\t *   _defaultKeyName: 'web3js_wallet'\n\t * ]\n\t *\n\t * ```\n\t */\n\n\tpublic create(numberOfAccounts: number) {\n\t\tfor (let i = 0; i < numberOfAccounts; i += 1) {\n\t\t\tthis.add(this._accountProvider.create());\n\t\t}\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Adds an account using a private key or account object to the wallet.\n\t *\n\t * @param account - A private key or account object\n\t * @returns The wallet\n\t *\n\t * ```ts\n\t * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n\t * > Wallet(1) [\n\t *   {\n\t *     address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n\t *     privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n\t *     signTransaction: [Function: signTransaction],\n\t *     sign: [Function: sign],\n\t *     encrypt: [Function: encrypt]\n\t *   },\n\t *   _accountProvider: {\n\t *     create: [Function: create],\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\n\t *     decrypt: [Function: decrypt]\n\t *   },\n\t *   _addressMap: Map(1) { '0x85d70633b90e03e0276b98880286d0d055685ed7' => 0 },\n\t *   _defaultKeyName: 'web3js_wallet'\n\t * ]\n\t * ```\n\t */\n\tpublic add(account: T | string): this {\n\t\tif (typeof account === 'string') {\n\t\t\treturn this.add(this._accountProvider.privateKeyToAccount(account));\n\t\t}\n\t\tlet index = this.length;\n\t\tconst existAccount = this.get(account.address);\n\t\tif (existAccount) {\n\t\t\tconsole.warn(`Account ${account.address.toLowerCase()} already exists.`);\n\t\t\tindex = this._addressMap.get(account.address.toLowerCase()) ?? index;\n\t\t}\n\t\tthis._addressMap.set(account.address.toLowerCase(), index);\n\t\tthis[index] = account;\n\n\t\treturn this;\n\t}\n\t/**\n\t * Get the account of the wallet with either the index or public address.\n\t *\n\t * @param addressOrIndex - A string of the address or number index within the wallet.\n\t * @returns The account object or undefined if the account doesn't exist\n\t */\n\n\tpublic get(addressOrIndex: string | number): T | undefined {\n\t\tif (typeof addressOrIndex === 'string') {\n\t\t\tconst index = this._addressMap.get(addressOrIndex.toLowerCase());\n\n\t\t\tif (!isNullish(index)) {\n\t\t\t\treturn this[index];\n\t\t\t}\n\n\t\t\treturn undefined;\n\t\t}\n\n\t\treturn this[addressOrIndex];\n\t}\n\n\t/**\n\t * Removes an account from the wallet.\n\t *\n\t * @param addressOrIndex - The account address, or index in the wallet.\n\t * @returns true if the wallet was removed. false if it couldn't be found.\n\t * ```ts\n\t * web3.eth.accounts.wallet.add('0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387');\n\t *\n\t * web3.eth.accounts.wallet.remove('0x85D70633b90e03e0276B98880286D0D055685ed7');\n\t * > true\n\t * web3.eth.accounts.wallet\n\t * > Wallet(0) [\n\t * _accountProvider: {\n\t *   create: [Function: create],\n\t *   privateKeyToAccount: [Function: privateKeyToAccount],\n\t *   decrypt: [Function: decrypt]\n\t * },\n\t * _addressMap: Map(0) {},\n\t * _defaultKeyName: 'web3js_wallet'\n\t * ]\n\t * ```\n\t */\n\tpublic remove(addressOrIndex: string | number): boolean {\n\t\tif (typeof addressOrIndex === 'string') {\n\t\t\tconst index = this._addressMap.get(addressOrIndex.toLowerCase());\n\t\t\tif (isNullish(index)) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tthis._addressMap.delete(addressOrIndex.toLowerCase());\n\t\t\tthis.splice(index, 1);\n\n\t\t\treturn true;\n\t\t}\n\n\t\tif (this[addressOrIndex]) {\n\t\t\tthis.splice(addressOrIndex, 1);\n\t\t\treturn true;\n\t\t}\n\n\t\treturn false;\n\t}\n\n\t/**\n\t * Securely empties the wallet and removes all its accounts.\n\t * Use this with *caution as it will remove all accounts stored in local wallet.\n\t *\n\t * @returns The wallet object\n\t * ```ts\n\t *\n\t * web3.eth.accounts.wallet.clear();\n\t * > Wallet(0) [\n\t * _accountProvider: {\n\t *   create: [Function: create],\n\t *   privateKeyToAccount: [Function: privateKeyToAccount],\n\t *   decrypt: [Function: decrypt]\n\t * },\n\t * _addressMap: Map(0) {},\n\t * _defaultKeyName: 'web3js_wallet'\n\t * ]\n\t * ```\n\t */\n\tpublic clear() {\n\t\tthis._addressMap.clear();\n\n\t\t// Setting length clears the Array in JS.\n\t\tthis.length = 0;\n\n\t\treturn this;\n\t}\n\n\t/**\n\t * Encrypts all wallet accounts to an array of encrypted keystore v3 objects.\n\t *\n\t * @param password - The password which will be used for encryption\n\t * @param options - encryption options\n\t * @returns An array of the encrypted keystore v3.\n\t *\n\t * ```ts\n\t * web3.eth.accounts.wallet.create(1)\n\t * web3.eth.accounts.wallet.encrypt(\"abc\").then(console.log);\n\t * > [\n\t * '{\"version\":3,\"id\":\"fa46e213-a7c3-4844-b903-dd14d39cc7db\",\n\t * \"address\":\"fa3e41a401609103c241431cbdee8623ae2a321a\",\"crypto\":\n\t * {\"ciphertext\":\"8d179a911d6146ad2924e86bf493ed89b8ff3596ffec0816e761c542016ab13c\",\n\t * \"cipherparams\":{\"iv\":\"acc888c6cf4a19b86846cef0185a7164\"},\"cipher\":\"aes-128-ctr\",\n\t * \"kdf\":\"scrypt\",\"kdfparams\":{\"n\":8192,\"r\":8,\"p\":1,\"dklen\":32,\"salt\":\"6a743c9b367d15f4758e4f3f3378ff0fd443708d1c64854e07588ea5331823ae\"},\n\t * \"mac\":\"410544c8307e3691fda305eb3722d82c3431f212a87daa119a21587d96698b57\"}}'\n\t * ]\n\t * ```\n\t */\n\tpublic async encrypt(\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown> | undefined,\n\t): Promise<KeyStore[]> {\n\t\treturn Promise.all(this.map(async (account: T) => account.encrypt(password, options)));\n\t}\n\n\t/**\n\t * Decrypts keystore v3 objects.\n\t *\n\t * @param encryptedWallets - An array of encrypted keystore v3 objects to decrypt\n\t * @param password - The password to encrypt with\n\t * @param options - decrypt options for the wallets\n\t * @returns The decrypted wallet object\n\t *\n\t * ```ts\n\t * web3.eth.accounts.wallet.decrypt([\n\t * { version: 3,\n\t * id: '83191a81-aaca-451f-b63d-0c5f3b849289',\n\t * address: '06f702337909c06c82b09b7a22f0a2f0855d1f68',\n\t * crypto:\n\t * { ciphertext: '7d34deae112841fba86e3e6cf08f5398dda323a8e4d29332621534e2c4069e8d',\n\t *   cipherparams: { iv: '497f4d26997a84d570778eae874b2333' },\n\t *   cipher: 'aes-128-ctr',\n\t *   kdf: 'scrypt',\n\t *   kdfparams:\n\t *    { dklen: 32,\n\t *      salt: '208dd732a27aa4803bb760228dff18515d5313fd085bbce60594a3919ae2d88d',\n\t *      n: 262144,\n\t *      r: 8,\n\t *      p: 1 },\n\t *   mac: '0062a853de302513c57bfe3108ab493733034bf3cb313326f42cf26ea2619cf9' } },\n\t * { version: 3,\n\t * id: '7d6b91fa-3611-407b-b16b-396efb28f97e',\n\t * address: 'b5d89661b59a9af0b34f58d19138baa2de48baaf',\n\t * crypto:\n\t * { ciphertext: 'cb9712d1982ff89f571fa5dbef447f14b7e5f142232bd2a913aac833730eeb43',\n\t *   cipherparams: { iv: '8cccb91cb84e435437f7282ec2ffd2db' },\n\t *   cipher: 'aes-128-ctr',\n\t *   kdf: 'scrypt',\n\t *   kdfparams:\n\t *    { dklen: 32,\n\t *      salt: '08ba6736363c5586434cd5b895e6fe41ea7db4785bd9b901dedce77a1514e8b8',\n\t *      n: 262144,\n\t *      r: 8,\n\t *      p: 1 },\n\t *   mac: 'd2eb068b37e2df55f56fa97a2bf4f55e072bef0dd703bfd917717d9dc54510f0' } }\n\t * ], 'test').then(console.log)\n\t * > Wallet {\n\t *   _accountProvider: {\n\t *     create: [Function: create],\n\t *     privateKeyToAccount: [Function: privateKeyToAccount],\n\t *     decrypt: [Function: decrypt]\n\t *   },\n\t *   _defaultKeyName: 'web3js_wallet',\n\t *   _accounts: {\n\t *     '0x85d70633b90e03e0276b98880286d0d055685ed7': {\n\t *       address: '0x85D70633b90e03e0276B98880286D0D055685ed7',\n\t *       privateKey: '0xbce9b59981303e76c4878b1a6d7b088ec6b9dd5c966b7d5f54d7a749ff683387',\n\t *       signTransaction: [Function: signTransaction],\n\t *       sign: [Function: sign],\n\t *       encrypt: [Function: encrypt]\n\t *     },\n\t *     '0x06f702337909c06c82b09b7a22f0a2f0855d1f68': {\n\t *       address: '0x06F702337909C06C82B09B7A22F0a2f0855d1F68',\n\t *       privateKey: '87a51da18900da7398b3bab03996833138f269f8f66dd1237b98df6b9ce14573',\n\t *       signTransaction: [Function: signTransaction],\n\t *       sign: [Function: sign],\n\t *       encrypt: [Function: encrypt]\n\t *     },\n\t *     '0xb5d89661b59a9af0b34f58d19138baa2de48baaf': {\n\t *       address: '0xB5d89661B59a9aF0b34f58D19138bAa2de48BAaf',\n\t *       privateKey: '7ee61c5282979aae9dd795bb6a54e8bdc2bfe009acb64eb9a67322eec3b3da6e',\n\t *       signTransaction: [Function: signTransaction],\n\t *       sign: [Function: sign],\n\t *       encrypt: [Function: encrypt]\n\t *     }\n\t *   }\n\t * }\n\t * ```\n\t */\n\tpublic async decrypt(\n\t\tencryptedWallets: KeyStore[],\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown> | undefined,\n\t) {\n\t\tconst results = await Promise.all(\n\t\t\tencryptedWallets.map(async (wallet: KeyStore) =>\n\t\t\t\tthis._accountProvider.decrypt(wallet, password, options),\n\t\t\t),\n\t\t);\n\t\tfor (const res of results) {\n\t\t\tthis.add(res);\n\t\t}\n\t\treturn this;\n\t}\n\n\t/**\n\t * Stores the wallet encrypted and as string in local storage.\n\t * **__NOTE:__** Browser only\n\t *\n\t * @param password - The password to encrypt the wallet\n\t * @param keyName - (optional) The key used for the local storage position, defaults to `\"web3js_wallet\"`.\n\t * @returns Will return boolean value true if saved properly\n\t * ```ts\n\t * web3.eth.accounts.wallet.save('test#!$');\n\t * >true\n\t * ```\n\t */\n\tpublic async save(password: string, keyName?: string) {\n\t\tconst storage = Wallet.getStorage();\n\n\t\tif (!storage) {\n\t\t\tthrow new Error('Local storage not available.');\n\t\t}\n\n\t\tstorage.setItem(\n\t\t\tkeyName ?? this._defaultKeyName,\n\t\t\tJSON.stringify(await this.encrypt(password)),\n\t\t);\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * Loads a wallet from local storage and decrypts it.\n\t * **__NOTE:__** Browser only\n\t *\n\t * @param password - The password to decrypt the wallet.\n\t * @param keyName - (optional)The key used for local storage position, defaults to `web3js_wallet\"`\n\t * @returns Returns the wallet object\n\t *\n\t * ```ts\n\t * web3.eth.accounts.wallet.save('test#!$');\n\t * > true\n\t * web3.eth.accounts.wallet.load('test#!$');\n\t * { defaultKeyName: \"web3js_wallet\",\n\t *   length: 0,\n\t *   _accounts: Accounts {_requestManager: RequestManager, givenProvider: Proxy, providers: {…}, _provider: WebsocketProvider, …},\n\t *   [[Prototype]]: Object\n\t * }\n\t * ```\n\t */\n\tpublic async load(password: string, keyName?: string) {\n\t\tconst storage = Wallet.getStorage();\n\n\t\tif (!storage) {\n\t\t\tthrow new Error('Local storage not available.');\n\t\t}\n\n\t\tconst keystore = storage.getItem(keyName ?? this._defaultKeyName);\n\n\t\tif (keystore) {\n\t\t\tawait this.decrypt((JSON.parse(keystore) as KeyStore[]) || [], password);\n\t\t}\n\n\t\treturn this;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}