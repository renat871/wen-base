{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _createForOfIteratorHelper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter } from 'events';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\nvar crc32Uint8Array = pkg.buf;\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport var Common = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(Common, _EventEmitter);\n  var _super = _createSuper(Common);\n  function Common(opts) {\n    var _this;\n    _classCallCheck(this, Common);\n    var _a, _b;\n    _this = _super.call(this);\n    _this._eips = [];\n    _this._customChains = (_a = opts.customChains) !== null && _a !== void 0 ? _a : [];\n    _this._chainParams = _this.setChain(opts.chain);\n    _this.DEFAULT_HARDFORK = (_b = _this._chainParams.defaultHardfork) !== null && _b !== void 0 ? _b : Hardfork.Merge;\n    // Assign hardfork changes in the sequence of the applied hardforks\n    _this.HARDFORK_CHANGES = _this.hardforks().map(function (hf) {\n      return [hf.name, HARDFORK_SPECS[hf.name]];\n    });\n    _this._hardfork = _this.DEFAULT_HARDFORK;\n    if (opts.hardfork !== undefined) {\n      _this.setHardfork(opts.hardfork);\n    }\n    if (opts.eips) {\n      _this.setEIPs(opts.eips);\n    }\n    return _this;\n  }\n  /**\n   * Creates a {@link Common} object for a custom chain, based on a standard one.\n   *\n   * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n   * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n   *\n   * ```javascript\n   * Common.custom({chainId: 123})\n   * ```\n   *\n   * There are also selected supported custom chains which can be initialized by using one of the\n   * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n   *\n   * ```javascript\n   * Common.custom(CustomChains.MaticMumbai)\n   * ```\n   *\n   * Note that these supported custom chains only provide some base parameters (usually the chain and\n   * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n   * the `web3-utils/tx` library to a Layer-2 chain).\n   *\n   * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n   * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n   */\n  _createClass(Common, [{\n    key: \"setChain\",\n    value:\n    /**\n     * Sets the chain\n     * @param chain String ('mainnet') or Number (1) chain representation.\n     *              Or, a Dictionary of chain parameters for a private network.\n     * @returns The dictionary with parameters set as chain\n     */\n    function setChain(chain) {\n      if (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n        this._chainParams = Common._getChainParams(chain, this._customChains);\n      } else if (typeof chain === 'object') {\n        if (this._customChains.length > 0) {\n          throw new Error('Chain must be a string, number, or bigint when initialized with customChains passed in');\n        }\n        var required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n        for (var _i = 0, _required = required; _i < _required.length; _i++) {\n          var param = _required[_i];\n          if (!(param in chain)) {\n            throw new Error(\"Missing required chain parameter: \".concat(param));\n          }\n        }\n        this._chainParams = chain;\n      } else {\n        throw new Error('Wrong input format');\n      }\n      var _iterator = _createForOfIteratorHelper(this.hardforks()),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var hf = _step.value;\n          if (hf.block === undefined) {\n            throw new Error(\"Hardfork cannot have undefined block number\");\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return this._chainParams;\n    }\n    /**\n     * Sets the hardfork to get params for\n     * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n     */\n  }, {\n    key: \"setHardfork\",\n    value: function setHardfork(hardfork) {\n      var existing = false;\n      var _iterator2 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step2;\n      try {\n        for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n          var hfChanges = _step2.value;\n          if (hfChanges[0] === hardfork) {\n            if (this._hardfork !== hardfork) {\n              this._hardfork = hardfork;\n              this.emit('hardforkChanged', hardfork);\n            }\n            existing = true;\n          }\n        }\n      } catch (err) {\n        _iterator2.e(err);\n      } finally {\n        _iterator2.f();\n      }\n      if (!existing) {\n        throw new Error(\"Hardfork with name \".concat(hardfork, \" not supported\"));\n      }\n    }\n    /**\n     * Returns the hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n     * @param timestamp: timestamp in seconds at which block was/is to be minted\n     * @returns The name of the HF\n     */\n  }, {\n    key: \"getHardforkByBlockNumber\",\n    value: function getHardforkByBlockNumber(_blockNumber, _td, _timestamp) {\n      var blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n      var td = toType(_td, TypeOutput.BigInt);\n      var timestamp = toType(_timestamp, TypeOutput.Number);\n      // Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n      var hfs = this.hardforks().filter(function (hf) {\n        return (\n          // eslint-disable-next-line no-null/no-null\n          hf.block !== null ||\n          // eslint-disable-next-line no-null/no-null\n          hf.ttd !== null && hf.ttd !== undefined || hf.timestamp !== undefined\n        );\n      });\n      // eslint-disable-next-line no-null/no-null\n      var mergeIndex = hfs.findIndex(function (hf) {\n        return hf.ttd !== null && hf.ttd !== undefined;\n      });\n      var doubleTTDHF = hfs.slice(mergeIndex + 1)\n      // eslint-disable-next-line no-null/no-null\n      .findIndex(function (hf) {\n        return hf.ttd !== null && hf.ttd !== undefined;\n      });\n      if (doubleTTDHF >= 0) {\n        throw Error(\"More than one merge hardforks found with ttd specified\");\n      }\n      // Find the first hardfork that has a block number greater than `blockNumber`\n      // (skips the merge hardfork since it cannot have a block number specified).\n      // If timestamp is not provided, it also skips timestamps hardforks to continue\n      // discovering/checking number hardforks.\n      var hfIndex = hfs.findIndex(function (hf) {\n        return (\n          // eslint-disable-next-line no-null/no-null\n          hf.block !== null && hf.block > blockNumber || timestamp !== undefined && Number(hf.timestamp) > timestamp\n        );\n      });\n      if (hfIndex === -1) {\n        // all hardforks apply, set hfIndex to the last one as that's the candidate\n        hfIndex = hfs.length;\n      } else if (hfIndex === 0) {\n        // cannot have a case where a block number is before all applied hardforks\n        // since the chain has to start with a hardfork\n        throw Error('Must have at least one hardfork at block 0');\n      }\n      // If timestamp is not provided, we need to rollback to the last hf with block or ttd\n      if (timestamp === undefined) {\n        var stepBack = hfs.slice(0, hfIndex).reverse()\n        // eslint-disable-next-line no-null/no-null\n        .findIndex(function (hf) {\n          return hf.block !== null || hf.ttd !== undefined;\n        });\n        hfIndex -= stepBack;\n      }\n      // Move hfIndex one back to arrive at candidate hardfork\n      hfIndex -= 1;\n      // If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n      // hardforks. so it will now be needed to rollback\n      // eslint-disable-next-line no-null/no-null\n      if (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n        // We're on the merge hardfork.  Let's check the TTD\n        // eslint-disable-next-line no-null/no-null\n        if (td === undefined || td === null || BigInt(hfs[hfIndex].ttd) > td) {\n          // Merge ttd greater than current td so we're on hardfork before merge\n          hfIndex -= 1;\n        }\n        // eslint-disable-next-line no-null/no-null\n      } else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n        if (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd) > td) {\n          throw Error('Maximum HF determined by total difficulty is lower than the block number HF');\n        } else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd) <= td) {\n          throw Error('HF determined by block number is lower than the minimum total difficulty HF');\n        }\n      }\n      var hfStartIndex = hfIndex;\n      // Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n      // This won't anyway be the case with Merge hfs\n      for (; hfIndex < hfs.length - 1; hfIndex += 1) {\n        // break out if hfIndex + 1 is not scheduled at hfIndex\n        if (hfs[hfIndex].block !== hfs[hfIndex + 1].block || hfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp) {\n          break;\n        }\n      }\n      if (timestamp) {\n        var minTimeStamp = hfs.slice(0, hfStartIndex).reduce(function (acc, hf) {\n          var _a;\n          return Math.max(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : '0'), acc);\n        }, 0);\n        if (minTimeStamp > timestamp) {\n          throw Error(\"Maximum HF determined by timestamp is lower than the block number/ttd HF\");\n        }\n        var maxTimeStamp = hfs.slice(hfIndex + 1).reduce(function (acc, hf) {\n          var _a;\n          return Math.min(Number((_a = hf.timestamp) !== null && _a !== void 0 ? _a : timestamp), acc);\n        }, timestamp);\n        if (maxTimeStamp < timestamp) {\n          throw Error(\"Maximum HF determined by block number/ttd is lower than timestamp HF\");\n        }\n      }\n      var hardfork = hfs[hfIndex];\n      return hardfork.name;\n    }\n    /**\n     * Sets a new hardfork based on the block number or an optional\n     * total difficulty (Merge HF) provided.\n     *\n     * An optional TD takes precedence in case the corresponding HF block\n     * is set to `null` or otherwise needs to match (if not an error\n     * will be thrown).\n     *\n     * @param blockNumber\n     * @param td\n     * @param timestamp\n     * @returns The name of the HF set\n     */\n  }, {\n    key: \"setHardforkByBlockNumber\",\n    value: function setHardforkByBlockNumber(blockNumber, td, timestamp) {\n      var hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n      this.setHardfork(hardfork);\n      return hardfork;\n    }\n    /**\n     * Internal helper function, returns the params for the given hardfork for the chain set\n     * @param hardfork Hardfork name\n     * @returns Dictionary with hardfork params or null if hardfork not on chain\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"_getHardfork\",\n    value: function _getHardfork(hardfork) {\n      var hfs = this.hardforks();\n      var _iterator3 = _createForOfIteratorHelper(hfs),\n        _step3;\n      try {\n        for (_iterator3.s(); !(_step3 = _iterator3.n()).done;) {\n          var hf = _step3.value;\n          if (hf.name === hardfork) return hf;\n        }\n        // eslint-disable-next-line no-null/no-null\n      } catch (err) {\n        _iterator3.e(err);\n      } finally {\n        _iterator3.f();\n      }\n      return null;\n    }\n    /**\n     * Sets the active EIPs\n     * @param eips\n     */\n  }, {\n    key: \"setEIPs\",\n    value: function setEIPs() {\n      var eips = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n      var _iterator4 = _createForOfIteratorHelper(eips),\n        _step4;\n      try {\n        for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n          var eip = _step4.value;\n          if (!(eip in EIPs)) {\n            throw new Error(\"\".concat(eip, \" not supported\"));\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n          var minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n          if (!minHF) {\n            throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n            \"\".concat(eip, \" cannot be activated on hardfork \").concat(this.hardfork(), \", minimumHardfork: \").concat(minHF));\n          }\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n          if (EIPs[eip].requiredEIPs !== undefined) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            var _iterator5 = _createForOfIteratorHelper(EIPs[eip].requiredEIPs),\n              _step5;\n            try {\n              for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n                var elem = _step5.value;\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                if (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n                  throw new Error( // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n                  \"\".concat(eip, \" requires EIP \").concat(elem, \", but is not included in the EIP list\"));\n                }\n              }\n            } catch (err) {\n              _iterator5.e(err);\n            } finally {\n              _iterator5.f();\n            }\n          }\n        }\n      } catch (err) {\n        _iterator4.e(err);\n      } finally {\n        _iterator4.f();\n      }\n      this._eips = eips;\n    }\n    /**\n     * Returns a parameter for the current chain setup\n     *\n     * If the parameter is present in an EIP, the EIP always takes precedence.\n     * Otherwise the parameter if taken from the latest applied HF with\n     * a change on the respective parameter.\n     *\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n  }, {\n    key: \"param\",\n    value: function param(topic, name) {\n      // TODO: consider the case that different active EIPs\n      // can change the same parameter\n      var value;\n      var _iterator6 = _createForOfIteratorHelper(this._eips),\n        _step6;\n      try {\n        for (_iterator6.s(); !(_step6 = _iterator6.n()).done;) {\n          var eip = _step6.value;\n          value = this.paramByEIP(topic, name, eip);\n          if (value !== undefined) return value;\n        }\n      } catch (err) {\n        _iterator6.e(err);\n      } finally {\n        _iterator6.f();\n      }\n      return this.paramByHardfork(topic, name, this._hardfork);\n    }\n    /**\n     * Returns the parameter corresponding to a hardfork\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param hardfork Hardfork name\n     * @returns The value requested or `BigInt(0)` if not found\n     */\n  }, {\n    key: \"paramByHardfork\",\n    value: function paramByHardfork(topic, name, hardfork) {\n      // eslint-disable-next-line no-null/no-null\n      var value = null;\n      var _iterator7 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step7;\n      try {\n        for (_iterator7.s(); !(_step7 = _iterator7.n()).done;) {\n          var hfChanges = _step7.value;\n          // EIP-referencing HF file (e.g. berlin.json)\n          if ('eips' in hfChanges[1]) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n            var hfEIPs = hfChanges[1].eips;\n            var _iterator8 = _createForOfIteratorHelper(hfEIPs),\n              _step8;\n            try {\n              for (_iterator8.s(); !(_step8 = _iterator8.n()).done;) {\n                var eip = _step8.value;\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n                var valueEIP = this.paramByEIP(topic, name, eip);\n                // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n                value = typeof valueEIP === 'bigint' ? valueEIP : value;\n              }\n              // Parameter-inlining HF file (e.g. istanbul.json)\n            } catch (err) {\n              _iterator8.e(err);\n            } finally {\n              _iterator8.f();\n            }\n          } else {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (hfChanges[1][topic] === undefined) {\n              throw new Error(\"Topic \".concat(topic, \" not defined\"));\n            }\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (hfChanges[1][topic][name] !== undefined) {\n              // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n              value = hfChanges[1][topic][name].v;\n            }\n          }\n          if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      } catch (err) {\n        _iterator7.e(err);\n      } finally {\n        _iterator7.f();\n      }\n      return BigInt(value !== null && value !== void 0 ? value : 0);\n    }\n    /**\n     * Returns a parameter corresponding to an EIP\n     * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n     * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n     * @param eip Number of the EIP\n     * @returns The value requested or `undefined` if not found\n     */\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"paramByEIP\",\n    value: function paramByEIP(topic, name, eip) {\n      if (!(eip in EIPs)) {\n        throw new Error(\"\".concat(eip, \" not supported\"));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n      var eipParams = EIPs[eip];\n      if (!(topic in eipParams)) {\n        throw new Error(\"Topic \".concat(topic, \" not defined\"));\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n      if (eipParams[topic][name] === undefined) {\n        return undefined;\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n      var value = eipParams[topic][name].v;\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return BigInt(value);\n    }\n    /**\n     * Returns a parameter for the hardfork active on block number or\n     * optional provided total difficulty (Merge HF)\n     * @param topic Parameter topic\n     * @param name Parameter name\n     * @param blockNumber Block number\n     * @param td Total difficulty\n     *    * @returns The value requested or `BigInt(0)` if not found\n     */\n  }, {\n    key: \"paramByBlock\",\n    value: function paramByBlock(topic, name, blockNumber, td, timestamp) {\n      var hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n      return this.paramByHardfork(topic, name, hardfork);\n    }\n    /**\n     * Checks if an EIP is activated by either being included in the EIPs\n     * manually passed in with the {@link CommonOpts.eips} or in a\n     * hardfork currently being active\n     *\n     * Note: this method only works for EIPs being supported\n     * by the {@link CommonOpts.eips} constructor option\n     * @param eip\n     */\n  }, {\n    key: \"isActivatedEIP\",\n    value: function isActivatedEIP(eip) {\n      if (this.eips().includes(eip)) {\n        return true;\n      }\n      var _iterator9 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step9;\n      try {\n        for (_iterator9.s(); !(_step9 = _iterator9.n()).done;) {\n          var hfChanges = _step9.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          var hf = hfChanges[1];\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n          if (this.gteHardfork(hf.name) && 'eips' in hf) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n            if (hf.eips.includes(eip)) {\n              return true;\n            }\n          }\n        }\n      } catch (err) {\n        _iterator9.e(err);\n      } finally {\n        _iterator9.f();\n      }\n      return false;\n    }\n    /**\n     * Checks if set or provided hardfork is active on block number\n     * @param hardfork Hardfork name or null (for HF set)\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n  }, {\n    key: \"hardforkIsActiveOnBlock\",\n    value: function hardforkIsActiveOnBlock(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _hardfork, _blockNumber) {\n      var blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var hfBlock = this.hardforkBlock(hardfork);\n      if (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n        return true;\n      }\n      return false;\n    }\n    /**\n     * Alias to hardforkIsActiveOnBlock when hardfork is set\n     * @param blockNumber\n     * @returns True if HF is active on block number\n     */\n  }, {\n    key: \"activeOnBlock\",\n    value: function activeOnBlock(blockNumber) {\n      // eslint-disable-next-line no-null/no-null\n      return this.hardforkIsActiveOnBlock(null, blockNumber);\n    }\n    /**\n     * Sequence based check if given or set HF1 is greater than or equal HF2\n     * @param hardfork1 Hardfork name or null (if set)\n     * @param hardfork2 Hardfork name\n     * @param opts Hardfork options\n     * @returns True if HF1 gte HF2\n     */\n  }, {\n    key: \"hardforkGteHardfork\",\n    value: function hardforkGteHardfork(\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    _hardfork1, hardfork2) {\n      var hardfork1 = _hardfork1 !== null && _hardfork1 !== void 0 ? _hardfork1 : this._hardfork;\n      var hardforks = this.hardforks();\n      var posHf1 = -1;\n      var posHf2 = -1;\n      var index = 0;\n      var _iterator10 = _createForOfIteratorHelper(hardforks),\n        _step10;\n      try {\n        for (_iterator10.s(); !(_step10 = _iterator10.n()).done;) {\n          var hf = _step10.value;\n          if (hf.name === hardfork1) posHf1 = index;\n          if (hf.name === hardfork2) posHf2 = index;\n          index += 1;\n        }\n      } catch (err) {\n        _iterator10.e(err);\n      } finally {\n        _iterator10.f();\n      }\n      return posHf1 >= posHf2 && posHf2 !== -1;\n    }\n    /**\n     * Alias to hardforkGteHardfork when hardfork is set\n     * @param hardfork Hardfork name\n     * @returns True if hardfork set is greater than hardfork provided\n     */\n  }, {\n    key: \"gteHardfork\",\n    value: function gteHardfork(hardfork) {\n      // eslint-disable-next-line no-null/no-null\n      return this.hardforkGteHardfork(null, hardfork);\n    }\n    /**\n     * Returns the hardfork change block for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if unscheduled\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"hardforkBlock\",\n    value: function hardforkBlock(_hardfork) {\n      var _a;\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var block = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.block;\n      // eslint-disable-next-line no-null/no-null\n      if (block === undefined || block === null) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      return BigInt(block);\n    }\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"hardforkTimestamp\",\n    value: function hardforkTimestamp(_hardfork) {\n      var _a;\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var timestamp = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.timestamp;\n      // eslint-disable-next-line no-null/no-null\n      if (timestamp === undefined || timestamp === null) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      return BigInt(timestamp);\n    }\n    /**\n     * Returns the hardfork change block for eip\n     * @param eip EIP number\n     * @returns Block number or null if unscheduled\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"eipBlock\",\n    value: function eipBlock(eip) {\n      var _iterator11 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step11;\n      try {\n        for (_iterator11.s(); !(_step11 = _iterator11.n()).done;) {\n          var hfChanges = _step11.value;\n          // eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n          var hf = hfChanges[1];\n          if ('eips' in hf) {\n            // eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n            if (hf.eips.includes(eip)) {\n              return this.hardforkBlock(typeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0]);\n            }\n          }\n        }\n        // eslint-disable-next-line no-null/no-null\n      } catch (err) {\n        _iterator11.e(err);\n      } finally {\n        _iterator11.f();\n      }\n      return null;\n    }\n    /**\n     * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Total difficulty or null if no set\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"hardforkTTD\",\n    value: function hardforkTTD(_hardfork) {\n      var _a;\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var ttd = (_a = this._getHardfork(hardfork)) === null || _a === void 0 ? void 0 : _a.ttd;\n      // eslint-disable-next-line no-null/no-null\n      if (ttd === undefined || ttd === null) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      return BigInt(ttd);\n    }\n    /**\n     * True if block number provided is the hardfork (given or set) change block\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n  }, {\n    key: \"isHardforkBlock\",\n    value: function isHardforkBlock(_blockNumber, _hardfork) {\n      var blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var block = this.hardforkBlock(hardfork);\n      return typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block timestamp, number or null if not available\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"nextHardforkBlockOrTimestamp\",\n    value: function nextHardforkBlockOrTimestamp(_hardfork) {\n      var _a, _b;\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var hfs = this.hardforks();\n      var hfIndex = hfs.findIndex(function (hf) {\n        return hf.name === hardfork;\n      });\n      // If the current hardfork is merge, go one behind as merge hf is not part of these\n      // calcs even if the merge hf block is set\n      if (hardfork === Hardfork.Merge) {\n        hfIndex -= 1;\n      }\n      // Hardfork not found\n      if (hfIndex < 0) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      var currHfTimeOrBlock = (_a = hfs[hfIndex].timestamp) !== null && _a !== void 0 ? _a : hfs[hfIndex].block;\n      currHfTimeOrBlock =\n      // eslint-disable-next-line no-null/no-null\n      currHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined ? Number(currHfTimeOrBlock) :\n      // eslint-disable-next-line no-null/no-null\n      null;\n      var nextHf = hfs.slice(hfIndex + 1).find(function (hf) {\n        var _a;\n        var hfTimeOrBlock = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n        hfTimeOrBlock =\n        // eslint-disable-next-line no-null/no-null\n        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined ? Number(hfTimeOrBlock) :\n        // eslint-disable-next-line no-null/no-null\n        null;\n        return hf.name !== Hardfork.Merge &&\n        // eslint-disable-next-line no-null/no-null\n        hfTimeOrBlock !== null && hfTimeOrBlock !== undefined && hfTimeOrBlock !== currHfTimeOrBlock;\n      });\n      // If no next hf found with valid block or timestamp return null\n      if (nextHf === undefined) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      var nextHfBlock = (_b = nextHf.timestamp) !== null && _b !== void 0 ? _b : nextHf.block;\n      // eslint-disable-next-line no-null/no-null\n      if (nextHfBlock === null || nextHfBlock === undefined) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      return BigInt(nextHfBlock);\n    }\n    /**\n     * Returns the change block for the next hardfork after the hardfork provided or set\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns Block number or null if not available\n     * @deprecated\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"nextHardforkBlock\",\n    value: function nextHardforkBlock(_hardfork) {\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var hfBlock = this.hardforkBlock(hardfork);\n      // If this is a merge hardfork with block not set, then we fallback to previous hardfork\n      // to find the nextHardforkBlock\n      // eslint-disable-next-line no-null/no-null\n      if (hfBlock === null && hardfork === Hardfork.Merge) {\n        var hfs = this.hardforks();\n        // eslint-disable-next-line no-null/no-null\n        var mergeIndex = hfs.findIndex(function (hf) {\n          return hf.ttd !== null && hf.ttd !== undefined;\n        });\n        if (mergeIndex < 0) {\n          throw Error(\"Merge hardfork should have been found\");\n        }\n        hfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n      }\n      // eslint-disable-next-line no-null/no-null\n      if (hfBlock === null) {\n        // eslint-disable-next-line no-null/no-null\n        return null;\n      }\n      // Next fork block number or null if none available\n      // Logic: if accumulator is still null and on the first occurrence of\n      // a block greater than the current hfBlock set the accumulator,\n      // pass on the accumulator as the final result from this time on\n      // eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n      var nextHfBlock = this.hardforks().reduce(function (acc, hf) {\n        // We need to ignore the merge block in our next hardfork calc\n        var block = BigInt(\n        // eslint-disable-next-line no-null/no-null\n        hf.block === null || hf.ttd !== undefined && hf.ttd !== null ? 0 : hf.block);\n        // Typescript can't seem to follow that the hfBlock is not null at this point\n        // eslint-disable-next-line no-null/no-null\n        return block > hfBlock && acc === null ? block : acc;\n        // eslint-disable-next-line no-null/no-null\n      }, null);\n      return nextHfBlock;\n    }\n    /**\n     * True if block number provided is the hardfork change block following the hardfork given or set\n     * @param blockNumber Number of the block to check\n     * @param hardfork Hardfork name, optional if HF set\n     * @returns True if blockNumber is HF block\n     * @deprecated\n     */\n  }, {\n    key: \"isNextHardforkBlock\",\n    value: function isNextHardforkBlock(_blockNumber, _hardfork) {\n      var blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      // eslint-disable-next-line deprecation/deprecation\n      var nextHardforkBlock = this.nextHardforkBlock(hardfork);\n      // eslint-disable-next-line no-null/no-null\n      return nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n    }\n    /**\n     * Internal helper function to calculate a fork hash\n     * @param hardfork Hardfork name\n     * @param genesisHash Genesis block hash of the chain\n     * @returns Fork hash as hex string\n     */\n  }, {\n    key: \"_calcForkHash\",\n    value: function _calcForkHash(hardfork, genesisHash) {\n      var hfUint8Array = new Uint8Array();\n      var prevBlockOrTime = 0;\n      var _iterator12 = _createForOfIteratorHelper(this.hardforks()),\n        _step12;\n      try {\n        for (_iterator12.s(); !(_step12 = _iterator12.n()).done;) {\n          var hf = _step12.value;\n          var block = hf.block,\n            timestamp = hf.timestamp,\n            name = hf.name;\n          // Timestamp to be used for timestamp based hfs even if we may bundle\n          // block number with them retrospectively\n          var blockOrTime = timestamp !== null && timestamp !== void 0 ? timestamp : block;\n          // eslint-disable-next-line no-null/no-null\n          blockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n          // Skip for chainstart (0), not applied HFs (null) and\n          // when already applied on same blockOrTime HFs\n          // and on the merge since forkhash doesn't change on merge hf\n          if (typeof blockOrTime === 'number' && blockOrTime !== 0 && blockOrTime !== prevBlockOrTime && name !== Hardfork.Merge) {\n            var hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n            hfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n            prevBlockOrTime = blockOrTime;\n          }\n          if (hf.name === hardfork) break;\n        }\n      } catch (err) {\n        _iterator12.e(err);\n      } finally {\n        _iterator12.f();\n      }\n      var inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n      // CRC32 delivers result as signed (negative) 32-bit integer,\n      // convert to hex string\n      // eslint-disable-next-line no-bitwise\n      var forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n      return forkhash;\n    }\n    /**\n     * Returns an eth/64 compliant fork hash (EIP-2124)\n     * @param hardfork Hardfork name, optional if HF set\n     * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n     */\n  }, {\n    key: \"forkHash\",\n    value: function forkHash(_hardfork, genesisHash) {\n      var hardfork = _hardfork !== null && _hardfork !== void 0 ? _hardfork : this._hardfork;\n      var data = this._getHardfork(hardfork);\n      if (\n      // eslint-disable-next-line no-null/no-null\n      data === null ||\n      // eslint-disable-next-line no-null/no-null\n      (data === null || data === void 0 ? void 0 : data.block) === null && (data === null || data === void 0 ? void 0 : data.timestamp) === undefined && (data === null || data === void 0 ? void 0 : data.ttd) === undefined) {\n        var msg = 'No fork hash calculation possible for future hardfork';\n        throw new Error(msg);\n      }\n      // eslint-disable-next-line no-null/no-null\n      if ((data === null || data === void 0 ? void 0 : data.forkHash) !== null && (data === null || data === void 0 ? void 0 : data.forkHash) !== undefined) {\n        return data.forkHash;\n      }\n      if (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n      return this._calcForkHash(hardfork, genesisHash);\n    }\n    /**\n     *\n     * @param forkHash Fork hash as a hex string\n     * @returns Array with hardfork data (name, block, forkHash)\n     */\n    // eslint-disable-next-line @typescript-eslint/ban-types\n  }, {\n    key: \"hardforkForForkHash\",\n    value: function hardforkForForkHash(forkHash) {\n      var resArray = this.hardforks().filter(function (hf) {\n        return hf.forkHash === forkHash;\n      });\n      // eslint-disable-next-line no-null/no-null\n      return resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n    }\n    /**\n     * Sets any missing forkHashes on the passed-in {@link Common} instance\n     * @param common The {@link Common} to set the forkHashes for\n     * @param genesisHash The genesis block hash\n     */\n  }, {\n    key: \"setForkHashes\",\n    value: function setForkHashes(genesisHash) {\n      var _a;\n      var _iterator13 = _createForOfIteratorHelper(this.hardforks()),\n        _step13;\n      try {\n        for (_iterator13.s(); !(_step13 = _iterator13.n()).done;) {\n          var hf = _step13.value;\n          var blockOrTime = (_a = hf.timestamp) !== null && _a !== void 0 ? _a : hf.block;\n          if (\n          // eslint-disable-next-line no-null/no-null\n          (hf.forkHash === null || hf.forkHash === undefined) && (\n          // eslint-disable-next-line no-null/no-null\n          blockOrTime !== null && blockOrTime !== undefined || typeof hf.ttd !== 'undefined')) {\n            hf.forkHash = this.forkHash(hf.name, genesisHash);\n          }\n        }\n      } catch (err) {\n        _iterator13.e(err);\n      } finally {\n        _iterator13.f();\n      }\n    }\n    /**\n     * Returns the Genesis parameters of the current chain\n     * @returns Genesis dictionary\n     */\n  }, {\n    key: \"genesis\",\n    value: function genesis() {\n      return this._chainParams.genesis;\n    }\n    /**\n     * Returns the hardforks for current chain\n     * @returns {Array} Array with arrays of hardforks\n     */\n  }, {\n    key: \"hardforks\",\n    value: function hardforks() {\n      return this._chainParams.hardforks;\n    }\n    /**\n     * Returns bootstrap nodes for the current chain\n     * @returns {Dictionary} Dict with bootstrap nodes\n     */\n  }, {\n    key: \"bootstrapNodes\",\n    value: function bootstrapNodes() {\n      return this._chainParams.bootstrapNodes;\n    }\n    /**\n     * Returns DNS networks for the current chain\n     * @returns {String[]} Array of DNS ENR urls\n     */\n  }, {\n    key: \"dnsNetworks\",\n    value: function dnsNetworks() {\n      return this._chainParams.dnsNetworks;\n    }\n    /**\n     * Returns the hardfork set\n     * @returns Hardfork name\n     */\n  }, {\n    key: \"hardfork\",\n    value: function hardfork() {\n      return this._hardfork;\n    }\n    /**\n     * Returns the Id of current chain\n     * @returns chain Id\n     */\n  }, {\n    key: \"chainId\",\n    value: function chainId() {\n      return BigInt(this._chainParams.chainId);\n    }\n    /**\n     * Returns the name of current chain\n     * @returns chain name (lower case)\n     */\n  }, {\n    key: \"chainName\",\n    value: function chainName() {\n      return this._chainParams.name;\n    }\n    /**\n     * Returns the Id of current network\n     * @returns network Id\n     */\n  }, {\n    key: \"networkId\",\n    value: function networkId() {\n      return BigInt(this._chainParams.networkId);\n    }\n    /**\n     * Returns the active EIPs\n     * @returns List of EIPs\n     */\n  }, {\n    key: \"eips\",\n    value: function eips() {\n      return this._eips;\n    }\n    /**\n     * Returns the consensus type of the network\n     * Possible values: \"pow\"|\"poa\"|\"pos\"\n     *\n     * Note: This value can update along a Hardfork.\n     */\n  }, {\n    key: \"consensusType\",\n    value: function consensusType() {\n      var hardfork = this.hardfork();\n      var value;\n      var _iterator14 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step14;\n      try {\n        for (_iterator14.s(); !(_step14 = _iterator14.n()).done;) {\n          var hfChanges = _step14.value;\n          if ('consensus' in hfChanges[1]) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n            value = hfChanges[1].consensus.type;\n          }\n          if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      } catch (err) {\n        _iterator14.e(err);\n      } finally {\n        _iterator14.f();\n      }\n      return value !== null && value !== void 0 ? value : this._chainParams.consensus.type;\n    }\n    /**\n     * Returns the concrete consensus implementation\n     * algorithm or protocol for the network\n     * e.g. \"ethash\" for \"pow\" consensus type,\n     * \"clique\" for \"poa\" consensus type or\n     * \"casper\" for \"pos\" consensus type.\n     *\n     * Note: This value can update along a Hardfork.\n     */\n  }, {\n    key: \"consensusAlgorithm\",\n    value: function consensusAlgorithm() {\n      var hardfork = this.hardfork();\n      var value;\n      var _iterator15 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step15;\n      try {\n        for (_iterator15.s(); !(_step15 = _iterator15.n()).done;) {\n          var hfChanges = _step15.value;\n          if ('consensus' in hfChanges[1]) {\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n            value = hfChanges[1].consensus.algorithm;\n          }\n          if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      } catch (err) {\n        _iterator15.e(err);\n      } finally {\n        _iterator15.f();\n      }\n      return value !== null && value !== void 0 ? value : this._chainParams.consensus.algorithm;\n    }\n    /**\n     * Returns a dictionary with consensus configuration\n     * parameters based on the consensus algorithm\n     *\n     * Expected returns (parameters must be present in\n     * the respective chain json files):\n     *\n     * ethash: empty object\n     * clique: period, epoch\n     * casper: empty object\n     *\n     * Note: This value can update along a Hardfork.\n     */\n  }, {\n    key: \"consensusConfig\",\n    value: function consensusConfig() {\n      var _a;\n      var hardfork = this.hardfork();\n      var value;\n      var _iterator16 = _createForOfIteratorHelper(this.HARDFORK_CHANGES),\n        _step16;\n      try {\n        for (_iterator16.s(); !(_step16 = _iterator16.n()).done;) {\n          var hfChanges = _step16.value;\n          if ('consensus' in hfChanges[1]) {\n            // The config parameter is named after the respective consensus algorithm\n            // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n            value = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n          }\n          if (hfChanges[0] === hardfork) break;\n        }\n        // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      } catch (err) {\n        _iterator16.e(err);\n      } finally {\n        _iterator16.f();\n      }\n      return (_a = value !== null && value !== void 0 ? value : this._chainParams.consensus[this.consensusAlgorithm()]) !== null && _a !== void 0 ? _a : {};\n    }\n    /**\n     * Returns a deep copy of this {@link Common} instance.\n     */\n  }, {\n    key: \"copy\",\n    value: function copy() {\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n      var copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n      copy.removeAllListeners();\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-return\n      return copy;\n    }\n  }], [{\n    key: \"custom\",\n    value: function custom(chainParamsOrName) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      var _a;\n      var baseChain = (_a = opts.baseChain) !== null && _a !== void 0 ? _a : 'mainnet';\n      var standardChainParams = Object.assign({}, Common._getChainParams(baseChain));\n      standardChainParams.name = 'custom-chain';\n      if (typeof chainParamsOrName !== 'string') {\n        return new Common(Object.assign({\n          chain: Object.assign(Object.assign({}, standardChainParams), chainParamsOrName)\n        }, opts));\n      }\n      if (chainParamsOrName === CustomChain.PolygonMainnet) {\n        return Common.custom({\n          name: CustomChain.PolygonMainnet,\n          chainId: 137,\n          networkId: 137\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.PolygonMumbai) {\n        return Common.custom({\n          name: CustomChain.PolygonMumbai,\n          chainId: 80001,\n          networkId: 80001\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n        return Common.custom({\n          name: CustomChain.ArbitrumRinkebyTestnet,\n          chainId: 421611,\n          networkId: 421611\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.ArbitrumOne) {\n        return Common.custom({\n          name: CustomChain.ArbitrumOne,\n          chainId: 42161,\n          networkId: 42161\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.xDaiChain) {\n        return Common.custom({\n          name: CustomChain.xDaiChain,\n          chainId: 100,\n          networkId: 100\n        }, opts);\n      }\n      if (chainParamsOrName === CustomChain.OptimisticKovan) {\n        return Common.custom({\n          name: CustomChain.OptimisticKovan,\n          chainId: 69,\n          networkId: 69\n        }, Object.assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n      if (chainParamsOrName === CustomChain.OptimisticEthereum) {\n        return Common.custom({\n          name: CustomChain.OptimisticEthereum,\n          chainId: 10,\n          networkId: 10\n        }, Object.assign({\n          hardfork: Hardfork.Berlin\n        }, opts));\n      }\n      // eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n      throw new Error(\"Custom chain \".concat(chainParamsOrName, \" not supported\"));\n    }\n    /**\n     * Static method to load and set common from a geth genesis json\n     * @param genesisJson json of geth configuration\n     * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n     * @returns Common\n     */\n  }, {\n    key: \"fromGethGenesis\",\n    value: function fromGethGenesis(genesisJson, _ref) {\n      var chain = _ref.chain,\n        eips = _ref.eips,\n        genesisHash = _ref.genesisHash,\n        hardfork = _ref.hardfork,\n        mergeForkIdPostMerge = _ref.mergeForkIdPostMerge;\n      var _a;\n      var genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n      var common = new Common({\n        chain: (_a = genesisParams.name) !== null && _a !== void 0 ? _a : 'custom',\n        customChains: [genesisParams],\n        eips: eips,\n        hardfork: hardfork !== null && hardfork !== void 0 ? hardfork : genesisParams.hardfork\n      });\n      if (genesisHash !== undefined) {\n        common.setForkHashes(genesisHash);\n      }\n      return common;\n    }\n    /**\n     * Static method to determine if a {@link chainId} is supported as a standard chain\n     * @param chainId bigint id (`1`) of a standard chain\n     * @returns boolean\n     */\n  }, {\n    key: \"isSupportedChainId\",\n    value: function isSupportedChainId(chainId) {\n      var initializedChains = this._getInitializedChains();\n      return Boolean(initializedChains.names[chainId.toString()]);\n    }\n  }, {\n    key: \"_getChainParams\",\n    value: function _getChainParams(_chain, customChains) {\n      var chain = _chain;\n      var initializedChains = this._getInitializedChains(customChains);\n      if (typeof chain === 'number' || typeof chain === 'bigint') {\n        chain = chain.toString();\n        if (initializedChains.names[chain]) {\n          var name = initializedChains.names[chain];\n          return initializedChains[name];\n        }\n        throw new Error(\"Chain with ID \".concat(chain, \" not supported\"));\n      }\n      if (initializedChains[chain] !== undefined) {\n        return initializedChains[chain];\n      }\n      throw new Error(\"Chain with name \".concat(chain, \" not supported\"));\n    }\n  }, {\n    key: \"_getInitializedChains\",\n    value: function _getInitializedChains(customChains) {\n      var names = {};\n      for (var _i2 = 0, _Object$entries = Object.entries(Chain); _i2 < _Object$entries.length; _i2++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i2], 2),\n          name = _Object$entries$_i[0],\n          id = _Object$entries$_i[1];\n        names[id] = name.toLowerCase();\n      }\n      var chains = {\n        mainnet: mainnet,\n        goerli: goerli,\n        sepolia: sepolia\n      };\n      if (customChains) {\n        var _iterator17 = _createForOfIteratorHelper(customChains),\n          _step17;\n        try {\n          for (_iterator17.s(); !(_step17 = _iterator17.n()).done;) {\n            var chain = _step17.value;\n            var _name = chain.name;\n            names[chain.chainId.toString()] = _name;\n            chains[_name] = chain;\n          }\n        } catch (err) {\n          _iterator17.e(err);\n        } finally {\n          _iterator17.f();\n        }\n      }\n      chains.names = names;\n      return chains;\n    }\n  }]);\n  return Common;\n}(EventEmitter);","map":{"version":3,"names":["pkg","EventEmitter","bytesToHex","hexToBytes","uint8ArrayConcat","TypeOutput","intToUint8Array","toType","parseGethGenesis","goerli","mainnet","sepolia","EIPs","Chain","CustomChain","Hardfork","hardforks","HARDFORK_SPECS","crc32Uint8Array","buf","Common","_EventEmitter","_inherits","_super","_createSuper","opts","_this","_classCallCheck","call","_eips","_customChains","_a","customChains","_chainParams","setChain","chain","DEFAULT_HARDFORK","_b","defaultHardfork","Merge","HARDFORK_CHANGES","map","hf","name","_hardfork","hardfork","undefined","setHardfork","eips","setEIPs","_createClass","key","value","_getChainParams","length","Error","required","_i","_required","param","concat","_iterator","_createForOfIteratorHelper","_step","s","n","done","block","err","e","f","existing","_iterator2","_step2","hfChanges","emit","getHardforkByBlockNumber","_blockNumber","_td","_timestamp","blockNumber","BigInt","td","timestamp","Number","hfs","filter","ttd","mergeIndex","findIndex","doubleTTDHF","slice","hfIndex","stepBack","reverse","hfStartIndex","minTimeStamp","reduce","acc","Math","max","maxTimeStamp","min","setHardforkByBlockNumber","_getHardfork","_iterator3","_step3","arguments","_iterator4","_step4","eip","minHF","gteHardfork","minimumHardfork","requiredEIPs","_iterator5","_step5","elem","includes","isActivatedEIP","topic","_iterator6","_step6","paramByEIP","paramByHardfork","_iterator7","_step7","hfEIPs","_iterator8","_step8","valueEIP","v","eipParams","paramByBlock","_iterator9","_step9","hardforkIsActiveOnBlock","hfBlock","hardforkBlock","activeOnBlock","hardforkGteHardfork","_hardfork1","hardfork2","hardfork1","posHf1","posHf2","index","_iterator10","_step10","hardforkTimestamp","eipBlock","_iterator11","_step11","String","hardforkTTD","isHardforkBlock","nextHardforkBlockOrTimestamp","currHfTimeOrBlock","nextHf","find","hfTimeOrBlock","nextHfBlock","nextHardforkBlock","isNextHardforkBlock","_calcForkHash","genesisHash","hfUint8Array","Uint8Array","prevBlockOrTime","_iterator12","_step12","blockOrTime","hfBlockUint8Array","toString","padStart","inputUint8Array","forkhash","forkHash","data","msg","hardforkForForkHash","resArray","setForkHashes","_step13","_iterator13","genesis","bootstrapNodes","dnsNetworks","chainId","chainName","networkId","consensusType","_iterator14","_step14","consensus","type","consensusAlgorithm","_iterator15","_step15","algorithm","consensusConfig","_iterator16","_step16","copy","Object","assign","create","getPrototypeOf","removeAllListeners","custom","chainParamsOrName","baseChain","standardChainParams","PolygonMainnet","PolygonMumbai","ArbitrumRinkebyTestnet","ArbitrumOne","xDaiChain","OptimisticKovan","Berlin","OptimisticEthereum","fromGethGenesis","genesisJson","_ref","mergeForkIdPostMerge","genesisParams","common","isSupportedChainId","initializedChains","_getInitializedChains","Boolean","names","_chain","_i2","_Object$entries","entries","_Object$entries$_i","_slicedToArray","id","toLowerCase","chains","_iterator17","_step17"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\common\\common.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport pkg from 'crc-32';\nimport { EventEmitter } from 'events';\nimport type { Numbers } from 'web3-types';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat } from 'web3-utils';\nimport { TypeOutput } from './types.js';\nimport { intToUint8Array, toType, parseGethGenesis } from './utils.js';\nimport goerli from './chains/goerli.js';\nimport mainnet from './chains/mainnet.js';\nimport sepolia from './chains/sepolia.js';\nimport { EIPs } from './eips/index.js';\nimport type { ConsensusAlgorithm, ConsensusType } from './enums.js';\nimport { Chain, CustomChain, Hardfork } from './enums.js';\nimport { hardforks as HARDFORK_SPECS } from './hardforks/index.js';\n\nimport type {\n\tBootstrapNodeConfig,\n\tCasperConfig,\n\tChainConfig,\n\tChainName,\n\tChainsConfig,\n\tCliqueConfig,\n\tCommonOpts,\n\tCustomCommonOpts,\n\tEthashConfig,\n\tGenesisBlockConfig,\n\tGethConfigOpts,\n\tHardforkConfig,\n} from './types.js';\n\nconst { buf: crc32Uint8Array } = pkg;\n\ntype HardforkSpecKeys = keyof typeof HARDFORK_SPECS;\ntype HardforkSpecValues = typeof HARDFORK_SPECS[HardforkSpecKeys];\n/**\n * Common class to access chain and hardfork parameters and to provide\n * a unified and shared view on the network and hardfork state.\n *\n * Use the {@link Common.custom} static constructor for creating simple\n * custom chain {@link Common} objects (more complete custom chain setups\n * can be created via the main constructor and the {@link CommonOpts.customChains} parameter).\n */\nexport class Common extends EventEmitter {\n\tpublic readonly DEFAULT_HARDFORK: string | Hardfork;\n\n\tprivate _chainParams: ChainConfig;\n\tprivate _hardfork: string | Hardfork;\n\tprivate _eips: number[] = [];\n\tprivate readonly _customChains: ChainConfig[];\n\n\tprivate readonly HARDFORK_CHANGES: [HardforkSpecKeys, HardforkSpecValues][];\n\n\t/**\n\t * Creates a {@link Common} object for a custom chain, based on a standard one.\n\t *\n\t * It uses all the {@link Chain} parameters from the {@link baseChain} option except the ones overridden\n\t * in a provided {@link chainParamsOrName} dictionary. Some usage example:\n\t *\n\t * ```javascript\n\t * Common.custom({chainId: 123})\n\t * ```\n\t *\n\t * There are also selected supported custom chains which can be initialized by using one of the\n\t * {@link CustomChains} for {@link chainParamsOrName}, e.g.:\n\t *\n\t * ```javascript\n\t * Common.custom(CustomChains.MaticMumbai)\n\t * ```\n\t *\n\t * Note that these supported custom chains only provide some base parameters (usually the chain and\n\t * network ID and a name) and can only be used for selected use cases (e.g. sending a tx with\n\t * the `web3-utils/tx` library to a Layer-2 chain).\n\t *\n\t * @param chainParamsOrName Custom parameter dict (`name` will default to `custom-chain`) or string with name of a supported custom chain\n\t * @param opts Custom chain options to set the {@link CustomCommonOpts.baseChain}, selected {@link CustomCommonOpts.hardfork} and others\n\t */\n\tpublic static custom(\n\t\tchainParamsOrName: Partial<ChainConfig> | CustomChain,\n\t\topts: CustomCommonOpts = {},\n\t): Common {\n\t\tconst baseChain = opts.baseChain ?? 'mainnet';\n\t\tconst standardChainParams = { ...Common._getChainParams(baseChain) };\n\t\tstandardChainParams.name = 'custom-chain';\n\n\t\tif (typeof chainParamsOrName !== 'string') {\n\t\t\treturn new Common({\n\t\t\t\tchain: {\n\t\t\t\t\t...standardChainParams,\n\t\t\t\t\t...chainParamsOrName,\n\t\t\t\t},\n\t\t\t\t...opts,\n\t\t\t});\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMainnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMainnet,\n\t\t\t\t\tchainId: 137,\n\t\t\t\t\tnetworkId: 137,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.PolygonMumbai) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.PolygonMumbai,\n\t\t\t\t\tchainId: 80001,\n\t\t\t\t\tnetworkId: 80001,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumRinkebyTestnet) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumRinkebyTestnet,\n\t\t\t\t\tchainId: 421611,\n\t\t\t\t\tnetworkId: 421611,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.ArbitrumOne) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.ArbitrumOne,\n\t\t\t\t\tchainId: 42161,\n\t\t\t\t\tnetworkId: 42161,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\t\tif (chainParamsOrName === CustomChain.xDaiChain) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.xDaiChain,\n\t\t\t\t\tchainId: 100,\n\t\t\t\t\tnetworkId: 100,\n\t\t\t\t},\n\t\t\t\topts,\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticKovan) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticKovan,\n\t\t\t\t\tchainId: 69,\n\t\t\t\t\tnetworkId: 69,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\n\t\tif (chainParamsOrName === CustomChain.OptimisticEthereum) {\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: CustomChain.OptimisticEthereum,\n\t\t\t\t\tchainId: 10,\n\t\t\t\t\tnetworkId: 10,\n\t\t\t\t},\n\t\t\t\t// Optimism has not implemented the London hardfork yet (targeting Q1.22)\n\t\t\t\t{ hardfork: Hardfork.Berlin, ...opts },\n\t\t\t);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\tthrow new Error(`Custom chain ${chainParamsOrName} not supported`);\n\t}\n\n\t/**\n\t * Static method to load and set common from a geth genesis json\n\t * @param genesisJson json of geth configuration\n\t * @param { chain, eips, genesisHash, hardfork, mergeForkIdPostMerge } to further configure the common instance\n\t * @returns Common\n\t */\n\tpublic static fromGethGenesis(\n\t\tgenesisJson: any,\n\t\t{ chain, eips, genesisHash, hardfork, mergeForkIdPostMerge }: GethConfigOpts,\n\t): Common {\n\t\tconst genesisParams = parseGethGenesis(genesisJson, chain, mergeForkIdPostMerge);\n\t\tconst common = new Common({\n\t\t\tchain: genesisParams.name ?? 'custom',\n\t\t\tcustomChains: [genesisParams],\n\t\t\teips,\n\t\t\thardfork: hardfork ?? genesisParams.hardfork,\n\t\t});\n\t\tif (genesisHash !== undefined) {\n\t\t\tcommon.setForkHashes(genesisHash);\n\t\t}\n\t\treturn common;\n\t}\n\n\t/**\n\t * Static method to determine if a {@link chainId} is supported as a standard chain\n\t * @param chainId bigint id (`1`) of a standard chain\n\t * @returns boolean\n\t */\n\tpublic static isSupportedChainId(chainId: bigint): boolean {\n\t\tconst initializedChains = this._getInitializedChains();\n\t\treturn Boolean((initializedChains.names as ChainName)[chainId.toString()]);\n\t}\n\n\tprivate static _getChainParams(\n\t\t_chain: string | number | Chain | bigint,\n\t\tcustomChains?: ChainConfig[],\n\t): ChainConfig {\n\t\tlet chain = _chain;\n\t\tconst initializedChains = this._getInitializedChains(customChains);\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint') {\n\t\t\tchain = chain.toString();\n\n\t\t\tif ((initializedChains.names as ChainName)[chain]) {\n\t\t\t\tconst name: string = (initializedChains.names as ChainName)[chain];\n\t\t\t\treturn initializedChains[name] as ChainConfig;\n\t\t\t}\n\n\t\t\tthrow new Error(`Chain with ID ${chain} not supported`);\n\t\t}\n\n\t\tif (initializedChains[chain] !== undefined) {\n\t\t\treturn initializedChains[chain] as ChainConfig;\n\t\t}\n\n\t\tthrow new Error(`Chain with name ${chain} not supported`);\n\t}\n\n\tpublic constructor(opts: CommonOpts) {\n\t\tsuper();\n\t\tthis._customChains = opts.customChains ?? [];\n\t\tthis._chainParams = this.setChain(opts.chain);\n\t\tthis.DEFAULT_HARDFORK = this._chainParams.defaultHardfork ?? Hardfork.Merge;\n\t\t// Assign hardfork changes in the sequence of the applied hardforks\n\t\tthis.HARDFORK_CHANGES = this.hardforks().map(hf => [\n\t\t\thf.name as HardforkSpecKeys,\n\t\t\tHARDFORK_SPECS[hf.name as HardforkSpecKeys],\n\t\t]);\n\t\tthis._hardfork = this.DEFAULT_HARDFORK;\n\t\tif (opts.hardfork !== undefined) {\n\t\t\tthis.setHardfork(opts.hardfork);\n\t\t}\n\t\tif (opts.eips) {\n\t\t\tthis.setEIPs(opts.eips);\n\t\t}\n\t}\n\n\t/**\n\t * Sets the chain\n\t * @param chain String ('mainnet') or Number (1) chain representation.\n\t *              Or, a Dictionary of chain parameters for a private network.\n\t * @returns The dictionary with parameters set as chain\n\t */\n\tpublic setChain(chain: string | number | Chain | bigint | object): ChainConfig {\n\t\tif (typeof chain === 'number' || typeof chain === 'bigint' || typeof chain === 'string') {\n\t\t\tthis._chainParams = Common._getChainParams(chain, this._customChains);\n\t\t} else if (typeof chain === 'object') {\n\t\t\tif (this._customChains.length > 0) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t'Chain must be a string, number, or bigint when initialized with customChains passed in',\n\t\t\t\t);\n\t\t\t}\n\t\t\tconst required = ['networkId', 'genesis', 'hardforks', 'bootstrapNodes'];\n\t\t\tfor (const param of required) {\n\t\t\t\tif (!(param in chain)) {\n\t\t\t\t\tthrow new Error(`Missing required chain parameter: ${param}`);\n\t\t\t\t}\n\t\t\t}\n\t\t\tthis._chainParams = chain as ChainConfig;\n\t\t} else {\n\t\t\tthrow new Error('Wrong input format');\n\t\t}\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tif (hf.block === undefined) {\n\t\t\t\tthrow new Error(`Hardfork cannot have undefined block number`);\n\t\t\t}\n\t\t}\n\t\treturn this._chainParams;\n\t}\n\n\t/**\n\t * Sets the hardfork to get params for\n\t * @param hardfork String identifier (e.g. 'byzantium') or {@link Hardfork} enum\n\t */\n\tpublic setHardfork(hardfork: string | Hardfork): void {\n\t\tlet existing = false;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif (hfChanges[0] === hardfork) {\n\t\t\t\tif (this._hardfork !== hardfork) {\n\t\t\t\t\tthis._hardfork = hardfork;\n\t\t\t\t\tthis.emit('hardforkChanged', hardfork);\n\t\t\t\t}\n\t\t\t\texisting = true;\n\t\t\t}\n\t\t}\n\t\tif (!existing) {\n\t\t\tthrow new Error(`Hardfork with name ${hardfork} not supported`);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td : total difficulty of the parent block (for block hf) OR of the chain latest (for chain hf)\n\t * @param timestamp: timestamp in seconds at which block was/is to be minted\n\t * @returns The name of the HF\n\t */\n\tpublic getHardforkByBlockNumber(\n\t\t_blockNumber: Numbers,\n\t\t_td?: Numbers,\n\t\t_timestamp?: Numbers,\n\t): string {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst td = toType(_td, TypeOutput.BigInt);\n\t\tconst timestamp = toType(_timestamp, TypeOutput.Number);\n\n\t\t// Filter out hardforks with no block number, no ttd or no timestamp (i.e. unapplied hardforks)\n\t\tconst hfs = this.hardforks().filter(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block !== null ||\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.ttd !== null && hf.ttd !== undefined) ||\n\t\t\t\thf.timestamp !== undefined,\n\t\t);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tconst doubleTTDHF = hfs\n\t\t\t.slice(mergeIndex + 1)\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\tif (doubleTTDHF >= 0) {\n\t\t\tthrow Error(`More than one merge hardforks found with ttd specified`);\n\t\t}\n\n\t\t// Find the first hardfork that has a block number greater than `blockNumber`\n\t\t// (skips the merge hardfork since it cannot have a block number specified).\n\t\t// If timestamp is not provided, it also skips timestamps hardforks to continue\n\t\t// discovering/checking number hardforks.\n\t\tlet hfIndex = hfs.findIndex(\n\t\t\thf =>\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.block !== null && hf.block > blockNumber) ||\n\t\t\t\t(timestamp !== undefined && Number(hf.timestamp) > timestamp),\n\t\t);\n\n\t\tif (hfIndex === -1) {\n\t\t\t// all hardforks apply, set hfIndex to the last one as that's the candidate\n\t\t\thfIndex = hfs.length;\n\t\t} else if (hfIndex === 0) {\n\t\t\t// cannot have a case where a block number is before all applied hardforks\n\t\t\t// since the chain has to start with a hardfork\n\t\t\tthrow Error('Must have at least one hardfork at block 0');\n\t\t}\n\n\t\t// If timestamp is not provided, we need to rollback to the last hf with block or ttd\n\t\tif (timestamp === undefined) {\n\t\t\tconst stepBack = hfs\n\t\t\t\t.slice(0, hfIndex)\n\t\t\t\t.reverse()\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t.findIndex(hf => hf.block !== null || hf.ttd !== undefined);\n\t\t\thfIndex -= stepBack;\n\t\t}\n\t\t// Move hfIndex one back to arrive at candidate hardfork\n\t\thfIndex -= 1;\n\n\t\t// If the timestamp was not provided, we could have skipped timestamp hardforks to look for number\n\t\t// hardforks. so it will now be needed to rollback\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfs[hfIndex].block === null && hfs[hfIndex].timestamp === undefined) {\n\t\t\t// We're on the merge hardfork.  Let's check the TTD\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tif (td === undefined || td === null || BigInt(hfs[hfIndex].ttd!) > td) {\n\t\t\t\t// Merge ttd greater than current td so we're on hardfork before merge\n\t\t\t\thfIndex -= 1;\n\t\t\t}\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t} else if (mergeIndex >= 0 && td !== undefined && td !== null) {\n\t\t\tif (hfIndex >= mergeIndex && BigInt(hfs[mergeIndex].ttd!) > td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'Maximum HF determined by total difficulty is lower than the block number HF',\n\t\t\t\t);\n\t\t\t} else if (hfIndex < mergeIndex && BigInt(hfs[mergeIndex].ttd!) <= td) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t'HF determined by block number is lower than the minimum total difficulty HF',\n\t\t\t\t);\n\t\t\t}\n\t\t}\n\n\t\tconst hfStartIndex = hfIndex;\n\t\t// Move the hfIndex to the end of the hardforks that might be scheduled on the same block/timestamp\n\t\t// This won't anyway be the case with Merge hfs\n\t\tfor (; hfIndex < hfs.length - 1; hfIndex += 1) {\n\t\t\t// break out if hfIndex + 1 is not scheduled at hfIndex\n\t\t\tif (\n\t\t\t\thfs[hfIndex].block !== hfs[hfIndex + 1].block ||\n\t\t\t\thfs[hfIndex].timestamp !== hfs[hfIndex + 1].timestamp\n\t\t\t) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif (timestamp) {\n\t\t\tconst minTimeStamp = hfs\n\t\t\t\t.slice(0, hfStartIndex)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) => Math.max(Number(hf.timestamp ?? '0'), acc),\n\t\t\t\t\t0,\n\t\t\t\t);\n\t\t\tif (minTimeStamp > timestamp) {\n\t\t\t\tthrow Error(\n\t\t\t\t\t`Maximum HF determined by timestamp is lower than the block number/ttd HF`,\n\t\t\t\t);\n\t\t\t}\n\n\t\t\tconst maxTimeStamp = hfs\n\t\t\t\t.slice(hfIndex + 1)\n\t\t\t\t.reduce(\n\t\t\t\t\t(acc: number, hf: HardforkConfig) =>\n\t\t\t\t\t\tMath.min(Number(hf.timestamp ?? timestamp), acc),\n\t\t\t\t\ttimestamp,\n\t\t\t\t);\n\t\t\tif (maxTimeStamp < timestamp) {\n\t\t\t\tthrow Error(`Maximum HF determined by block number/ttd is lower than timestamp HF`);\n\t\t\t}\n\t\t}\n\t\tconst hardfork = hfs[hfIndex];\n\t\treturn hardfork.name;\n\t}\n\n\t/**\n\t * Sets a new hardfork based on the block number or an optional\n\t * total difficulty (Merge HF) provided.\n\t *\n\t * An optional TD takes precedence in case the corresponding HF block\n\t * is set to `null` or otherwise needs to match (if not an error\n\t * will be thrown).\n\t *\n\t * @param blockNumber\n\t * @param td\n\t * @param timestamp\n\t * @returns The name of the HF set\n\t */\n\tpublic setHardforkByBlockNumber(\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): string {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\tthis.setHardfork(hardfork);\n\t\treturn hardfork;\n\t}\n\n\t/**\n\t * Internal helper function, returns the params for the given hardfork for the chain set\n\t * @param hardfork Hardfork name\n\t * @returns Dictionary with hardfork params or null if hardfork not on chain\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic _getHardfork(hardfork: string | Hardfork): HardforkConfig | null {\n\t\tconst hfs = this.hardforks();\n\t\tfor (const hf of hfs) {\n\t\t\tif (hf.name === hardfork) return hf;\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Sets the active EIPs\n\t * @param eips\n\t */\n\tpublic setEIPs(eips: number[] = []) {\n\t\tfor (const eip of eips) {\n\t\t\tif (!(eip in EIPs)) {\n\t\t\t\tthrow new Error(`${eip} not supported`);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tconst minHF = this.gteHardfork(EIPs[eip].minimumHardfork);\n\t\t\tif (!minHF) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t`${eip} cannot be activated on hardfork ${this.hardfork()}, minimumHardfork: ${minHF}`,\n\t\t\t\t);\n\t\t\t}\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\tif (EIPs[eip].requiredEIPs !== undefined) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tfor (const elem of EIPs[eip].requiredEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tif (!(eips.includes(elem) || this.isActivatedEIP(elem))) {\n\t\t\t\t\t\tthrow new Error(\n\t\t\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/restrict-template-expressions\n\t\t\t\t\t\t\t`${eip} requires EIP ${elem}, but is not included in the EIP list`,\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tthis._eips = eips;\n\t}\n\n\t/**\n\t * Returns a parameter for the current chain setup\n\t *\n\t * If the parameter is present in an EIP, the EIP always takes precedence.\n\t * Otherwise the parameter if taken from the latest applied HF with\n\t * a change on the respective parameter.\n\t *\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic param(topic: string, name: string): bigint {\n\t\t// TODO: consider the case that different active EIPs\n\t\t// can change the same parameter\n\t\tlet value;\n\t\tfor (const eip of this._eips) {\n\t\t\tvalue = this.paramByEIP(topic, name, eip);\n\t\t\tif (value !== undefined) return value;\n\t\t}\n\t\treturn this.paramByHardfork(topic, name, this._hardfork);\n\t}\n\n\t/**\n\t * Returns the parameter corresponding to a hardfork\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param hardfork Hardfork name\n\t * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByHardfork(topic: string, name: string, hardfork: string | Hardfork): bigint {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tlet value = null;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// EIP-referencing HF file (e.g. berlin.json)\n\t\t\tif ('eips' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tconst hfEIPs = hfChanges[1].eips;\n\t\t\t\tfor (const eip of hfEIPs) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\t\t\t\tconst valueEIP = this.paramByEIP(topic, name, eip);\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = typeof valueEIP === 'bigint' ? valueEIP : value;\n\t\t\t\t}\n\t\t\t\t// Parameter-inlining HF file (e.g. istanbul.json)\n\t\t\t} else {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic] === undefined) {\n\t\t\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t\t\t}\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif (hfChanges[1][topic][name] !== undefined) {\n\t\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\t\tvalue = hfChanges[1][topic][name].v;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value ?? 0);\n\t}\n\n\t/**\n\t * Returns a parameter corresponding to an EIP\n\t * @param topic Parameter topic ('gasConfig', 'gasPrices', 'vm', 'pow')\n\t * @param name Parameter name (e.g. 'minGasLimit' for 'gasConfig' topic)\n\t * @param eip Number of the EIP\n\t * @returns The value requested or `undefined` if not found\n\t */\n\t// eslint-disable-next-line class-methods-use-this\n\tpublic paramByEIP(topic: string, name: string, eip: number): bigint | undefined {\n\t\tif (!(eip in EIPs)) {\n\t\t\tthrow new Error(`${eip} not supported`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\tconst eipParams = EIPs[eip];\n\t\tif (!(topic in eipParams)) {\n\t\t\tthrow new Error(`Topic ${topic} not defined`);\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\tif (eipParams[topic][name] === undefined) {\n\t\t\treturn undefined;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\tconst value = eipParams[topic][name].v;\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn BigInt(value);\n\t}\n\n\t/**\n\t * Returns a parameter for the hardfork active on block number or\n\t * optional provided total difficulty (Merge HF)\n\t * @param topic Parameter topic\n\t * @param name Parameter name\n\t * @param blockNumber Block number\n\t * @param td Total difficulty\n\t *    * @returns The value requested or `BigInt(0)` if not found\n\t */\n\tpublic paramByBlock(\n\t\ttopic: string,\n\t\tname: string,\n\t\tblockNumber: Numbers,\n\t\ttd?: Numbers,\n\t\ttimestamp?: Numbers,\n\t): bigint {\n\t\tconst hardfork = this.getHardforkByBlockNumber(blockNumber, td, timestamp);\n\t\treturn this.paramByHardfork(topic, name, hardfork);\n\t}\n\n\t/**\n\t * Checks if an EIP is activated by either being included in the EIPs\n\t * manually passed in with the {@link CommonOpts.eips} or in a\n\t * hardfork currently being active\n\t *\n\t * Note: this method only works for EIPs being supported\n\t * by the {@link CommonOpts.eips} constructor option\n\t * @param eip\n\t */\n\tpublic isActivatedEIP(eip: number): boolean {\n\t\tif (this.eips().includes(eip)) {\n\t\t\treturn true;\n\t\t}\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-argument\n\t\t\tif (this.gteHardfork(hf.name) && 'eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access\n\t\t\t\tif ((hf.eips as number[]).includes(eip)) {\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Checks if set or provided hardfork is active on block number\n\t * @param hardfork Hardfork name or null (for HF set)\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic hardforkIsActiveOnBlock(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork: string | Hardfork | null,\n\t\t_blockNumber: Numbers,\n\t): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfBlock = this.hardforkBlock(hardfork);\n\t\tif (typeof hfBlock === 'bigint' && hfBlock !== BigInt(0) && blockNumber >= hfBlock) {\n\t\t\treturn true;\n\t\t}\n\t\treturn false;\n\t}\n\n\t/**\n\t * Alias to hardforkIsActiveOnBlock when hardfork is set\n\t * @param blockNumber\n\t * @returns True if HF is active on block number\n\t */\n\tpublic activeOnBlock(blockNumber: Numbers): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkIsActiveOnBlock(null, blockNumber);\n\t}\n\n\t/**\n\t * Sequence based check if given or set HF1 is greater than or equal HF2\n\t * @param hardfork1 Hardfork name or null (if set)\n\t * @param hardfork2 Hardfork name\n\t * @param opts Hardfork options\n\t * @returns True if HF1 gte HF2\n\t */\n\tpublic hardforkGteHardfork(\n\t\t// eslint-disable-next-line @typescript-eslint/ban-types\n\t\t_hardfork1: string | Hardfork | null,\n\t\thardfork2: string | Hardfork,\n\t): boolean {\n\t\tconst hardfork1 = _hardfork1 ?? this._hardfork;\n\t\tconst hardforks = this.hardforks();\n\n\t\tlet posHf1 = -1;\n\t\tlet posHf2 = -1;\n\t\tlet index = 0;\n\t\tfor (const hf of hardforks) {\n\t\t\tif (hf.name === hardfork1) posHf1 = index;\n\t\t\tif (hf.name === hardfork2) posHf2 = index;\n\t\t\tindex += 1;\n\t\t}\n\t\treturn posHf1 >= posHf2 && posHf2 !== -1;\n\t}\n\n\t/**\n\t * Alias to hardforkGteHardfork when hardfork is set\n\t * @param hardfork Hardfork name\n\t * @returns True if hardfork set is greater than hardfork provided\n\t */\n\tpublic gteHardfork(hardfork: string | Hardfork): boolean {\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn this.hardforkGteHardfork(null, hardfork);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this._getHardfork(hardfork)?.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (block === undefined || block === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(block);\n\t}\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst timestamp = this._getHardfork(hardfork)?.timestamp;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (timestamp === undefined || timestamp === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(timestamp);\n\t}\n\n\t/**\n\t * Returns the hardfork change block for eip\n\t * @param eip EIP number\n\t * @returns Block number or null if unscheduled\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic eipBlock(eip: number): bigint | null {\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-assignment\n\t\t\tconst hf = hfChanges[1];\n\t\t\tif ('eips' in hf) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/strict-boolean-expressions, @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\t\t\tif (hf.eips.includes(eip)) {\n\t\t\t\t\treturn this.hardforkBlock(\n\t\t\t\t\t\ttypeof hfChanges[0] === 'number' ? String(hfChanges[0]) : hfChanges[0],\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn null;\n\t}\n\n\t/**\n\t * Returns the hardfork change total difficulty (Merge HF) for hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Total difficulty or null if no set\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkTTD(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst ttd = this._getHardfork(hardfork)?.ttd;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (ttd === undefined || ttd === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\treturn BigInt(ttd);\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork (given or set) change block\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst block = this.hardforkBlock(hardfork);\n\t\treturn typeof block === 'bigint' && block !== BigInt(0) ? block === blockNumber : false;\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block timestamp, number or null if not available\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlockOrTimestamp(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst hfs = this.hardforks();\n\t\tlet hfIndex = hfs.findIndex(hf => hf.name === hardfork);\n\t\t// If the current hardfork is merge, go one behind as merge hf is not part of these\n\t\t// calcs even if the merge hf block is set\n\t\tif (hardfork === Hardfork.Merge) {\n\t\t\thfIndex -= 1;\n\t\t}\n\t\t// Hardfork not found\n\t\tif (hfIndex < 0) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tlet currHfTimeOrBlock = hfs[hfIndex].timestamp ?? hfs[hfIndex].block;\n\t\tcurrHfTimeOrBlock =\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tcurrHfTimeOrBlock !== null && currHfTimeOrBlock !== undefined\n\t\t\t\t? Number(currHfTimeOrBlock)\n\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t  null;\n\n\t\tconst nextHf = hfs.slice(hfIndex + 1).find(hf => {\n\t\t\tlet hfTimeOrBlock = hf.timestamp ?? hf.block;\n\t\t\thfTimeOrBlock =\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null && hfTimeOrBlock !== undefined\n\t\t\t\t\t? Number(hfTimeOrBlock)\n\t\t\t\t\t: // eslint-disable-next-line no-null/no-null\n\t\t\t\t\t  null;\n\t\t\treturn (\n\t\t\t\thf.name !== Hardfork.Merge &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thfTimeOrBlock !== null &&\n\t\t\t\thfTimeOrBlock !== undefined &&\n\t\t\t\thfTimeOrBlock !== currHfTimeOrBlock\n\t\t\t);\n\t\t});\n\t\t// If no next hf found with valid block or timestamp return null\n\t\tif (nextHf === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\tconst nextHfBlock = nextHf.timestamp ?? nextHf.block;\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (nextHfBlock === null || nextHfBlock === undefined) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\n\t\treturn BigInt(nextHfBlock);\n\t}\n\n\t/**\n\t * Returns the change block for the next hardfork after the hardfork provided or set\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns Block number or null if not available\n\t * @deprecated\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic nextHardforkBlock(_hardfork?: string | Hardfork): bigint | null {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tlet hfBlock = this.hardforkBlock(hardfork);\n\t\t// If this is a merge hardfork with block not set, then we fallback to previous hardfork\n\t\t// to find the nextHardforkBlock\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null && hardfork === Hardfork.Merge) {\n\t\t\tconst hfs = this.hardforks();\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tconst mergeIndex = hfs.findIndex(hf => hf.ttd !== null && hf.ttd !== undefined);\n\t\t\tif (mergeIndex < 0) {\n\t\t\t\tthrow Error(`Merge hardfork should have been found`);\n\t\t\t}\n\t\t\thfBlock = this.hardforkBlock(hfs[mergeIndex - 1].name);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (hfBlock === null) {\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn null;\n\t\t}\n\t\t// Next fork block number or null if none available\n\t\t// Logic: if accumulator is still null and on the first occurrence of\n\t\t// a block greater than the current hfBlock set the accumulator,\n\t\t// pass on the accumulator as the final result from this time on\n\t\t// eslint-disable-next-line no-null/no-null, @typescript-eslint/ban-types\n\t\tconst nextHfBlock = this.hardforks().reduce((acc: bigint | null, hf: HardforkConfig) => {\n\t\t\t// We need to ignore the merge block in our next hardfork calc\n\t\t\tconst block = BigInt(\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\thf.block === null || (hf.ttd !== undefined && hf.ttd !== null) ? 0 : hf.block,\n\t\t\t);\n\t\t\t// Typescript can't seem to follow that the hfBlock is not null at this point\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\treturn block > hfBlock! && acc === null ? block : acc;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t}, null);\n\t\treturn nextHfBlock;\n\t}\n\n\t/**\n\t * True if block number provided is the hardfork change block following the hardfork given or set\n\t * @param blockNumber Number of the block to check\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @returns True if blockNumber is HF block\n\t * @deprecated\n\t */\n\tpublic isNextHardforkBlock(_blockNumber: Numbers, _hardfork?: string | Hardfork): boolean {\n\t\tconst blockNumber = toType(_blockNumber, TypeOutput.BigInt);\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\t// eslint-disable-next-line deprecation/deprecation\n\t\tconst nextHardforkBlock = this.nextHardforkBlock(hardfork);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn nextHardforkBlock === null ? false : nextHardforkBlock === blockNumber;\n\t}\n\n\t/**\n\t * Internal helper function to calculate a fork hash\n\t * @param hardfork Hardfork name\n\t * @param genesisHash Genesis block hash of the chain\n\t * @returns Fork hash as hex string\n\t */\n\tpublic _calcForkHash(hardfork: string | Hardfork, genesisHash: Uint8Array) {\n\t\tlet hfUint8Array = new Uint8Array();\n\t\tlet prevBlockOrTime = 0;\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst { block, timestamp, name } = hf;\n\t\t\t// Timestamp to be used for timestamp based hfs even if we may bundle\n\t\t\t// block number with them retrospectively\n\t\t\tlet blockOrTime = timestamp ?? block;\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tblockOrTime = blockOrTime !== null ? Number(blockOrTime) : null;\n\n\t\t\t// Skip for chainstart (0), not applied HFs (null) and\n\t\t\t// when already applied on same blockOrTime HFs\n\t\t\t// and on the merge since forkhash doesn't change on merge hf\n\t\t\tif (\n\t\t\t\ttypeof blockOrTime === 'number' &&\n\t\t\t\tblockOrTime !== 0 &&\n\t\t\t\tblockOrTime !== prevBlockOrTime &&\n\t\t\t\tname !== Hardfork.Merge\n\t\t\t) {\n\t\t\t\tconst hfBlockUint8Array = hexToBytes(blockOrTime.toString(16).padStart(16, '0'));\n\t\t\t\thfUint8Array = uint8ArrayConcat(hfUint8Array, hfBlockUint8Array);\n\t\t\t\tprevBlockOrTime = blockOrTime;\n\t\t\t}\n\n\t\t\tif (hf.name === hardfork) break;\n\t\t}\n\t\tconst inputUint8Array = uint8ArrayConcat(genesisHash, hfUint8Array);\n\n\t\t// CRC32 delivers result as signed (negative) 32-bit integer,\n\t\t// convert to hex string\n\t\t// eslint-disable-next-line no-bitwise\n\t\tconst forkhash = bytesToHex(intToUint8Array(crc32Uint8Array(inputUint8Array) >>> 0));\n\t\treturn forkhash;\n\t}\n\n\t/**\n\t * Returns an eth/64 compliant fork hash (EIP-2124)\n\t * @param hardfork Hardfork name, optional if HF set\n\t * @param genesisHash Genesis block hash of the chain, optional if already defined and not needed to be calculated\n\t */\n\tpublic forkHash(_hardfork?: string | Hardfork, genesisHash?: Uint8Array): string {\n\t\tconst hardfork = _hardfork ?? this._hardfork;\n\t\tconst data = this._getHardfork(hardfork);\n\t\tif (\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\tdata === null ||\n\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t(data?.block === null && data?.timestamp === undefined && data?.ttd === undefined)\n\t\t) {\n\t\t\tconst msg = 'No fork hash calculation possible for future hardfork';\n\t\t\tthrow new Error(msg);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif (data?.forkHash !== null && data?.forkHash !== undefined) {\n\t\t\treturn data.forkHash;\n\t\t}\n\t\tif (!genesisHash) throw new Error('genesisHash required for forkHash calculation');\n\t\treturn this._calcForkHash(hardfork, genesisHash);\n\t}\n\n\t/**\n\t *\n\t * @param forkHash Fork hash as a hex string\n\t * @returns Array with hardfork data (name, block, forkHash)\n\t */\n\t// eslint-disable-next-line @typescript-eslint/ban-types\n\tpublic hardforkForForkHash(forkHash: string): HardforkConfig | null {\n\t\tconst resArray = this.hardforks().filter((hf: HardforkConfig) => hf.forkHash === forkHash);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\treturn resArray.length >= 1 ? resArray[resArray.length - 1] : null;\n\t}\n\n\t/**\n\t * Sets any missing forkHashes on the passed-in {@link Common} instance\n\t * @param common The {@link Common} to set the forkHashes for\n\t * @param genesisHash The genesis block hash\n\t */\n\tpublic setForkHashes(genesisHash: Uint8Array) {\n\t\tfor (const hf of this.hardforks()) {\n\t\t\tconst blockOrTime = hf.timestamp ?? hf.block;\n\t\t\tif (\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t(hf.forkHash === null || hf.forkHash === undefined) &&\n\t\t\t\t// eslint-disable-next-line no-null/no-null\n\t\t\t\t((blockOrTime !== null && blockOrTime !== undefined) ||\n\t\t\t\t\ttypeof hf.ttd !== 'undefined')\n\t\t\t) {\n\t\t\t\thf.forkHash = this.forkHash(hf.name, genesisHash);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Returns the Genesis parameters of the current chain\n\t * @returns Genesis dictionary\n\t */\n\tpublic genesis(): GenesisBlockConfig {\n\t\treturn this._chainParams.genesis;\n\t}\n\n\t/**\n\t * Returns the hardforks for current chain\n\t * @returns {Array} Array with arrays of hardforks\n\t */\n\tpublic hardforks(): HardforkConfig[] {\n\t\treturn this._chainParams.hardforks;\n\t}\n\n\t/**\n\t * Returns bootstrap nodes for the current chain\n\t * @returns {Dictionary} Dict with bootstrap nodes\n\t */\n\tpublic bootstrapNodes(): BootstrapNodeConfig[] | undefined {\n\t\treturn this._chainParams.bootstrapNodes;\n\t}\n\n\t/**\n\t * Returns DNS networks for the current chain\n\t * @returns {String[]} Array of DNS ENR urls\n\t */\n\tpublic dnsNetworks(): string[] {\n\t\treturn this._chainParams.dnsNetworks!;\n\t}\n\n\t/**\n\t * Returns the hardfork set\n\t * @returns Hardfork name\n\t */\n\tpublic hardfork(): string | Hardfork {\n\t\treturn this._hardfork;\n\t}\n\n\t/**\n\t * Returns the Id of current chain\n\t * @returns chain Id\n\t */\n\tpublic chainId(): bigint {\n\t\treturn BigInt(this._chainParams.chainId);\n\t}\n\n\t/**\n\t * Returns the name of current chain\n\t * @returns chain name (lower case)\n\t */\n\tpublic chainName(): string {\n\t\treturn this._chainParams.name;\n\t}\n\n\t/**\n\t * Returns the Id of current network\n\t * @returns network Id\n\t */\n\tpublic networkId(): bigint {\n\t\treturn BigInt(this._chainParams.networkId);\n\t}\n\n\t/**\n\t * Returns the active EIPs\n\t * @returns List of EIPs\n\t */\n\tpublic eips(): number[] {\n\t\treturn this._eips;\n\t}\n\n\t/**\n\t * Returns the consensus type of the network\n\t * Possible values: \"pow\"|\"poa\"|\"pos\"\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusType(): string | ConsensusType {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.type;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? this._chainParams.consensus.type;\n\t}\n\n\t/**\n\t * Returns the concrete consensus implementation\n\t * algorithm or protocol for the network\n\t * e.g. \"ethash\" for \"pow\" consensus type,\n\t * \"clique\" for \"poa\" consensus type or\n\t * \"casper\" for \"pos\" consensus type.\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusAlgorithm(): string | ConsensusAlgorithm {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus.algorithm;\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn value ?? (this._chainParams.consensus.algorithm as ConsensusAlgorithm);\n\t}\n\n\t/**\n\t * Returns a dictionary with consensus configuration\n\t * parameters based on the consensus algorithm\n\t *\n\t * Expected returns (parameters must be present in\n\t * the respective chain json files):\n\t *\n\t * ethash: empty object\n\t * clique: period, epoch\n\t * casper: empty object\n\t *\n\t * Note: This value can update along a Hardfork.\n\t */\n\tpublic consensusConfig(): { [key: string]: CliqueConfig | EthashConfig | CasperConfig } {\n\t\tconst hardfork = this.hardfork();\n\n\t\tlet value;\n\t\tfor (const hfChanges of this.HARDFORK_CHANGES) {\n\t\t\tif ('consensus' in hfChanges[1]) {\n\t\t\t\t// The config parameter is named after the respective consensus algorithm\n\t\t\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-assignment\n\t\t\t\tvalue = hfChanges[1].consensus[hfChanges[1].consensus.algorithm];\n\t\t\t}\n\t\t\tif (hfChanges[0] === hardfork) break;\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn (\n\t\t\tvalue ??\n\t\t\tthis._chainParams.consensus[this.consensusAlgorithm() as ConsensusAlgorithm] ??\n\t\t\t{}\n\t\t);\n\t}\n\n\t/**\n\t * Returns a deep copy of this {@link Common} instance.\n\t */\n\tpublic copy(): Common {\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument, @typescript-eslint/no-unsafe-assignment\n\t\tconst copy = Object.assign(Object.create(Object.getPrototypeOf(this)), this);\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access, @typescript-eslint/no-unsafe-call\n\t\tcopy.removeAllListeners();\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-return\n\t\treturn copy;\n\t}\n\n\tpublic static _getInitializedChains(customChains?: ChainConfig[]): ChainsConfig {\n\t\tconst names: ChainName = {};\n\t\tfor (const [name, id] of Object.entries(Chain)) {\n\t\t\tnames[id] = name.toLowerCase();\n\t\t}\n\t\tconst chains = { mainnet, goerli, sepolia } as ChainsConfig;\n\t\tif (customChains) {\n\t\t\tfor (const chain of customChains) {\n\t\t\t\tconst { name } = chain;\n\t\t\t\tnames[chain.chainId.toString()] = name;\n\t\t\t\tchains[name] = chain;\n\t\t\t}\n\t\t}\n\t\tchains.names = names;\n\t\treturn chains;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}