{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport { Chain, Common, Hardfork, toUint8Array, uint8ArrayToBigInt, unpadUint8Array } from '../common/index.js';\nimport { Capability } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport var BaseTransaction = /*#__PURE__*/function () {\n  function BaseTransaction(txData, opts) {\n    _classCallCheck(this, BaseTransaction);\n    var _a, _b;\n    this.cache = {\n      hash: undefined,\n      dataFee: undefined\n    };\n    /**\n     * List of tx type defining EIPs,\n     * e.g. 1559 (fee market) and 2930 (access lists)\n     * for FeeMarketEIP1559Transaction objects\n     */\n    this.activeCapabilities = [];\n    /**\n     * The default chain the tx falls back to if no Common\n     * is provided and if the chain can't be derived from\n     * a passed in chainId (only EIP-2718 typed txs) or\n     * EIP-155 signature (legacy txs).\n     *\n     * @hidden\n     */\n    this.DEFAULT_CHAIN = Chain.Mainnet;\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    this.DEFAULT_HARDFORK = Hardfork.Merge;\n    var nonce = txData.nonce,\n      gasLimit = txData.gasLimit,\n      to = txData.to,\n      value = txData.value,\n      data = txData.data,\n      v = txData.v,\n      r = txData.r,\n      s = txData.s,\n      type = txData.type;\n    this._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n    this.txOptions = opts;\n    var toB = toUint8Array(to === '' ? '0x' : to);\n    var vB = toUint8Array(v === '' ? '0x' : v);\n    var rB = toUint8Array(r === '' ? '0x' : r);\n    var sB = toUint8Array(s === '' ? '0x' : s);\n    this.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n    this.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n    this.to = toB.length > 0 ? new Address(toB) : undefined;\n    this.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n    this.data = toUint8Array(data === '' ? '0x' : data);\n    this.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n    this.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n    this.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n    this._validateCannotExceedMaxInteger({\n      value: this.value,\n      r: this.r,\n      s: this.s\n    });\n    // geth limits gasLimit to 2^64-1\n    this._validateCannotExceedMaxInteger({\n      gasLimit: this.gasLimit\n    }, 64);\n    // EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n    this._validateCannotExceedMaxInteger({\n      nonce: this.nonce\n    }, 64, true);\n    // eslint-disable-next-line no-null/no-null\n    var createContract = this.to === undefined || this.to === null;\n    var allowUnlimitedInitCodeSize = (_a = opts.allowUnlimitedInitCodeSize) !== null && _a !== void 0 ? _a : false;\n    var common = (_b = opts.common) !== null && _b !== void 0 ? _b : this._getCommon();\n    if (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n      checkMaxInitCodeSize(common, this.data.length);\n    }\n  }\n  /**\n   * Returns the transaction type.\n   *\n   * Note: legacy txs will return tx type `0`.\n   */\n  _createClass(BaseTransaction, [{\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    }\n    /**\n     * Checks if a tx type defining capability is active\n     * on a tx, for example the EIP-1559 fee market mechanism\n     * or the EIP-2930 access list feature.\n     *\n     * Note that this is different from the tx type itself,\n     * so EIP-2930 access lists can very well be active\n     * on an EIP-1559 tx for example.\n     *\n     * This method can be useful for feature checks if the\n     * tx type is unknown (e.g. when instantiated with\n     * the tx factory).\n     *\n     * See `Capabilites` in the `types` module for a reference\n     * on all supported capabilities.\n     */\n  }, {\n    key: \"supports\",\n    value: function supports(capability) {\n      return this.activeCapabilities.includes(capability);\n    }\n  }, {\n    key: \"validate\",\n    value: function validate() {\n      var stringError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      var errors = [];\n      if (this.getBaseFee() > this.gasLimit) {\n        errors.push(\"gasLimit is too low. given \".concat(this.gasLimit, \", need at least \").concat(this.getBaseFee()));\n      }\n      if (this.isSigned() && !this.verifySignature()) {\n        errors.push('Invalid Signature');\n      }\n      return stringError ? errors : errors.length === 0;\n    }\n  }, {\n    key: \"_validateYParity\",\n    value: function _validateYParity() {\n      var v = this.v;\n      if (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n        var msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n        throw new Error(msg);\n      }\n    }\n    /**\n     * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n     * Reasoning: https://ethereum.stackexchange.com/a/55728\n     */\n  }, {\n    key: \"_validateHighS\",\n    value: function _validateHighS() {\n      var s = this.s;\n      if (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n        var msg = this._errorMsg('Invalid Signature: s-values greater than secp256k1n/2 are considered invalid');\n        throw new Error(msg);\n      }\n    }\n    /**\n     * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n     */\n  }, {\n    key: \"getBaseFee\",\n    value: function getBaseFee() {\n      var txFee = this.common.param('gasPrices', 'tx');\n      var fee = this.getDataFee();\n      if (txFee) fee += txFee;\n      if (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n        var txCreationFee = this.common.param('gasPrices', 'txCreation');\n        if (txCreationFee) fee += txCreationFee;\n      }\n      return fee;\n    }\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n  }, {\n    key: \"getDataFee\",\n    value: function getDataFee() {\n      var txDataZero = this.common.param('gasPrices', 'txDataZero');\n      var txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n      var cost = BigInt(0);\n      // eslint-disable-next-line @typescript-eslint/prefer-for-of\n      for (var i = 0; i < this.data.length; i += 1) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n        this.data[i] === 0 ? cost += txDataZero : cost += txDataNonZero;\n      }\n      // eslint-disable-next-line no-null/no-null\n      if ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n        var dataLength = BigInt(Math.ceil(this.data.length / 32));\n        var initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n        cost += initCodeCost;\n      }\n      return cost;\n    }\n    /**\n     * If the tx's `to` is to the creation address\n     */\n  }, {\n    key: \"toCreationAddress\",\n    value: function toCreationAddress() {\n      return this.to === undefined || this.to.buf.length === 0;\n    }\n  }, {\n    key: \"isSigned\",\n    value: function isSigned() {\n      var v = this.v,\n        r = this.r,\n        s = this.s;\n      if (v === undefined || r === undefined || s === undefined) {\n        return false;\n      }\n      return true;\n    }\n    /**\n     * Determines if the signature is valid\n     */\n  }, {\n    key: \"verifySignature\",\n    value: function verifySignature() {\n      try {\n        // Main signature verification is done in `getSenderPublicKey()`\n        var publicKey = this.getSenderPublicKey();\n        return unpadUint8Array(publicKey).length !== 0;\n      } catch (e) {\n        return false;\n      }\n    }\n    /**\n     * Returns the sender's address\n     */\n  }, {\n    key: \"getSenderAddress\",\n    value: function getSenderAddress() {\n      return new Address(Address.publicToAddress(this.getSenderPublicKey()));\n    }\n    /**\n     * Signs a transaction.\n     *\n     * Note that the signed tx is returned as a new object,\n     * use as follows:\n     * ```javascript\n     * const signedTx = tx.sign(privateKey)\n     * ```\n     */\n  }, {\n    key: \"sign\",\n    value: function sign(privateKey) {\n      if (privateKey.length !== 32) {\n        var msg = this._errorMsg('Private key must be 32 bytes in length.');\n        throw new Error(msg);\n      }\n      // Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n      // and want to recreate a signature (where EIP155 should be applied)\n      // Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n      // 2021-06-23\n      var hackApplied = false;\n      if (this.type === 0 && this.common.gteHardfork('spuriousDragon') && !this.supports(Capability.EIP155ReplayProtection)) {\n        this.activeCapabilities.push(Capability.EIP155ReplayProtection);\n        hackApplied = true;\n      }\n      var msgHash = this.getMessageToSign(true);\n      var _this$_ecsign = this._ecsign(msgHash, privateKey),\n        v = _this$_ecsign.v,\n        r = _this$_ecsign.r,\n        s = _this$_ecsign.s;\n      var tx = this._processSignature(v, r, s);\n      // Hack part 2\n      if (hackApplied) {\n        var index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n        if (index > -1) {\n          this.activeCapabilities.splice(index, 1);\n        }\n      }\n      return tx;\n    }\n    /**\n     * Does chain ID checks on common and returns a common\n     * to be used on instantiation\n     * @hidden\n     *\n     * @param common - {@link Common} instance from tx options\n     * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n     */\n  }, {\n    key: \"_getCommon\",\n    value: function _getCommon(common, chainId) {\n      var _a;\n      // Chain ID provided\n      if (chainId !== undefined) {\n        var chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n        if (common) {\n          if (common.chainId() !== chainIdBigInt) {\n            var msg = this._errorMsg('The chain ID does not match the chain ID of Common');\n            throw new Error(msg);\n          }\n          // Common provided, chain ID does match\n          // -> Return provided Common\n          return common.copy();\n        }\n        if (Common.isSupportedChainId(chainIdBigInt)) {\n          // No Common, chain ID supported by Common\n          // -> Instantiate Common with chain ID\n          return new Common({\n            chain: chainIdBigInt,\n            hardfork: this.DEFAULT_HARDFORK\n          });\n        }\n        // No Common, chain ID not supported by Common\n        // -> Instantiate custom Common derived from DEFAULT_CHAIN\n        return Common.custom({\n          name: 'custom-chain',\n          networkId: chainIdBigInt,\n          chainId: chainIdBigInt\n        }, {\n          baseChain: this.DEFAULT_CHAIN,\n          hardfork: this.DEFAULT_HARDFORK\n        });\n      }\n      // No chain ID provided\n      // -> return Common provided or create new default Common\n      return (_a = common === null || common === void 0 ? void 0 : common.copy()) !== null && _a !== void 0 ? _a : new Common({\n        chain: this.DEFAULT_CHAIN,\n        hardfork: this.DEFAULT_HARDFORK\n      });\n    }\n    /**\n     * Validates that an object with BigInt values cannot exceed the specified bit limit.\n     * @param values Object containing string keys and BigInt values\n     * @param bits Number of bits to check (64 or 256)\n     * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n     */\n  }, {\n    key: \"_validateCannotExceedMaxInteger\",\n    value: function _validateCannotExceedMaxInteger(values) {\n      var bits = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 256;\n      var cannotEqual = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      for (var _i = 0, _Object$entries = Object.entries(values); _i < _Object$entries.length; _i++) {\n        var _Object$entries$_i = _slicedToArray(_Object$entries[_i], 2),\n          key = _Object$entries$_i[0],\n          value = _Object$entries$_i[1];\n        switch (bits) {\n          case 64:\n            if (cannotEqual) {\n              if (value !== undefined && value >= MAX_UINT64) {\n                var msg = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_UINT64 (2^64-1), given \").concat(value));\n                throw new Error(msg);\n              }\n            } else if (value !== undefined && value > MAX_UINT64) {\n              var _msg = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_UINT64 (2^64-1), given \").concat(value));\n              throw new Error(_msg);\n            }\n            break;\n          case 256:\n            if (cannotEqual) {\n              if (value !== undefined && value >= MAX_INTEGER) {\n                var _msg2 = this._errorMsg(\"\".concat(key, \" cannot equal or exceed MAX_INTEGER (2^256-1), given \").concat(value));\n                throw new Error(_msg2);\n              }\n            } else if (value !== undefined && value > MAX_INTEGER) {\n              var _msg3 = this._errorMsg(\"\".concat(key, \" cannot exceed MAX_INTEGER (2^256-1), given \").concat(value));\n              throw new Error(_msg3);\n            }\n            break;\n          default:\n            {\n              var _msg4 = this._errorMsg('unimplemented bits value');\n              throw new Error(_msg4);\n            }\n        }\n      }\n    }\n  }, {\n    key: \"_getSharedErrorPostfix\",\n    value:\n    /**\n     * Returns the shared error postfix part for _error() method\n     * tx type implementations.\n     */\n    function _getSharedErrorPostfix() {\n      var hash = '';\n      try {\n        hash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n      } catch (e) {\n        hash = 'error';\n      }\n      var isSigned = '';\n      try {\n        isSigned = this.isSigned().toString();\n      } catch (e) {\n        hash = 'error';\n      }\n      var hf = '';\n      try {\n        hf = this.common.hardfork();\n      } catch (e) {\n        hf = 'error';\n      }\n      var postfix = \"tx type=\".concat(this.type, \" hash=\").concat(hash, \" nonce=\").concat(this.nonce, \" value=\").concat(this.value, \" \");\n      postfix += \"signed=\".concat(isSigned, \" hf=\").concat(hf);\n      return postfix;\n    }\n    // eslint-disable-next-line class-methods-use-this\n  }, {\n    key: \"_ecsign\",\n    value: function _ecsign(msgHash, privateKey, chainId) {\n      var signature = secp256k1.sign(msgHash, privateKey);\n      var signatureBytes = signature.toCompactRawBytes();\n      var r = signatureBytes.subarray(0, 32);\n      var s = signatureBytes.subarray(32, 64);\n      var v = chainId === undefined ? BigInt(signature.recovery + 27) : BigInt(signature.recovery + 35) + BigInt(chainId) * BigInt(2);\n      return {\n        r: r,\n        s: s,\n        v: v\n      };\n    }\n  }], [{\n    key: \"_validateNotArray\",\n    value: function _validateNotArray(values) {\n      var txDataKeys = ['nonce', 'gasPrice', 'gasLimit', 'to', 'value', 'data', 'v', 'r', 's', 'type', 'baseFee', 'maxFeePerGas', 'chainId'];\n      for (var _i2 = 0, _Object$entries2 = Object.entries(values); _i2 < _Object$entries2.length; _i2++) {\n        var _Object$entries2$_i = _slicedToArray(_Object$entries2[_i2], 2),\n          key = _Object$entries2$_i[0],\n          value = _Object$entries2$_i[1];\n        if (txDataKeys.includes(key)) {\n          if (Array.isArray(value)) {\n            throw new Error(\"\".concat(key, \" cannot be an array\"));\n          }\n        }\n      }\n    }\n  }]);\n  return BaseTransaction;\n}();","map":{"version":3,"names":["bytesToHex","MAX_INTEGER","MAX_UINT64","SECP256K1_ORDER_DIV_2","secp256k1","Chain","Common","Hardfork","toUint8Array","uint8ArrayToBigInt","unpadUint8Array","Capability","Address","checkMaxInitCodeSize","BaseTransaction","txData","opts","_classCallCheck","cache","hash","undefined","dataFee","activeCapabilities","DEFAULT_CHAIN","Mainnet","DEFAULT_HARDFORK","Merge","nonce","gasLimit","to","value","data","v","r","s","type","_type","Number","txOptions","toB","vB","rB","sB","length","_validateCannotExceedMaxInteger","createContract","allowUnlimitedInitCodeSize","_a","common","_b","_getCommon","isActivatedEIP","_createClass","key","get","supports","capability","includes","validate","stringError","arguments","errors","getBaseFee","push","concat","isSigned","verifySignature","_validateYParity","BigInt","msg","_errorMsg","Error","_validateHighS","gteHardfork","txFee","param","fee","getDataFee","toCreationAddress","txCreationFee","txDataZero","txDataNonZero","cost","i","dataLength","Math","ceil","initCodeCost","buf","publicKey","getSenderPublicKey","e","getSenderAddress","publicToAddress","sign","privateKey","hackApplied","EIP155ReplayProtection","msgHash","getMessageToSign","_this$_ecsign","_ecsign","tx","_processSignature","index","indexOf","splice","chainId","chainIdBigInt","copy","isSupportedChainId","chain","hardfork","custom","name","networkId","baseChain","values","bits","cannotEqual","_i","_Object$entries","Object","entries","_Object$entries$_i","_slicedToArray","_getSharedErrorPostfix","toString","hf","postfix","signature","signatureBytes","toCompactRawBytes","subarray","recovery","_validateNotArray","txDataKeys","_i2","_Object$entries2","_Object$entries2$_i","Array","isArray"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\baseTransaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { Numbers } from 'web3-types';\nimport { bytesToHex } from 'web3-utils';\nimport { MAX_INTEGER, MAX_UINT64, SECP256K1_ORDER_DIV_2, secp256k1 } from './constants.js';\nimport {\n\tChain,\n\tCommon,\n\tHardfork,\n\ttoUint8Array,\n\tuint8ArrayToBigInt,\n\tunpadUint8Array,\n} from '../common/index.js';\nimport type {\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxData,\n\tTxOptions,\n\tTxValuesArray,\n} from './types.js';\nimport { Capability, ECDSASignature } from './types.js';\nimport { Address } from './address.js';\nimport { checkMaxInitCodeSize } from './utils.js';\n\ninterface TransactionCache {\n\thash: Uint8Array | undefined;\n\tdataFee?: {\n\t\tvalue: bigint;\n\t\thardfork: string | Hardfork;\n\t};\n}\n\n/**\n * This base class will likely be subject to further\n * refactoring along the introduction of additional tx types\n * on the Ethereum network.\n *\n * It is therefore not recommended to use directly.\n */\nexport abstract class BaseTransaction<TransactionObject> {\n\tprivate readonly _type: number;\n\n\tpublic readonly nonce: bigint;\n\tpublic readonly gasLimit: bigint;\n\tpublic readonly to?: Address;\n\tpublic readonly value: bigint;\n\tpublic readonly data: Uint8Array;\n\n\tpublic readonly v?: bigint;\n\tpublic readonly r?: bigint;\n\tpublic readonly s?: bigint;\n\n\tpublic readonly common!: Common;\n\n\tprotected cache: TransactionCache = {\n\t\thash: undefined,\n\t\tdataFee: undefined,\n\t};\n\n\tprotected readonly txOptions: TxOptions;\n\n\t/**\n\t * List of tx type defining EIPs,\n\t * e.g. 1559 (fee market) and 2930 (access lists)\n\t * for FeeMarketEIP1559Transaction objects\n\t */\n\tprotected activeCapabilities: number[] = [];\n\n\t/**\n\t * The default chain the tx falls back to if no Common\n\t * is provided and if the chain can't be derived from\n\t * a passed in chainId (only EIP-2718 typed txs) or\n\t * EIP-155 signature (legacy txs).\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_CHAIN = Chain.Mainnet;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK: string | Hardfork = Hardfork.Merge;\n\n\tpublic constructor(\n\t\ttxData: TxData | AccessListEIP2930TxData | FeeMarketEIP1559TxData,\n\t\topts: TxOptions,\n\t) {\n\t\tconst { nonce, gasLimit, to, value, data, v, r, s, type } = txData;\n\t\tthis._type = Number(uint8ArrayToBigInt(toUint8Array(type)));\n\n\t\tthis.txOptions = opts;\n\n\t\tconst toB = toUint8Array(to === '' ? '0x' : to);\n\t\tconst vB = toUint8Array(v === '' ? '0x' : v);\n\t\tconst rB = toUint8Array(r === '' ? '0x' : r);\n\t\tconst sB = toUint8Array(s === '' ? '0x' : s);\n\n\t\tthis.nonce = uint8ArrayToBigInt(toUint8Array(nonce === '' ? '0x' : nonce));\n\t\tthis.gasLimit = uint8ArrayToBigInt(toUint8Array(gasLimit === '' ? '0x' : gasLimit));\n\t\tthis.to = toB.length > 0 ? new Address(toB) : undefined;\n\t\tthis.value = uint8ArrayToBigInt(toUint8Array(value === '' ? '0x' : value));\n\t\tthis.data = toUint8Array(data === '' ? '0x' : data);\n\n\t\tthis.v = vB.length > 0 ? uint8ArrayToBigInt(vB) : undefined;\n\t\tthis.r = rB.length > 0 ? uint8ArrayToBigInt(rB) : undefined;\n\t\tthis.s = sB.length > 0 ? uint8ArrayToBigInt(sB) : undefined;\n\n\t\tthis._validateCannotExceedMaxInteger({ value: this.value, r: this.r, s: this.s });\n\n\t\t// geth limits gasLimit to 2^64-1\n\t\tthis._validateCannotExceedMaxInteger({ gasLimit: this.gasLimit }, 64);\n\n\t\t// EIP-2681 limits nonce to 2^64-1 (cannot equal 2^64-1)\n\t\tthis._validateCannotExceedMaxInteger({ nonce: this.nonce }, 64, true);\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tconst createContract = this.to === undefined || this.to === null;\n\t\tconst allowUnlimitedInitCodeSize = opts.allowUnlimitedInitCodeSize ?? false;\n\t\tconst common = opts.common ?? this._getCommon();\n\t\tif (createContract && common.isActivatedEIP(3860) && !allowUnlimitedInitCodeSize) {\n\t\t\tcheckMaxInitCodeSize(common, this.data.length);\n\t\t}\n\t}\n\n\t/**\n\t * Returns the transaction type.\n\t *\n\t * Note: legacy txs will return tx type `0`.\n\t */\n\tpublic get type() {\n\t\treturn this._type;\n\t}\n\n\t/**\n\t * Checks if a tx type defining capability is active\n\t * on a tx, for example the EIP-1559 fee market mechanism\n\t * or the EIP-2930 access list feature.\n\t *\n\t * Note that this is different from the tx type itself,\n\t * so EIP-2930 access lists can very well be active\n\t * on an EIP-1559 tx for example.\n\t *\n\t * This method can be useful for feature checks if the\n\t * tx type is unknown (e.g. when instantiated with\n\t * the tx factory).\n\t *\n\t * See `Capabilites` in the `types` module for a reference\n\t * on all supported capabilities.\n\t */\n\tpublic supports(capability: Capability) {\n\t\treturn this.activeCapabilities.includes(capability);\n\t}\n\n\t/**\n\t * Checks if the transaction has the minimum amount of gas required\n\t * (DataFee + TxFee + Creation Fee).\n\t */\n\tpublic validate(): boolean;\n\tpublic validate(stringError: false): boolean;\n\tpublic validate(stringError: true): string[];\n\tpublic validate(stringError = false): boolean | string[] {\n\t\tconst errors = [];\n\n\t\tif (this.getBaseFee() > this.gasLimit) {\n\t\t\terrors.push(\n\t\t\t\t`gasLimit is too low. given ${this.gasLimit}, need at least ${this.getBaseFee()}`,\n\t\t\t);\n\t\t}\n\n\t\tif (this.isSigned() && !this.verifySignature()) {\n\t\t\terrors.push('Invalid Signature');\n\t\t}\n\n\t\treturn stringError ? errors : errors.length === 0;\n\t}\n\n\tprotected _validateYParity() {\n\t\tconst { v } = this;\n\t\tif (v !== undefined && v !== BigInt(0) && v !== BigInt(1)) {\n\t\t\tconst msg = this._errorMsg('The y-parity of the transaction should either be 0 or 1');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * EIP-2: All transaction signatures whose s-value is greater than secp256k1n/2are considered invalid.\n\t * Reasoning: https://ethereum.stackexchange.com/a/55728\n\t */\n\tprotected _validateHighS() {\n\t\tconst { s } = this;\n\t\tif (this.common.gteHardfork('homestead') && s !== undefined && s > SECP256K1_ORDER_DIV_2) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'Invalid Signature: s-values greater than secp256k1n/2 are considered invalid',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\t/**\n\t * The minimum amount of gas the tx must have (DataFee + TxFee + Creation Fee)\n\t */\n\tpublic getBaseFee(): bigint {\n\t\tconst txFee = this.common.param('gasPrices', 'tx');\n\t\tlet fee = this.getDataFee();\n\t\tif (txFee) fee += txFee;\n\t\tif (this.common.gteHardfork('homestead') && this.toCreationAddress()) {\n\t\t\tconst txCreationFee = this.common.param('gasPrices', 'txCreation');\n\t\t\tif (txCreationFee) fee += txCreationFee;\n\t\t}\n\t\treturn fee;\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tconst txDataZero = this.common.param('gasPrices', 'txDataZero');\n\t\tconst txDataNonZero = this.common.param('gasPrices', 'txDataNonZero');\n\n\t\tlet cost = BigInt(0);\n\t\t// eslint-disable-next-line @typescript-eslint/prefer-for-of\n\t\tfor (let i = 0; i < this.data.length; i += 1) {\n\t\t\t// eslint-disable-next-line @typescript-eslint/no-unused-expressions, no-unused-expressions\n\t\t\tthis.data[i] === 0 ? (cost += txDataZero) : (cost += txDataNonZero);\n\t\t}\n\t\t// eslint-disable-next-line no-null/no-null\n\t\tif ((this.to === undefined || this.to === null) && this.common.isActivatedEIP(3860)) {\n\t\t\tconst dataLength = BigInt(Math.ceil(this.data.length / 32));\n\t\t\tconst initCodeCost = this.common.param('gasPrices', 'initCodeWordCost') * dataLength;\n\t\t\tcost += initCodeCost;\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic abstract getUpfrontCost(): bigint;\n\n\t/**\n\t * If the tx's `to` is to the creation address\n\t */\n\tpublic toCreationAddress(): boolean {\n\t\treturn this.to === undefined || this.to.buf.length === 0;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of this transaction, in order.\n\t *\n\t * Use {@link BaseTransaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link BaseTransaction.getMessageToSign}.\n\t */\n\tpublic abstract raw():\n\t\t| TxValuesArray\n\t\t| AccessListEIP2930ValuesArray\n\t\t| FeeMarketEIP1559ValuesArray;\n\n\t/**\n\t * Returns the encoding of the transaction.\n\t */\n\tpublic abstract serialize(): Uint8Array;\n\n\t// Returns the unsigned tx (hashed or raw), which is used to sign the transaction.\n\t//\n\t// Note: do not use code docs here since VS Studio is then not able to detect the\n\t// comments from the inherited methods\n\tpublic abstract getMessageToSign(hashMessage: false): Uint8Array | Uint8Array[];\n\tpublic abstract getMessageToSign(hashMessage?: true): Uint8Array;\n\n\tpublic abstract hash(): Uint8Array;\n\n\tpublic abstract getMessageToVerifySignature(): Uint8Array;\n\n\tpublic isSigned(): boolean {\n\t\tconst { v, r, s } = this;\n\t\tif (v === undefined || r === undefined || s === undefined) {\n\t\t\treturn false;\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * Determines if the signature is valid\n\t */\n\tpublic verifySignature(): boolean {\n\t\ttry {\n\t\t\t// Main signature verification is done in `getSenderPublicKey()`\n\t\t\tconst publicKey = this.getSenderPublicKey();\n\t\t\treturn unpadUint8Array(publicKey).length !== 0;\n\t\t} catch (e: any) {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * Returns the sender's address\n\t */\n\tpublic getSenderAddress(): Address {\n\t\treturn new Address(Address.publicToAddress(this.getSenderPublicKey()));\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic abstract getSenderPublicKey(): Uint8Array;\n\n\t/**\n\t * Signs a transaction.\n\t *\n\t * Note that the signed tx is returned as a new object,\n\t * use as follows:\n\t * ```javascript\n\t * const signedTx = tx.sign(privateKey)\n\t * ```\n\t */\n\tpublic sign(privateKey: Uint8Array): TransactionObject {\n\t\tif (privateKey.length !== 32) {\n\t\t\tconst msg = this._errorMsg('Private key must be 32 bytes in length.');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\t// Hack for the constellation that we have got a legacy tx after spuriousDragon with a non-EIP155 conforming signature\n\t\t// and want to recreate a signature (where EIP155 should be applied)\n\t\t// Leaving this hack lets the legacy.spec.ts -> sign(), verifySignature() test fail\n\t\t// 2021-06-23\n\t\tlet hackApplied = false;\n\t\tif (\n\t\t\tthis.type === 0 &&\n\t\t\tthis.common.gteHardfork('spuriousDragon') &&\n\t\t\t!this.supports(Capability.EIP155ReplayProtection)\n\t\t) {\n\t\t\tthis.activeCapabilities.push(Capability.EIP155ReplayProtection);\n\t\t\thackApplied = true;\n\t\t}\n\n\t\tconst msgHash = this.getMessageToSign(true);\n\t\tconst { v, r, s } = this._ecsign(msgHash, privateKey);\n\t\tconst tx = this._processSignature(v, r, s);\n\n\t\t// Hack part 2\n\t\tif (hackApplied) {\n\t\t\tconst index = this.activeCapabilities.indexOf(Capability.EIP155ReplayProtection);\n\t\t\tif (index > -1) {\n\t\t\t\tthis.activeCapabilities.splice(index, 1);\n\t\t\t}\n\t\t}\n\n\t\treturn tx;\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic abstract toJSON(): JsonTx;\n\n\t// Accept the v,r,s values from the `sign` method, and convert this into a TransactionObject\n\tprotected abstract _processSignature(\n\t\tv: bigint,\n\t\tr: Uint8Array,\n\t\ts: Uint8Array,\n\t): TransactionObject;\n\n\t/**\n\t * Does chain ID checks on common and returns a common\n\t * to be used on instantiation\n\t * @hidden\n\t *\n\t * @param common - {@link Common} instance from tx options\n\t * @param chainId - Chain ID from tx options (typed txs) or signature (legacy tx)\n\t */\n\tprotected _getCommon(common?: Common, chainId?: Numbers) {\n\t\t// Chain ID provided\n\t\tif (chainId !== undefined) {\n\t\t\tconst chainIdBigInt = uint8ArrayToBigInt(toUint8Array(chainId));\n\t\t\tif (common) {\n\t\t\t\tif (common.chainId() !== chainIdBigInt) {\n\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t'The chain ID does not match the chain ID of Common',\n\t\t\t\t\t);\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t\t// Common provided, chain ID does match\n\t\t\t\t// -> Return provided Common\n\t\t\t\treturn common.copy();\n\t\t\t}\n\t\t\tif (Common.isSupportedChainId(chainIdBigInt)) {\n\t\t\t\t// No Common, chain ID supported by Common\n\t\t\t\t// -> Instantiate Common with chain ID\n\t\t\t\treturn new Common({ chain: chainIdBigInt, hardfork: this.DEFAULT_HARDFORK });\n\t\t\t}\n\t\t\t// No Common, chain ID not supported by Common\n\t\t\t// -> Instantiate custom Common derived from DEFAULT_CHAIN\n\t\t\treturn Common.custom(\n\t\t\t\t{\n\t\t\t\t\tname: 'custom-chain',\n\t\t\t\t\tnetworkId: chainIdBigInt,\n\t\t\t\t\tchainId: chainIdBigInt,\n\t\t\t\t},\n\t\t\t\t{ baseChain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK },\n\t\t\t);\n\t\t}\n\t\t// No chain ID provided\n\t\t// -> return Common provided or create new default Common\n\t\treturn (\n\t\t\tcommon?.copy() ??\n\t\t\tnew Common({ chain: this.DEFAULT_CHAIN, hardfork: this.DEFAULT_HARDFORK })\n\t\t);\n\t}\n\n\t/**\n\t * Validates that an object with BigInt values cannot exceed the specified bit limit.\n\t * @param values Object containing string keys and BigInt values\n\t * @param bits Number of bits to check (64 or 256)\n\t * @param cannotEqual Pass true if the number also cannot equal one less the maximum value\n\t */\n\tprotected _validateCannotExceedMaxInteger(\n\t\tvalues: { [key: string]: bigint | undefined },\n\t\tbits = 256,\n\t\tcannotEqual = false,\n\t) {\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tswitch (bits) {\n\t\t\t\tcase 64:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_UINT64) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_UINT64) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_UINT64 (2^64-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 256:\n\t\t\t\t\tif (cannotEqual) {\n\t\t\t\t\t\tif (value !== undefined && value >= MAX_INTEGER) {\n\t\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t\t`${key} cannot equal or exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (value !== undefined && value > MAX_INTEGER) {\n\t\t\t\t\t\tconst msg = this._errorMsg(\n\t\t\t\t\t\t\t`${key} cannot exceed MAX_INTEGER (2^256-1), given ${value}`,\n\t\t\t\t\t\t);\n\t\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tdefault: {\n\t\t\t\t\tconst msg = this._errorMsg('unimplemented bits value');\n\t\t\t\t\tthrow new Error(msg);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tprotected static _validateNotArray(values: { [key: string]: any }) {\n\t\tconst txDataKeys = [\n\t\t\t'nonce',\n\t\t\t'gasPrice',\n\t\t\t'gasLimit',\n\t\t\t'to',\n\t\t\t'value',\n\t\t\t'data',\n\t\t\t'v',\n\t\t\t'r',\n\t\t\t's',\n\t\t\t'type',\n\t\t\t'baseFee',\n\t\t\t'maxFeePerGas',\n\t\t\t'chainId',\n\t\t];\n\t\tfor (const [key, value] of Object.entries(values)) {\n\t\t\tif (txDataKeys.includes(key)) {\n\t\t\t\tif (Array.isArray(value)) {\n\t\t\t\t\tthrow new Error(`${key} cannot be an array`);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic abstract errorStr(): string;\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected abstract _errorMsg(msg: string): string;\n\n\t/**\n\t * Returns the shared error postfix part for _error() method\n\t * tx type implementations.\n\t */\n\tprotected _getSharedErrorPostfix() {\n\t\tlet hash = '';\n\t\ttry {\n\t\t\thash = this.isSigned() ? bytesToHex(this.hash()) : 'not available (unsigned)';\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet isSigned = '';\n\t\ttry {\n\t\t\tisSigned = this.isSigned().toString();\n\t\t} catch (e: any) {\n\t\t\thash = 'error';\n\t\t}\n\t\tlet hf = '';\n\t\ttry {\n\t\t\thf = this.common.hardfork();\n\t\t} catch (e: any) {\n\t\t\thf = 'error';\n\t\t}\n\n\t\tlet postfix = `tx type=${this.type} hash=${hash} nonce=${this.nonce} value=${this.value} `;\n\t\tpostfix += `signed=${isSigned} hf=${hf}`;\n\n\t\treturn postfix;\n\t}\n\t// eslint-disable-next-line class-methods-use-this\n\tprivate _ecsign(msgHash: Uint8Array, privateKey: Uint8Array, chainId?: bigint): ECDSASignature {\n\t\tconst signature = secp256k1.sign(msgHash, privateKey);\n\t\tconst signatureBytes = signature.toCompactRawBytes();\n\n\t\tconst r = signatureBytes.subarray(0, 32);\n\t\tconst s = signatureBytes.subarray(32, 64);\n\n\t\tconst v =\n\t\t\tchainId === undefined\n\t\t\t\t? BigInt(signature.recovery! + 27)\n\t\t\t\t: BigInt(signature.recovery! + 35) + BigInt(chainId) * BigInt(2);\n\n\t\treturn { r, s, v };\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}