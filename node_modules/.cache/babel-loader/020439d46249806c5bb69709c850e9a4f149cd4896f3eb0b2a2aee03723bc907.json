{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { getAccessListData, verifyAccessList, getAccessListJSON, getDataFeeEIP2930 } from './utils.js';\nimport { bigIntToHex, toUint8Array, ecrecover, uint8ArrayToBigInt, bigIntToUnpaddedUint8Array } from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nvar TRANSACTION_TYPE = 1;\nvar TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nexport var AccessListEIP2930Transaction = /*#__PURE__*/function (_BaseTransaction) {\n  _inherits(AccessListEIP2930Transaction, _BaseTransaction);\n  var _super = _createSuper(AccessListEIP2930Transaction);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function AccessListEIP2930Transaction(txData) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, AccessListEIP2930Transaction);\n    var _a;\n    _this = _super.call(this, Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    _this.DEFAULT_HARDFORK = 'berlin';\n    var chainId = txData.chainId,\n      accessList = txData.accessList,\n      gasPrice = txData.gasPrice;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainId();\n    // EIP-2718 check is done in Common\n    if (!_this.common.isActivatedEIP(2930)) {\n      throw new Error('EIP-2930 not enabled on Common');\n    }\n    _this.activeCapabilities = _this.activeCapabilities.concat([2718, 2930]);\n    // Populate the access list fields\n    var accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    verifyAccessList(_this.accessList);\n    _this.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n    _this._validateCannotExceedMaxInteger({\n      gasPrice: _this.gasPrice\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (_this.gasPrice * _this.gasLimit > MAX_INTEGER) {\n      var msg = _this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n      throw new Error(msg);\n    }\n    _this._validateYParity();\n    _this._validateHighS();\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n   * v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  _createClass(AccessListEIP2930Transaction, [{\n    key: \"getDataFee\",\n    value:\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    function getDataFee() {\n      if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n        return this.cache.dataFee.value;\n      }\n      var cost = _get(_getPrototypeOf(AccessListEIP2930Transaction.prototype), \"getDataFee\", this).call(this);\n      cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n      if (Object.isFrozen(this)) {\n        this.cache.dataFee = {\n          value: cost,\n          hardfork: this.common.hardfork()\n        };\n      }\n      return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     */\n  }, {\n    key: \"getUpfrontCost\",\n    value: function getUpfrontCost() {\n      return this.gasLimit * this.gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     *\n     * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n     */\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      return [bigIntToUnpaddedUint8Array(this.chainId), bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.gasPrice), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.accessList, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-2930 transaction.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var base = this.raw();\n      return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n  }, {\n    key: \"getMessageToSign\",\n    value: function getMessageToSign() {\n      var hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var base = this.raw().slice(0, 8);\n      var message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n      if (hashMessage) {\n        return keccak256(message);\n      }\n      return message;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n        throw new Error(msg);\n      }\n      if (Object.isFrozen(this)) {\n        if (!this.cache.hash) {\n          this.cache.hash = keccak256(this.serialize());\n        }\n        return this.cache.hash;\n      }\n      return keccak256(this.serialize());\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n  }, {\n    key: \"getMessageToVerifySignature\",\n    value: function getMessageToVerifySignature() {\n      return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n  }, {\n    key: \"getSenderPublicKey\",\n    value: function getSenderPublicKey() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n        throw new Error(msg);\n      }\n      var msgHash = this.getMessageToVerifySignature();\n      var v = this.v,\n        r = this.r,\n        s = this.s;\n      this._validateHighS();\n      try {\n        return ecrecover(msgHash, v + BigInt(27),\n        // Recover the 27 which was stripped from ecsign\n        bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));\n      } catch (e) {\n        var _msg = this._errorMsg('Invalid Signature');\n        throw new Error(_msg);\n      }\n    }\n  }, {\n    key: \"_processSignature\",\n    value: function _processSignature(v, r, s) {\n      var opts = Object.assign(Object.assign({}, this.txOptions), {\n        common: this.common\n      });\n      return AccessListEIP2930Transaction.fromTxData({\n        chainId: this.chainId,\n        nonce: this.nonce,\n        gasPrice: this.gasPrice,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: v - BigInt(27),\n        r: uint8ArrayToBigInt(r),\n        s: uint8ArrayToBigInt(s)\n      }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var accessListJSON = getAccessListJSON(this.accessList);\n      return {\n        chainId: bigIntToHex(this.chainId),\n        nonce: bigIntToHex(this.nonce),\n        gasPrice: bigIntToHex(this.gasPrice),\n        gasLimit: bigIntToHex(this.gasLimit),\n        to: this.to !== undefined ? this.to.toString() : undefined,\n        value: bigIntToHex(this.value),\n        data: bytesToHex(this.data),\n        accessList: accessListJSON,\n        v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n        r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n        s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n      };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n  }, {\n    key: \"errorStr\",\n    value: function errorStr() {\n      var _a, _b;\n      var errorStr = this._getSharedErrorPostfix();\n      // Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n      errorStr += \" gasPrice=\".concat(this.gasPrice, \" accessListCount=\").concat((_b = (_a = this.accessList) === null || _a === void 0 ? void 0 : _a.length) !== null && _b !== void 0 ? _b : 0);\n      return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n  }, {\n    key: \"_errorMsg\",\n    value: function _errorMsg(msg) {\n      return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    }\n  }], [{\n    key: \"fromTxData\",\n    value: function fromTxData(txData) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new AccessListEIP2930Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)])`\n     */\n  }, {\n    key: \"fromSerializedTx\",\n    value: function fromSerializedTx(serialized) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n        throw new Error(\"Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(bytesToHex(serialized.subarray(0, 1))));\n      }\n      var values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n      if (!Array.isArray(values)) {\n        throw new Error('Invalid serialized tx input: must be array');\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return AccessListEIP2930Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n     * signatureYParity (v), signatureR (r), signatureS (s)]`\n     */\n  }, {\n    key: \"fromValuesArray\",\n    value: function fromValuesArray(values) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (values.length !== 8 && values.length !== 11) {\n        throw new Error('Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).');\n      }\n      var _values = _slicedToArray(values, 11),\n        chainId = _values[0],\n        nonce = _values[1],\n        gasPrice = _values[2],\n        gasLimit = _values[3],\n        to = _values[4],\n        value = _values[5],\n        data = _values[6],\n        accessList = _values[7],\n        v = _values[8],\n        r = _values[9],\n        s = _values[10];\n      this._validateNotArray({\n        chainId: chainId,\n        v: v\n      });\n      validateNoLeadingZeroes({\n        nonce: nonce,\n        gasPrice: gasPrice,\n        gasLimit: gasLimit,\n        value: value,\n        v: v,\n        r: r,\n        s: s\n      });\n      var emptyAccessList = [];\n      return new AccessListEIP2930Transaction({\n        chainId: uint8ArrayToBigInt(chainId),\n        nonce: nonce,\n        gasPrice: gasPrice,\n        gasLimit: gasLimit,\n        to: to,\n        value: value,\n        data: data,\n        accessList: accessList !== null && accessList !== void 0 ? accessList : emptyAccessList,\n        v: v !== undefined ? uint8ArrayToBigInt(v) : undefined,\n        r: r,\n        s: s\n      }, opts);\n    }\n  }]);\n  return AccessListEIP2930Transaction;\n}(BaseTransaction);","map":{"version":3,"names":["keccak256","validateNoLeadingZeroes","RLP","bytesToHex","hexToBytes","uint8ArrayConcat","uint8ArrayEquals","MAX_INTEGER","getAccessListData","verifyAccessList","getAccessListJSON","getDataFeeEIP2930","bigIntToHex","toUint8Array","ecrecover","uint8ArrayToBigInt","bigIntToUnpaddedUint8Array","BaseTransaction","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","AccessListEIP2930Transaction","_BaseTransaction","_inherits","_super","_createSuper","txData","_this","opts","arguments","length","undefined","_classCallCheck","call","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","gasPrice","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","_assertThisInitialized","_createClass","key","value","getDataFee","cache","dataFee","hardfork","cost","_get","_getPrototypeOf","prototype","BigInt","isFrozen","getUpfrontCost","raw","nonce","to","buf","Uint8Array","from","data","v","r","s","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","fromTxData","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix","_b","fromSerializedTx","serialized","subarray","values","decode","Array","isArray","fromValuesArray","_values","_slicedToArray","emptyAccessList"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\eip2930Transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport {\n\tgetAccessListData,\n\tverifyAccessList,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tAccessListEIP2930TxData,\n\tAccessListEIP2930ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 1;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with optional access lists\n *\n * - TransactionType: 1\n * - EIP: [EIP-2930](https://eips.ethereum.org/EIPS/eip-2930)\n */\n// eslint-disable-next-line no-use-before-define\nexport class AccessListEIP2930Transaction extends BaseTransaction<AccessListEIP2930Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly gasPrice: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'berlin';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\treturn new AccessListEIP2930Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-2930 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(Uint8Array.from(serialized.subarray(1)));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn AccessListEIP2930Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t */\n\tpublic static fromValuesArray(values: AccessListEIP2930ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 8 && values.length !== 11) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-2930 transaction. Only expecting 8 values (for unsigned tx) or 11 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [chainId, nonce, gasPrice, gasLimit, to, value, data, accessList, v, r, s] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({ nonce, gasPrice, gasLimit, value, v, r, s });\n\n\t\tconst emptyAccessList: AccessList = [];\n\n\t\treturn new AccessListEIP2930Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tgasPrice,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? emptyAccessList,\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: AccessListEIP2930TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, gasPrice } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\t// EIP-2718 check is done in Common\n\t\tif (!this.common.isActivatedEIP(2930)) {\n\t\t\tthrow new Error('EIP-2930 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.gasPrice = uint8ArrayToBigInt(toUint8Array(gasPrice === '' ? '0x' : gasPrice));\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tgasPrice: this.gasPrice,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasPrice * this.gasLimit > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg('gasLimit * gasPrice cannot exceed MAX_INTEGER');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t */\n\tpublic getUpfrontCost(): bigint {\n\t\treturn this.gasLimit * this.gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-2930 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)]`\n\t *\n\t * Use {@link AccessListEIP2930Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty UINT8ARRAY values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link AccessListEIP2930Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): AccessListEIP2930ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasPrice),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-2930 transaction.\n\t *\n\t * Format: `0x01 || rlp([chainId, nonce, gasPrice, gasLimit, to, value, data, accessList,\n\t * signatureYParity (v), signatureR (r), signatureS (s)])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 8);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link AccessListEIP2930Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn AccessListEIP2930Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tgasPrice: this.gasPrice,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tgasPrice: bigIntToHex(this.gasPrice),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\t// Keep ? for this.accessList since this otherwise causes Hardhat E2E tests to fail\n\t\terrorStr += ` gasPrice=${this.gasPrice} accessListCount=${this.accessList?.length ?? 0}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}