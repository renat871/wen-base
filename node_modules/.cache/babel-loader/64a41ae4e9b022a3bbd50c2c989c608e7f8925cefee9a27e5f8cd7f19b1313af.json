{"ast":null,"code":"import _regeneratorRuntime from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nimport { ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport { create, decrypt, encrypt, hashMessage, privateKeyToAccount, recover, recoverTransaction, signTransaction, sign, Wallet } from 'web3-eth-accounts';\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport var initAccountsForContext = function initAccountsForContext(context) {\n  var signTransactionWithContext = function signTransactionWithContext(transaction, privateKey) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n      var tx, privateKeyBytes;\n      return _regeneratorRuntime().wrap(function _callee$(_context) {\n        while (1) switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return prepareTransactionForSigning(transaction, context);\n          case 2:\n            tx = _context.sent;\n            privateKeyBytes = format({\n              format: 'bytes'\n            }, privateKey, ETH_DATA_FORMAT);\n            return _context.abrupt(\"return\", signTransaction(tx, privateKeyBytes));\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }, _callee);\n    }));\n  };\n  var privateKeyToAccountWithContext = function privateKeyToAccountWithContext(privateKey) {\n    var account = privateKeyToAccount(privateKey);\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: function signTransaction(transaction) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n          return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n            while (1) switch (_context2.prev = _context2.next) {\n              case 0:\n                return _context2.abrupt(\"return\", signTransactionWithContext(transaction, account.privateKey));\n              case 1:\n              case \"end\":\n                return _context2.stop();\n            }\n          }, _callee2);\n        }));\n      }\n    });\n  };\n  var decryptWithContext = function decryptWithContext(keystore, password, options) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {\n      var _a, account;\n      return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n        while (1) switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.next = 2;\n            return decrypt(keystore, password, (_a = options === null || options === void 0 ? void 0 : options.nonStrict) !== null && _a !== void 0 ? _a : true);\n          case 2:\n            account = _context4.sent;\n            return _context4.abrupt(\"return\", Object.assign(Object.assign({}, account), {\n              signTransaction: function signTransaction(transaction) {\n                return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n                  return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n                    while (1) switch (_context3.prev = _context3.next) {\n                      case 0:\n                        return _context3.abrupt(\"return\", signTransactionWithContext(transaction, account.privateKey));\n                      case 1:\n                      case \"end\":\n                        return _context3.stop();\n                    }\n                  }, _callee3);\n                }));\n              }\n            }));\n          case 4:\n          case \"end\":\n            return _context4.stop();\n        }\n      }, _callee4);\n    }));\n  };\n  var createWithContext = function createWithContext() {\n    var account = create();\n    return Object.assign(Object.assign({}, account), {\n      signTransaction: function signTransaction(transaction) {\n        return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {\n          return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n            while (1) switch (_context5.prev = _context5.next) {\n              case 0:\n                return _context5.abrupt(\"return\", signTransactionWithContext(transaction, account.privateKey));\n              case 1:\n              case \"end\":\n                return _context5.stop();\n            }\n          }, _callee5);\n        }));\n      }\n    });\n  };\n  var wallet = new Wallet({\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext\n  });\n  return {\n    signTransaction: signTransactionWithContext,\n    create: createWithContext,\n    privateKeyToAccount: privateKeyToAccountWithContext,\n    decrypt: decryptWithContext,\n    recoverTransaction: recoverTransaction,\n    hashMessage: hashMessage,\n    sign: sign,\n    recover: recover,\n    encrypt: encrypt,\n    wallet: wallet\n  };\n};","map":{"version":3,"names":["ETH_DATA_FORMAT","format","prepareTransactionForSigning","create","decrypt","encrypt","hashMessage","privateKeyToAccount","recover","recoverTransaction","signTransaction","sign","Wallet","initAccountsForContext","context","signTransactionWithContext","transaction","privateKey","__awaiter","_regeneratorRuntime","mark","_callee","tx","privateKeyBytes","wrap","_callee$","_context","prev","next","sent","abrupt","stop","privateKeyToAccountWithContext","account","Object","assign","_callee2","_callee2$","_context2","decryptWithContext","keystore","password","options","_callee4","_a","_callee4$","_context4","nonStrict","_callee3","_callee3$","_context3","createWithContext","_callee5","_callee5$","_context5","wallet"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3\\src\\accounts.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\n\nimport { EthExecutionAPI, Bytes, Transaction, KeyStore, ETH_DATA_FORMAT } from 'web3-types';\nimport { format } from 'web3-utils';\nimport { Web3Context } from 'web3-core';\nimport { prepareTransactionForSigning } from 'web3-eth';\nimport {\n\tcreate,\n\tdecrypt,\n\tencrypt,\n\thashMessage,\n\tprivateKeyToAccount,\n\trecover,\n\trecoverTransaction,\n\tsignTransaction,\n\tsign,\n\tWallet,\n} from 'web3-eth-accounts';\n\n/**\n * Initialize the accounts module for the given context.\n *\n * To avoid multiple package dependencies for `web3-eth-accounts` we are creating\n * this function in `web3` package. In future the actual `web3-eth-accounts` package\n * should be converted to context aware.\n */\nexport const initAccountsForContext = (context: Web3Context<EthExecutionAPI>) => {\n\tconst signTransactionWithContext = async (transaction: Transaction, privateKey: Bytes) => {\n\t\tconst tx = await prepareTransactionForSigning(transaction, context);\n\n\t\tconst privateKeyBytes = format({ format: 'bytes' }, privateKey, ETH_DATA_FORMAT);\n\n\t\treturn signTransaction(tx, privateKeyBytes);\n\t};\n\n\tconst privateKeyToAccountWithContext = (privateKey: Uint8Array | string) => {\n\t\tconst account = privateKeyToAccount(privateKey);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst decryptWithContext = async (\n\t\tkeystore: KeyStore | string,\n\t\tpassword: string,\n\t\toptions?: Record<string, unknown>,\n\t) => {\n\t\tconst account = await decrypt(keystore, password, (options?.nonStrict as boolean) ?? true);\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst createWithContext = () => {\n\t\tconst account = create();\n\n\t\treturn {\n\t\t\t...account,\n\t\t\tsignTransaction: async (transaction: Transaction) =>\n\t\t\t\tsignTransactionWithContext(transaction, account.privateKey),\n\t\t};\n\t};\n\n\tconst wallet = new Wallet({\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t});\n\n\treturn {\n\t\tsignTransaction: signTransactionWithContext,\n\t\tcreate: createWithContext,\n\t\tprivateKeyToAccount: privateKeyToAccountWithContext,\n\t\tdecrypt: decryptWithContext,\n\t\trecoverTransaction,\n\t\thashMessage,\n\t\tsign,\n\t\trecover,\n\t\tencrypt,\n\t\twallet,\n\t};\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}