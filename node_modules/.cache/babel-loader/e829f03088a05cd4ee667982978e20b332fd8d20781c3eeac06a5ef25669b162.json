{"ast":null,"code":"import _slicedToArray from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _classCallCheck from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/classCallCheck.js\";\nimport _createClass from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createClass.js\";\nimport _assertThisInitialized from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/assertThisInitialized.js\";\nimport _get from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/get.js\";\nimport _getPrototypeOf from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/getPrototypeOf.js\";\nimport _inherits from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/inherits.js\";\nimport _createSuper from \"D:/projects/react/wen-base/node_modules/@babel/runtime/helpers/esm/createSuper.js\";\n/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport { getAccessListData, getAccessListJSON, getDataFeeEIP2930, verifyAccessList } from './utils.js';\nimport { bigIntToHex, toUint8Array, ecrecover, uint8ArrayToBigInt, bigIntToUnpaddedUint8Array } from '../common/utils.js';\nvar TRANSACTION_TYPE = 2;\nvar TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\nexport var FeeMarketEIP1559Transaction = /*#__PURE__*/function (_BaseTransaction) {\n  _inherits(FeeMarketEIP1559Transaction, _BaseTransaction);\n  var _super = _createSuper(FeeMarketEIP1559Transaction);\n  /**\n   * This constructor takes the values, validates them, assigns them and freezes the object.\n   *\n   * It is not recommended to use this constructor directly. Instead use\n   * the static factory methods to assist in creating a Transaction object from\n   * varying data types.\n   */\n  function FeeMarketEIP1559Transaction(txData) {\n    var _this;\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    _classCallCheck(this, FeeMarketEIP1559Transaction);\n    var _a;\n    _this = _super.call(this, Object.assign(Object.assign({}, txData), {\n      type: TRANSACTION_TYPE\n    }), opts);\n    /**\n     * The default HF if the tx type is active on that HF\n     * or the first greater HF where the tx is active.\n     *\n     * @hidden\n     */\n    _this.DEFAULT_HARDFORK = 'london';\n    var chainId = txData.chainId,\n      accessList = txData.accessList,\n      maxFeePerGas = txData.maxFeePerGas,\n      maxPriorityFeePerGas = txData.maxPriorityFeePerGas;\n    _this.common = _this._getCommon(opts.common, chainId);\n    _this.chainId = _this.common.chainId();\n    if (!_this.common.isActivatedEIP(1559)) {\n      throw new Error('EIP-1559 not enabled on Common');\n    }\n    _this.activeCapabilities = _this.activeCapabilities.concat([1559, 2718, 2930]);\n    // Populate the access list fields\n    var accessListData = getAccessListData(accessList !== null && accessList !== void 0 ? accessList : []);\n    _this.accessList = accessListData.accessList;\n    _this.AccessListJSON = accessListData.AccessListJSON;\n    // Verify the access list format.\n    verifyAccessList(_this.accessList);\n    _this.maxFeePerGas = uint8ArrayToBigInt(toUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas));\n    _this.maxPriorityFeePerGas = uint8ArrayToBigInt(toUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas));\n    _this._validateCannotExceedMaxInteger({\n      maxFeePerGas: _this.maxFeePerGas,\n      maxPriorityFeePerGas: _this.maxPriorityFeePerGas\n    });\n    BaseTransaction._validateNotArray(txData);\n    if (_this.gasLimit * _this.maxFeePerGas > MAX_INTEGER) {\n      var msg = _this._errorMsg('gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)');\n      throw new Error(msg);\n    }\n    if (_this.maxFeePerGas < _this.maxPriorityFeePerGas) {\n      var _msg = _this._errorMsg('maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)');\n      throw new Error(_msg);\n    }\n    _this._validateYParity();\n    _this._validateHighS();\n    var freeze = (_a = opts === null || opts === void 0 ? void 0 : opts.freeze) !== null && _a !== void 0 ? _a : true;\n    if (freeze) {\n      Object.freeze(_assertThisInitialized(_this));\n    }\n    return _this;\n  }\n  /**\n   * Instantiate a transaction from a data dictionary.\n   *\n   * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n   * accessList, v, r, s }\n   *\n   * Notes:\n   * - `chainId` will be set automatically if not provided\n   * - All parameters are optional and have some basic default values\n   */\n  _createClass(FeeMarketEIP1559Transaction, [{\n    key: \"getDataFee\",\n    value:\n    /**\n     * The amount of gas paid for the data in this tx\n     */\n    function getDataFee() {\n      if (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n        return this.cache.dataFee.value;\n      }\n      var cost = _get(_getPrototypeOf(FeeMarketEIP1559Transaction.prototype), \"getDataFee\", this).call(this);\n      cost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n      if (Object.isFrozen(this)) {\n        this.cache.dataFee = {\n          value: cost,\n          hardfork: this.common.hardfork()\n        };\n      }\n      return cost;\n    }\n    /**\n     * The up front amount that an account must have for this transaction to be valid\n     * @param baseFee The base fee of the block (will be set to 0 if not provided)\n     */\n  }, {\n    key: \"getUpfrontCost\",\n    value: function getUpfrontCost() {\n      var baseFee = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : BigInt(0);\n      var prio = this.maxPriorityFeePerGas;\n      var maxBase = this.maxFeePerGas - baseFee;\n      var inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n      var gasPrice = inclusionFeePerGas + baseFee;\n      return this.gasLimit * gasPrice + this.value;\n    }\n    /**\n     * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     *\n     * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n     * with {@link Block.fromValuesArray}.\n     *\n     * For an unsigned tx this method uses the empty Uint8Array values for the\n     * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n     * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n     */\n  }, {\n    key: \"raw\",\n    value: function raw() {\n      return [bigIntToUnpaddedUint8Array(this.chainId), bigIntToUnpaddedUint8Array(this.nonce), bigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas), bigIntToUnpaddedUint8Array(this.maxFeePerGas), bigIntToUnpaddedUint8Array(this.gasLimit), this.to !== undefined ? this.to.buf : Uint8Array.from([]), bigIntToUnpaddedUint8Array(this.value), this.data, this.accessList, this.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]), this.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]), this.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([])];\n    }\n    /**\n     * Returns the serialized encoding of the EIP-1559 transaction.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     *\n     * Note that in contrast to the legacy tx serialization format this is not\n     * valid RLP any more due to the raw tx type preceding and concatenated to\n     * the RLP encoding of the values.\n     */\n  }, {\n    key: \"serialize\",\n    value: function serialize() {\n      var base = this.raw();\n      return uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n    }\n    /**\n     * Returns the serialized unsigned tx (hashed or raw), which can be used\n     * to sign the transaction (e.g. for sending to a hardware wallet).\n     *\n     * Note: in contrast to the legacy tx the raw message format is already\n     * serialized and doesn't need to be RLP encoded any more.\n     *\n     * ```javascript\n     * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n     * ```\n     *\n     * @param hashMessage - Return hashed message if set to true (default: true)\n     */\n  }, {\n    key: \"getMessageToSign\",\n    value: function getMessageToSign() {\n      var hashMessage = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var base = this.raw().slice(0, 9);\n      var message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n      if (hashMessage) {\n        return keccak256(message);\n      }\n      return message;\n    }\n    /**\n     * Computes a sha3-256 hash of the serialized tx.\n     *\n     * This method can only be used for signed txs (it throws otherwise).\n     * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n     */\n  }, {\n    key: \"hash\",\n    value: function hash() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n        throw new Error(msg);\n      }\n      if (Object.isFrozen(this)) {\n        if (!this.cache.hash) {\n          this.cache.hash = keccak256(this.serialize());\n        }\n        return this.cache.hash;\n      }\n      return keccak256(this.serialize());\n    }\n    /**\n     * Computes a sha3-256 hash which can be used to verify the signature\n     */\n  }, {\n    key: \"getMessageToVerifySignature\",\n    value: function getMessageToVerifySignature() {\n      return this.getMessageToSign();\n    }\n    /**\n     * Returns the public key of the sender\n     */\n  }, {\n    key: \"getSenderPublicKey\",\n    value: function getSenderPublicKey() {\n      if (!this.isSigned()) {\n        var msg = this._errorMsg('Cannot call this method if transaction is not signed');\n        throw new Error(msg);\n      }\n      var msgHash = this.getMessageToVerifySignature();\n      var v = this.v,\n        r = this.r,\n        s = this.s;\n      this._validateHighS();\n      try {\n        return ecrecover(msgHash, v + BigInt(27),\n        // Recover the 27 which was stripped from ecsign\n        bigIntToUnpaddedUint8Array(r), bigIntToUnpaddedUint8Array(s));\n      } catch (e) {\n        var _msg2 = this._errorMsg('Invalid Signature');\n        throw new Error(_msg2);\n      }\n    }\n  }, {\n    key: \"_processSignature\",\n    value: function _processSignature(v, r, s) {\n      var opts = Object.assign(Object.assign({}, this.txOptions), {\n        common: this.common\n      });\n      return FeeMarketEIP1559Transaction.fromTxData({\n        chainId: this.chainId,\n        nonce: this.nonce,\n        maxPriorityFeePerGas: this.maxPriorityFeePerGas,\n        maxFeePerGas: this.maxFeePerGas,\n        gasLimit: this.gasLimit,\n        to: this.to,\n        value: this.value,\n        data: this.data,\n        accessList: this.accessList,\n        v: v - BigInt(27),\n        r: uint8ArrayToBigInt(r),\n        s: uint8ArrayToBigInt(s)\n      }, opts);\n    }\n    /**\n     * Returns an object with the JSON representation of the transaction\n     */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var accessListJSON = getAccessListJSON(this.accessList);\n      return {\n        chainId: bigIntToHex(this.chainId),\n        nonce: bigIntToHex(this.nonce),\n        maxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n        maxFeePerGas: bigIntToHex(this.maxFeePerGas),\n        gasLimit: bigIntToHex(this.gasLimit),\n        to: this.to !== undefined ? this.to.toString() : undefined,\n        value: bigIntToHex(this.value),\n        data: bytesToHex(this.data),\n        accessList: accessListJSON,\n        v: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n        r: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n        s: this.s !== undefined ? bigIntToHex(this.s) : undefined\n      };\n    }\n    /**\n     * Return a compact error string representation of the object\n     */\n  }, {\n    key: \"errorStr\",\n    value: function errorStr() {\n      var errorStr = this._getSharedErrorPostfix();\n      errorStr += \" maxFeePerGas=\".concat(this.maxFeePerGas, \" maxPriorityFeePerGas=\").concat(this.maxPriorityFeePerGas);\n      return errorStr;\n    }\n    /**\n     * Internal helper function to create an annotated error message\n     *\n     * @param msg Base error message\n     * @hidden\n     */\n  }, {\n    key: \"_errorMsg\",\n    value: function _errorMsg(msg) {\n      return \"\".concat(msg, \" (\").concat(this.errorStr(), \")\");\n    }\n  }], [{\n    key: \"fromTxData\",\n    value: function fromTxData(txData) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return new FeeMarketEIP1559Transaction(txData, opts);\n    }\n    /**\n     * Instantiate a transaction from the serialized tx.\n     *\n     * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS])`\n     */\n  }, {\n    key: \"fromSerializedTx\",\n    value: function fromSerializedTx(serialized) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n        throw new Error(\"Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: \".concat(TRANSACTION_TYPE, \", received: \").concat(bytesToHex(serialized.subarray(0, 1))));\n      }\n      var values = RLP.decode(serialized.subarray(1));\n      if (!Array.isArray(values)) {\n        throw new Error('Invalid serialized tx input: must be array');\n      }\n      // eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n      return FeeMarketEIP1559Transaction.fromValuesArray(values, opts);\n    }\n    /**\n     * Create a transaction from a values array.\n     *\n     * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n     * accessList, signatureYParity, signatureR, signatureS]`\n     */\n  }, {\n    key: \"fromValuesArray\",\n    value: function fromValuesArray(values) {\n      var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      if (values.length !== 9 && values.length !== 12) {\n        throw new Error('Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).');\n      }\n      var _values = _slicedToArray(values, 12),\n        chainId = _values[0],\n        nonce = _values[1],\n        maxPriorityFeePerGas = _values[2],\n        maxFeePerGas = _values[3],\n        gasLimit = _values[4],\n        to = _values[5],\n        value = _values[6],\n        data = _values[7],\n        accessList = _values[8],\n        v = _values[9],\n        r = _values[10],\n        s = _values[11];\n      this._validateNotArray({\n        chainId: chainId,\n        v: v\n      });\n      validateNoLeadingZeroes({\n        nonce: nonce,\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasLimit: gasLimit,\n        value: value,\n        v: v,\n        r: r,\n        s: s\n      });\n      return new FeeMarketEIP1559Transaction({\n        chainId: uint8ArrayToBigInt(chainId),\n        nonce: nonce,\n        maxPriorityFeePerGas: maxPriorityFeePerGas,\n        maxFeePerGas: maxFeePerGas,\n        gasLimit: gasLimit,\n        to: to,\n        value: value,\n        data: data,\n        accessList: accessList !== null && accessList !== void 0 ? accessList : [],\n        v: v !== undefined ? uint8ArrayToBigInt(v) : undefined,\n        r: r,\n        s: s\n      }, opts);\n    }\n  }]);\n  return FeeMarketEIP1559Transaction;\n}(BaseTransaction);","map":{"version":3,"names":["keccak256","validateNoLeadingZeroes","RLP","bytesToHex","hexToBytes","uint8ArrayConcat","uint8ArrayEquals","MAX_INTEGER","BaseTransaction","getAccessListData","getAccessListJSON","getDataFeeEIP2930","verifyAccessList","bigIntToHex","toUint8Array","ecrecover","uint8ArrayToBigInt","bigIntToUnpaddedUint8Array","TRANSACTION_TYPE","TRANSACTION_TYPE_UINT8ARRAY","toString","padStart","FeeMarketEIP1559Transaction","_BaseTransaction","_inherits","_super","_createSuper","txData","_this","opts","arguments","length","undefined","_classCallCheck","call","Object","assign","type","DEFAULT_HARDFORK","chainId","accessList","maxFeePerGas","maxPriorityFeePerGas","common","_getCommon","isActivatedEIP","Error","activeCapabilities","concat","accessListData","AccessListJSON","_validateCannotExceedMaxInteger","_validateNotArray","gasLimit","msg","_errorMsg","_validateYParity","_validateHighS","freeze","_a","_assertThisInitialized","_createClass","key","value","getDataFee","cache","dataFee","hardfork","cost","_get","_getPrototypeOf","prototype","BigInt","isFrozen","getUpfrontCost","baseFee","prio","maxBase","inclusionFeePerGas","gasPrice","raw","nonce","to","buf","Uint8Array","from","data","v","r","s","serialize","base","encode","getMessageToSign","hashMessage","slice","message","hash","isSigned","getMessageToVerifySignature","getSenderPublicKey","msgHash","e","_processSignature","txOptions","fromTxData","toJSON","accessListJSON","errorStr","_getSharedErrorPostfix","fromSerializedTx","serialized","subarray","values","decode","Array","isArray","fromValuesArray","_values","_slicedToArray"],"sources":["D:\\projects\\react\\wen-base\\node_modules\\web3-eth-accounts\\src\\tx\\eip1559Transaction.ts"],"sourcesContent":["/*\nThis file is part of web3.js.\n\nweb3.js is free software: you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nweb3.js is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n*/\nimport { keccak256 } from 'ethereum-cryptography/keccak.js';\nimport { validateNoLeadingZeroes } from 'web3-validator';\nimport { RLP } from '@ethereumjs/rlp';\nimport { bytesToHex, hexToBytes, uint8ArrayConcat, uint8ArrayEquals } from 'web3-utils';\nimport { MAX_INTEGER } from './constants.js';\nimport { BaseTransaction } from './baseTransaction.js';\nimport {\n\tgetAccessListData,\n\tgetAccessListJSON,\n\tgetDataFeeEIP2930,\n\tverifyAccessList,\n} from './utils.js';\nimport {\n\tbigIntToHex,\n\ttoUint8Array,\n\tecrecover,\n\tuint8ArrayToBigInt,\n\tbigIntToUnpaddedUint8Array,\n} from '../common/utils.js';\nimport type {\n\tAccessList,\n\tAccessListUint8Array,\n\tFeeMarketEIP1559TxData,\n\tFeeMarketEIP1559ValuesArray,\n\tJsonTx,\n\tTxOptions,\n} from './types.js';\nimport type { Common } from '../common/common.js';\n\nconst TRANSACTION_TYPE = 2;\nconst TRANSACTION_TYPE_UINT8ARRAY = hexToBytes(TRANSACTION_TYPE.toString(16).padStart(2, '0'));\n\n/**\n * Typed transaction with a new gas fee market mechanism\n *\n * - TransactionType: 2\n * - EIP: [EIP-1559](https://eips.ethereum.org/EIPS/eip-1559)\n */\n// eslint-disable-next-line no-use-before-define\nexport class FeeMarketEIP1559Transaction extends BaseTransaction<FeeMarketEIP1559Transaction> {\n\tpublic readonly chainId: bigint;\n\tpublic readonly accessList: AccessListUint8Array;\n\tpublic readonly AccessListJSON: AccessList;\n\tpublic readonly maxPriorityFeePerGas: bigint;\n\tpublic readonly maxFeePerGas: bigint;\n\n\tpublic readonly common: Common;\n\n\t/**\n\t * The default HF if the tx type is active on that HF\n\t * or the first greater HF where the tx is active.\n\t *\n\t * @hidden\n\t */\n\tprotected DEFAULT_HARDFORK = 'london';\n\n\t/**\n\t * Instantiate a transaction from a data dictionary.\n\t *\n\t * Format: { chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, v, r, s }\n\t *\n\t * Notes:\n\t * - `chainId` will be set automatically if not provided\n\t * - All parameters are optional and have some basic default values\n\t */\n\tpublic static fromTxData(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\treturn new FeeMarketEIP1559Transaction(txData, opts);\n\t}\n\n\t/**\n\t * Instantiate a transaction from the serialized tx.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t */\n\tpublic static fromSerializedTx(serialized: Uint8Array, opts: TxOptions = {}) {\n\t\tif (!uint8ArrayEquals(serialized.subarray(0, 1), TRANSACTION_TYPE_UINT8ARRAY)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid serialized tx input: not an EIP-1559 transaction (wrong tx type, expected: ${TRANSACTION_TYPE}, received: ${bytesToHex(\n\t\t\t\t\tserialized.subarray(0, 1),\n\t\t\t\t)}`,\n\t\t\t);\n\t\t}\n\t\tconst values = RLP.decode(serialized.subarray(1));\n\n\t\tif (!Array.isArray(values)) {\n\t\t\tthrow new Error('Invalid serialized tx input: must be array');\n\t\t}\n\t\t// eslint-disable-next-line @typescript-eslint/no-unsafe-argument\n\t\treturn FeeMarketEIP1559Transaction.fromValuesArray(values as any, opts);\n\t}\n\n\t/**\n\t * Create a transaction from a values array.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t */\n\tpublic static fromValuesArray(values: FeeMarketEIP1559ValuesArray, opts: TxOptions = {}) {\n\t\tif (values.length !== 9 && values.length !== 12) {\n\t\t\tthrow new Error(\n\t\t\t\t'Invalid EIP-1559 transaction. Only expecting 9 values (for unsigned tx) or 12 values (for signed tx).',\n\t\t\t);\n\t\t}\n\n\t\tconst [\n\t\t\tchainId,\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tto,\n\t\t\tvalue,\n\t\t\tdata,\n\t\t\taccessList,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t] = values;\n\n\t\tthis._validateNotArray({ chainId, v });\n\t\tvalidateNoLeadingZeroes({\n\t\t\tnonce,\n\t\t\tmaxPriorityFeePerGas,\n\t\t\tmaxFeePerGas,\n\t\t\tgasLimit,\n\t\t\tvalue,\n\t\t\tv,\n\t\t\tr,\n\t\t\ts,\n\t\t});\n\n\t\treturn new FeeMarketEIP1559Transaction(\n\t\t\t{\n\t\t\t\tchainId: uint8ArrayToBigInt(chainId),\n\t\t\t\tnonce,\n\t\t\t\tmaxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas,\n\t\t\t\tgasLimit,\n\t\t\t\tto,\n\t\t\t\tvalue,\n\t\t\t\tdata,\n\t\t\t\taccessList: accessList ?? [],\n\t\t\t\tv: v !== undefined ? uint8ArrayToBigInt(v) : undefined, // EIP2930 supports v's with value 0 (empty Uint8Array)\n\t\t\t\tr,\n\t\t\t\ts,\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * This constructor takes the values, validates them, assigns them and freezes the object.\n\t *\n\t * It is not recommended to use this constructor directly. Instead use\n\t * the static factory methods to assist in creating a Transaction object from\n\t * varying data types.\n\t */\n\tpublic constructor(txData: FeeMarketEIP1559TxData, opts: TxOptions = {}) {\n\t\tsuper({ ...txData, type: TRANSACTION_TYPE }, opts);\n\t\tconst { chainId, accessList, maxFeePerGas, maxPriorityFeePerGas } = txData;\n\n\t\tthis.common = this._getCommon(opts.common, chainId);\n\t\tthis.chainId = this.common.chainId();\n\n\t\tif (!this.common.isActivatedEIP(1559)) {\n\t\t\tthrow new Error('EIP-1559 not enabled on Common');\n\t\t}\n\t\tthis.activeCapabilities = this.activeCapabilities.concat([1559, 2718, 2930]);\n\n\t\t// Populate the access list fields\n\t\tconst accessListData = getAccessListData(accessList ?? []);\n\t\tthis.accessList = accessListData.accessList;\n\t\tthis.AccessListJSON = accessListData.AccessListJSON;\n\t\t// Verify the access list format.\n\t\tverifyAccessList(this.accessList);\n\n\t\tthis.maxFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxFeePerGas === '' ? '0x' : maxFeePerGas),\n\t\t);\n\t\tthis.maxPriorityFeePerGas = uint8ArrayToBigInt(\n\t\t\ttoUint8Array(maxPriorityFeePerGas === '' ? '0x' : maxPriorityFeePerGas),\n\t\t);\n\n\t\tthis._validateCannotExceedMaxInteger({\n\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t});\n\n\t\tBaseTransaction._validateNotArray(txData);\n\n\t\tif (this.gasLimit * this.maxFeePerGas > MAX_INTEGER) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'gasLimit * maxFeePerGas cannot exceed MAX_INTEGER (2^256-1)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (this.maxFeePerGas < this.maxPriorityFeePerGas) {\n\t\t\tconst msg = this._errorMsg(\n\t\t\t\t'maxFeePerGas cannot be less than maxPriorityFeePerGas (The total must be the larger of the two)',\n\t\t\t);\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tthis._validateYParity();\n\t\tthis._validateHighS();\n\n\t\tconst freeze = opts?.freeze ?? true;\n\t\tif (freeze) {\n\t\t\tObject.freeze(this);\n\t\t}\n\t}\n\n\t/**\n\t * The amount of gas paid for the data in this tx\n\t */\n\tpublic getDataFee(): bigint {\n\t\tif (this.cache.dataFee && this.cache.dataFee.hardfork === this.common.hardfork()) {\n\t\t\treturn this.cache.dataFee.value;\n\t\t}\n\n\t\tlet cost = super.getDataFee();\n\t\tcost += BigInt(getDataFeeEIP2930(this.accessList, this.common));\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tthis.cache.dataFee = {\n\t\t\t\tvalue: cost,\n\t\t\t\thardfork: this.common.hardfork(),\n\t\t\t};\n\t\t}\n\n\t\treturn cost;\n\t}\n\n\t/**\n\t * The up front amount that an account must have for this transaction to be valid\n\t * @param baseFee The base fee of the block (will be set to 0 if not provided)\n\t */\n\tpublic getUpfrontCost(baseFee = BigInt(0)): bigint {\n\t\tconst prio = this.maxPriorityFeePerGas;\n\t\tconst maxBase = this.maxFeePerGas - baseFee;\n\t\tconst inclusionFeePerGas = prio < maxBase ? prio : maxBase;\n\t\tconst gasPrice = inclusionFeePerGas + baseFee;\n\t\treturn this.gasLimit * gasPrice + this.value;\n\t}\n\n\t/**\n\t * Returns a Uint8Array Array of the raw Uint8Arrays of the EIP-1559 transaction, in order.\n\t *\n\t * Format: `[chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS]`\n\t *\n\t * Use {@link FeeMarketEIP1559Transaction.serialize} to add a transaction to a block\n\t * with {@link Block.fromValuesArray}.\n\t *\n\t * For an unsigned tx this method uses the empty Uint8Array values for the\n\t * signature parameters `v`, `r` and `s` for encoding. For an EIP-155 compliant\n\t * representation for external signing use {@link FeeMarketEIP1559Transaction.getMessageToSign}.\n\t */\n\tpublic raw(): FeeMarketEIP1559ValuesArray {\n\t\treturn [\n\t\t\tbigIntToUnpaddedUint8Array(this.chainId),\n\t\t\tbigIntToUnpaddedUint8Array(this.nonce),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxPriorityFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.maxFeePerGas),\n\t\t\tbigIntToUnpaddedUint8Array(this.gasLimit),\n\t\t\tthis.to !== undefined ? this.to.buf : Uint8Array.from([]),\n\t\t\tbigIntToUnpaddedUint8Array(this.value),\n\t\t\tthis.data,\n\t\t\tthis.accessList,\n\t\t\tthis.v !== undefined ? bigIntToUnpaddedUint8Array(this.v) : Uint8Array.from([]),\n\t\t\tthis.r !== undefined ? bigIntToUnpaddedUint8Array(this.r) : Uint8Array.from([]),\n\t\t\tthis.s !== undefined ? bigIntToUnpaddedUint8Array(this.s) : Uint8Array.from([]),\n\t\t];\n\t}\n\n\t/**\n\t * Returns the serialized encoding of the EIP-1559 transaction.\n\t *\n\t * Format: `0x02 || rlp([chainId, nonce, maxPriorityFeePerGas, maxFeePerGas, gasLimit, to, value, data,\n\t * accessList, signatureYParity, signatureR, signatureS])`\n\t *\n\t * Note that in contrast to the legacy tx serialization format this is not\n\t * valid RLP any more due to the raw tx type preceding and concatenated to\n\t * the RLP encoding of the values.\n\t */\n\tpublic serialize(): Uint8Array {\n\t\tconst base = this.raw();\n\t\treturn uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t}\n\n\t/**\n\t * Returns the serialized unsigned tx (hashed or raw), which can be used\n\t * to sign the transaction (e.g. for sending to a hardware wallet).\n\t *\n\t * Note: in contrast to the legacy tx the raw message format is already\n\t * serialized and doesn't need to be RLP encoded any more.\n\t *\n\t * ```javascript\n\t * const serializedMessage = tx.getMessageToSign(false) // use this for the HW wallet input\n\t * ```\n\t *\n\t * @param hashMessage - Return hashed message if set to true (default: true)\n\t */\n\tpublic getMessageToSign(hashMessage = true): Uint8Array {\n\t\tconst base = this.raw().slice(0, 9);\n\t\tconst message = uint8ArrayConcat(TRANSACTION_TYPE_UINT8ARRAY, RLP.encode(base));\n\t\tif (hashMessage) {\n\t\t\treturn keccak256(message);\n\t\t}\n\t\treturn message;\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash of the serialized tx.\n\t *\n\t * This method can only be used for signed txs (it throws otherwise).\n\t * Use {@link FeeMarketEIP1559Transaction.getMessageToSign} to get a tx hash for the purpose of signing.\n\t */\n\tpublic hash(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call hash method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tif (Object.isFrozen(this)) {\n\t\t\tif (!this.cache.hash) {\n\t\t\t\tthis.cache.hash = keccak256(this.serialize());\n\t\t\t}\n\t\t\treturn this.cache.hash;\n\t\t}\n\n\t\treturn keccak256(this.serialize());\n\t}\n\n\t/**\n\t * Computes a sha3-256 hash which can be used to verify the signature\n\t */\n\tpublic getMessageToVerifySignature(): Uint8Array {\n\t\treturn this.getMessageToSign();\n\t}\n\n\t/**\n\t * Returns the public key of the sender\n\t */\n\tpublic getSenderPublicKey(): Uint8Array {\n\t\tif (!this.isSigned()) {\n\t\t\tconst msg = this._errorMsg('Cannot call this method if transaction is not signed');\n\t\t\tthrow new Error(msg);\n\t\t}\n\n\t\tconst msgHash = this.getMessageToVerifySignature();\n\t\tconst { v, r, s } = this;\n\n\t\tthis._validateHighS();\n\n\t\ttry {\n\t\t\treturn ecrecover(\n\t\t\t\tmsgHash,\n\t\t\t\tv! + BigInt(27), // Recover the 27 which was stripped from ecsign\n\t\t\t\tbigIntToUnpaddedUint8Array(r!),\n\t\t\t\tbigIntToUnpaddedUint8Array(s!),\n\t\t\t);\n\t\t} catch (e: any) {\n\t\t\tconst msg = this._errorMsg('Invalid Signature');\n\t\t\tthrow new Error(msg);\n\t\t}\n\t}\n\n\tpublic _processSignature(v: bigint, r: Uint8Array, s: Uint8Array) {\n\t\tconst opts = { ...this.txOptions, common: this.common };\n\n\t\treturn FeeMarketEIP1559Transaction.fromTxData(\n\t\t\t{\n\t\t\t\tchainId: this.chainId,\n\t\t\t\tnonce: this.nonce,\n\t\t\t\tmaxPriorityFeePerGas: this.maxPriorityFeePerGas,\n\t\t\t\tmaxFeePerGas: this.maxFeePerGas,\n\t\t\t\tgasLimit: this.gasLimit,\n\t\t\t\tto: this.to,\n\t\t\t\tvalue: this.value,\n\t\t\t\tdata: this.data,\n\t\t\t\taccessList: this.accessList,\n\t\t\t\tv: v - BigInt(27), // This looks extremely hacky: /util actually adds 27 to the value, the recovery bit is either 0 or 1.\n\t\t\t\tr: uint8ArrayToBigInt(r),\n\t\t\t\ts: uint8ArrayToBigInt(s),\n\t\t\t},\n\t\t\topts,\n\t\t);\n\t}\n\n\t/**\n\t * Returns an object with the JSON representation of the transaction\n\t */\n\tpublic toJSON(): JsonTx {\n\t\tconst accessListJSON = getAccessListJSON(this.accessList);\n\n\t\treturn {\n\t\t\tchainId: bigIntToHex(this.chainId),\n\t\t\tnonce: bigIntToHex(this.nonce),\n\t\t\tmaxPriorityFeePerGas: bigIntToHex(this.maxPriorityFeePerGas),\n\t\t\tmaxFeePerGas: bigIntToHex(this.maxFeePerGas),\n\t\t\tgasLimit: bigIntToHex(this.gasLimit),\n\t\t\tto: this.to !== undefined ? this.to.toString() : undefined,\n\t\t\tvalue: bigIntToHex(this.value),\n\t\t\tdata: bytesToHex(this.data),\n\t\t\taccessList: accessListJSON,\n\t\t\tv: this.v !== undefined ? bigIntToHex(this.v) : undefined,\n\t\t\tr: this.r !== undefined ? bigIntToHex(this.r) : undefined,\n\t\t\ts: this.s !== undefined ? bigIntToHex(this.s) : undefined,\n\t\t};\n\t}\n\n\t/**\n\t * Return a compact error string representation of the object\n\t */\n\tpublic errorStr() {\n\t\tlet errorStr = this._getSharedErrorPostfix();\n\t\terrorStr += ` maxFeePerGas=${this.maxFeePerGas} maxPriorityFeePerGas=${this.maxPriorityFeePerGas}`;\n\t\treturn errorStr;\n\t}\n\n\t/**\n\t * Internal helper function to create an annotated error message\n\t *\n\t * @param msg Base error message\n\t * @hidden\n\t */\n\tprotected _errorMsg(msg: string) {\n\t\treturn `${msg} (${this.errorStr()})`;\n\t}\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}